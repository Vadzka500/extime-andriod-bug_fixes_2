package ai.extime.Adapters;import android.animation.ArgbEvaluator;import android.animation.ValueAnimator;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.graphics.Color;import android.graphics.Typeface;import android.graphics.drawable.GradientDrawable;import android.support.v4.content.ContextCompat;import android.support.v7.widget.RecyclerView;import android.text.Spannable;import android.text.SpannableStringBuilder;import android.text.style.ForegroundColorSpan;import android.text.style.StyleSpan;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.TextView;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import ai.extime.Interfaces.CompanySelectInterface;import ai.extime.Models.Contact;import com.extime.R;public class CompanyEditAdapter extends RecyclerView.Adapter<CompanyEditAdapter.SelectCompanyViewHolderEdit> {    private View mainView;    private Context context;    private CompanySelectInterface companySelectInterface;    private List<Contact> listOfCompanies = new ArrayList<>();    private String search = "";    public boolean checkClick = true;    private Activity activity;    static class SelectCompanyViewHolderEdit extends RecyclerView.ViewHolder {        TextView hashTagValue;        TextView countCompany;        View card;        ImageView image;        TextView initials;        FrameLayout f;        SelectCompanyViewHolderEdit(View itemView) {            super(itemView);            card = itemView;            hashTagValue = (TextView) itemView.findViewById(R.id.companyValueEdit);            countCompany = (TextView) itemView.findViewById(R.id.countCompanyContacts);            image = itemView.findViewById(R.id.companyPhotoIcon);            initials = itemView.findViewById(R.id.profileIconInitials);            f = itemView.findViewById(R.id.frameInageIconClipboard);        }    }    public CompanyEditAdapter(List<Contact> listOfCompanies, CompanySelectInterface companySelectInterface, Activity activity) {        this.listOfCompanies = listOfCompanies;        this.companySelectInterface = companySelectInterface;        this.activity = activity;    }    public void sortCompanybyAsc() {        try {            Collections.sort(listOfCompanies, (contactFirst, contactSecond) -> contactFirst.getName().toString().trim().compareToIgnoreCase(contactSecond.getName().toString().trim()));        } catch (Exception e) {            e.printStackTrace();        }        notifyDataSetChanged();    }    public void sortCompanybyDesc() {        try {            Collections.sort(listOfCompanies, (contactFirst, contactSecond) -> contactSecond.getName().toString().trim().compareToIgnoreCase(contactFirst.getName().toString().trim()));        } catch (Exception e) {            e.printStackTrace();        }        notifyDataSetChanged();    }    public void sortByAscTime() {        Collections.sort(listOfCompanies, (hashTagFirst, hashTagSecond) -> hashTagFirst.getDateCreate().compareTo(hashTagSecond.getDateCreate()));        notifyDataSetChanged();    }    public void sortByDescTime() {        Collections.sort(listOfCompanies, (hashTagFirst, hashTagSecond) -> hashTagSecond.getDateCreate().compareTo(hashTagFirst.getDateCreate()));        notifyDataSetChanged();    }    public void sortByDescPopul() {        Collections.sort(listOfCompanies, new Comparator<Contact>() {            @Override            public int compare(Contact first, Contact second) {                return second.listOfContacts.size() - first.listOfContacts.size();            }        });        notifyDataSetChanged();    }    public void sortByAscPopul() {        Collections.sort(listOfCompanies, new Comparator<Contact>() {            @Override            public int compare(Contact first, Contact second) {                return first.listOfContacts.size() - second.listOfContacts.size();            }        });        notifyDataSetChanged();    }    public void updateList(ArrayList<Contact> list) {        this.listOfCompanies = list;        notifyDataSetChanged();    }    public CompanyEditAdapter(List<Contact> listOfCompanies, CompanySelectInterface companySelectInterface, String s, Activity activity) {        this.listOfCompanies = listOfCompanies;        this.companySelectInterface = companySelectInterface;        this.search = s;        this.activity = activity;    }    private String getInitials(Contact contact) {        String initials = "";        if (contact.getName() != null && !contact.getName().isEmpty()) {            String names[] = contact.getName().split("\\s+");            for (String namePart : names) {                if (namePart != null && namePart.length() > 0)                    initials += namePart.charAt(0);            }        }        return initials.toUpperCase();    }    @Override    public CompanyEditAdapter.SelectCompanyViewHolderEdit onCreateViewHolder(ViewGroup viewGroup, int i) {        mainView = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.card_company_edit, viewGroup, false);        return new CompanyEditAdapter.SelectCompanyViewHolderEdit(mainView);    }    @SuppressLint("RecyclerView")    @Override    public void onBindViewHolder(final CompanyEditAdapter.SelectCompanyViewHolderEdit holder, int position) {        holder.f.setVisibility(View.VISIBLE);        if (search == "") {            holder.hashTagValue.setText(listOfCompanies.get(position).getName() + " ( " + listOfCompanies.get(position).listOfContacts.size() + " )");            //    holder.countCompany.setText("( " + listOfCompanies.get(position).listOfContacts.size() + " )");            holder.countCompany.setVisibility(View.GONE);            String initials = getInitials(listOfCompanies.get(position));            holder.initials.setText(initials);            holder.image.setBackgroundColor(listOfCompanies.get(position).color);        } else {            int startI = listOfCompanies.get(position).getName().toString().toLowerCase().indexOf(search.toLowerCase());            final SpannableStringBuilder text = new SpannableStringBuilder(listOfCompanies.get(position).getName().toString().trim() + " ( " + listOfCompanies.get(position).listOfContacts.size() + " )");            final ForegroundColorSpan style = new ForegroundColorSpan(Color.parseColor("#1976D2"));            StyleSpan bss = new StyleSpan(android.graphics.Typeface.BOLD);            if (startI != -1) {                text.setSpan(style, startI, startI + search.length(), Spannable.SPAN_COMPOSING);                text.setSpan(bss, startI, startI + search.length(), Spannable.SPAN_COMPOSING);            }            //text = text + ;            holder.hashTagValue.setText(text);            holder.countCompany.setVisibility(View.GONE);            /*GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(activity, R.drawable.blue_circle).mutate();            circle.setColor(listOfCompanies.get(position).color);*/            String initials = getInitials(listOfCompanies.get(position));            holder.initials.setText(initials);            holder.image.setBackgroundColor(listOfCompanies.get(position).color);        }        holder.hashTagValue.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                companySelectInterface.addSelectedCompanyEdit(listOfCompanies.get(position).getName());            }        });        holder.hashTagValue.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                switch (motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN: {                        OnTouchMethod(holder.hashTagValue);                        break;                    }                    case MotionEvent.ACTION_UP: {                        OnUpTouchMethod(holder.hashTagValue);                        break;                    }                    case MotionEvent.ACTION_CANCEL: {                        OnCalcelTouchMethod(holder.hashTagValue);                        break;                    }                    case MotionEvent.ACTION_MOVE: {                        OnMoveTouchMethod(holder.hashTagValue, motionEvent);                        break;                    }                }                return false;            }        });    }    public void OnTouchMethod(TextView textview) {        checkClick = false;        int colorFrom;        String s = activity.getResources().getResourceEntryName(textview.getId());        colorFrom = activity.getResources().getColor(R.color.gray);        int colorTo = activity.getResources().getColor(R.color.md_deep_orange_300);        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);        colorAnimation.setDuration(50); // milliseconds        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator animator) {                textview.setTextColor((int) animator.getAnimatedValue());                //  imageview.setColorFilter((int) animator.getAnimatedValue());                // textview.setTypeface(null, Typeface.BOLD);            }        });        colorAnimation.start();    }    public void OnCalcelTouchMethod(TextView textView) {        int colorFrom = activity.getResources().getColor(R.color.md_deep_orange_300);        String s = activity.getResources().getResourceEntryName(textView.getId());        int colorTo;        colorTo = activity.getResources().getColor(R.color.gray);        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);        colorAnimation.setDuration(300); // milliseconds        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {            @Override            public void onAnimationUpdate(ValueAnimator animator) {                textView.setTextColor((int) animator.getAnimatedValue());                //      imageView.setColorFilter((int) animator.getAnimatedValue());                textView.setTypeface(null, Typeface.NORMAL);            }        });        colorAnimation.start();    }    public void OnUpTouchMethod(TextView textview) {        if (!checkClick) {            int colorFrom = activity.getResources().getColor(R.color.md_deep_orange_300);            //   int colorTo = getResources().getColor(R.color.colorPrimaryDark);            String s = activity.getResources().getResourceEntryName(textview.getId());            int colorTo;            colorTo = activity.getResources().getColor(R.color.gray);            ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);            colorAnimation.setDuration(50); // milliseconds            colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                @Override                public void onAnimationUpdate(ValueAnimator animator) {                    textview.setTextColor((int) animator.getAnimatedValue());                    //  imageview.setColorFilter((int) animator.getAnimatedValue());                    //textview.setTypeface(null, Typeface.NORMAL);                }            });            colorAnimation.start();        }    }    public void OnMoveTouchMethod(TextView textView, MotionEvent motionEvent) {        int[] location = new int[2];        textView.getLocationInWindow(location);        int leftX = 0;        int rightX = leftX + textView.getWidth();        int topY = 0;        int bottomY = topY + textView.getHeight();        float xCurrent = motionEvent.getX();        float yCurrent = motionEvent.getY();        if (xCurrent > rightX || xCurrent < leftX || yCurrent > bottomY || yCurrent < topY) {            if (!checkClick) {                checkClick = true;                String s = activity.getResources().getResourceEntryName(textView.getId());                int colorTo2;                colorTo2 = activity.getResources().getColor(R.color.gray);                int colorFrom = activity.getResources().getColor(R.color.md_deep_orange_300);                // int colorTo = textView.getTextColors().getDefaultColor();                //colorTo2 = textView.getTextColors().getDefaultColor();                //  ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);                //  colorAnimation.setDuration(1000); // milliseconds                ValueAnimator colorAnimation2 = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo2);                colorAnimation2.setDuration(50); // milliseconds             /*   colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                    @Override                    public void onAnimationUpdate(ValueAnimator animator) {                      //  textView.setTextColor((int) animator.getAnimatedValue());                       // imageView.setColorFilter((int) animator.getAnimatedValue());                     //   textView.setTypeface(null, Typeface.NORMAL);                    }                });                colorAnimation.start();*/                colorAnimation2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {                    @Override                    public void onAnimationUpdate(ValueAnimator animator) {                        textView.setTextColor((int) animator.getAnimatedValue());                        //  imageView.setColorFilter((int) animator.getAnimatedValue());                        //    textView.setTypeface(null, Typeface.NORMAL);                    }                });                colorAnimation2.start();            }        }    }    @Override    public int getItemCount() {        return listOfCompanies.size();    }}