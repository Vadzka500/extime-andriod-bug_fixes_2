package ai.extime.Fragments;

import android.Manifest;
import android.animation.ArgbEvaluator;
import android.animation.ValueAnimator;
import android.app.SearchManager;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.database.Cursor;
import android.database.CursorIndexOutOfBoundsException;
import android.database.StaleDataException;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.LayerDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.ContactsContract;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.StaggeredGridLayoutManager;
import android.support.v7.widget.Toolbar;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.telephony.PhoneNumberUtils;
import android.text.Editable;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.text.style.StyleSpan;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.GridLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.github.clans.fab.FloatingActionMenu;
import com.google.android.gms.maps.model.Circle;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberToCarrierMapper;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import com.ogaclejapan.smarttablayout.SmartTabLayout;
import com.snatik.storage.Storage;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;


import java.io.File;
import java.io.IOException;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import java.util.Random;
import java.util.Set;
import java.util.TimeZone;
import java.util.regex.Pattern;

import ai.extime.Activity.MainActivity;
import ai.extime.Adapters.ClibpboardAdapter;
import ai.extime.Adapters.CompanyEditAdapter;
import ai.extime.Adapters.ContactsSectionAdapter;
import ai.extime.Adapters.Contacts_company_preview_adapter;
import ai.extime.Adapters.CustomTagsAdapter;
import ai.extime.Adapters.DialogAdapter;
import ai.extime.Adapters.DialogDataContactSelect;
import ai.extime.Adapters.ExtratorAdapter;
import ai.extime.Adapters.HashTagSearchAdapter;
import ai.extime.Adapters.HashTagsAdapter;
import ai.extime.Adapters.HashtagMasstaggingAdapter;
import ai.extime.Adapters.HelpHashtagAdapter;
import ai.extime.Adapters.KanbanAdapter;
import ai.extime.Adapters.MostUsedTagsAdapter;
import ai.extime.Adapters.PositionEditAdapter;
import ai.extime.Adapters.ProfileSectionAdapter;
import ai.extime.Adapters.SelectCompanyAdapter;
import ai.extime.Adapters.SelectPositionAdapter;
import ai.extime.Enums.ClipboardEnum;
import ai.extime.Enums.SocEnum;
import ai.extime.Events.AddContact;
import ai.extime.Events.AddContactsToList;
import ai.extime.Events.AddHistoryEntry;
import ai.extime.Events.CloseOtherPopups;
import ai.extime.Events.ContactLoadEvent;
import ai.extime.Events.NotifyAdapter;
import ai.extime.Events.OpenDriver;
import ai.extime.Events.PopupContact;
import ai.extime.Events.RemoveContact;
import ai.extime.Events.ShowHashtagPopup;
import ai.extime.Events.TypeCard;
import ai.extime.Events.UpdateAfterSync;
import ai.extime.Events.UpdateMessengersPreview;
import ai.extime.Events.UpdateSearchMessengers;
import ai.extime.Interfaces.CompanySelectInterface;
import ai.extime.Interfaces.ContactBarInter;
import ai.extime.Interfaces.HashtagAddInterface;
import ai.extime.Interfaces.IContactsFragment;
import ai.extime.Interfaces.IKanbanList;
import ai.extime.Interfaces.IOpenSocials;
import ai.extime.Interfaces.PopupsInter;
import ai.extime.Interfaces.Postman;
import ai.extime.Models.AdapterScrollModel;
import ai.extime.Models.CMD;
import ai.extime.Models.Clipboard;
import ai.extime.Models.DataUpdate;
import ai.extime.Models.Extrator;
import ai.extime.Models.HashSearchModel;
import ai.extime.Models.HashTag;
import ai.extime.Models.HashTagQuantity;
import ai.extime.Models.HideContactsProfile;
import ai.extime.Models.ListAdress;
import ai.extime.Models.Mark_;
import ai.extime.Models.SynkNewC;
import ai.extime.Models.TypeCount;
import ai.extime.Services.ContactCacheService;
import ai.extime.Utils.ShareTemplatesMessageReply;
import ai.extime.Utils.SocialEq;
import ai.extime.Utils.SwipeController;
import ai.extime.Utils.SwipeControllerActions;
import de.hdodenhof.circleimageview.CircleImageView;
import io.realm.Realm;
import io.realm.RealmConfiguration;
import io.realm.RealmList;
import io.realm.RealmObject;
import ai.extime.Adapters.ContactAdapter;
import ai.extime.Enums.ExtractEnums;
import ai.extime.Enums.FillDataEnums;
import ai.extime.Enums.FragmentTypeEnum;
import ai.extime.Enums.SocialEnums;
import ai.extime.Events.AnimColorMessenger;
import ai.extime.Events.RemoveCompanyFromListAdapter;
import ai.extime.Events.UpdateFile;
import ai.extime.Events.UpdateList;
import ai.extime.Models.Contact;
import ai.extime.Models.ContactInfo;
import ai.extime.Models.SocialModel;

import com.extime.R;

import ai.extime.Services.ContactsService;
import ai.extime.Services.FabNotificationService;
import ai.extime.Utils.ClipboardType;
import jxl.CellView;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 * Created by patal on 10.08.2017.
 */

public class  ContactsFragment extends Fragment implements ContactBarInter, PopupsInter, HashtagAddInterface, CompanySelectInterface, IContactsFragment, IKanbanList, IOpenSocials {

    public RecyclerView containerContacts;

    public ArrayList<Contact> listOfContacts;

    private ArrayList<Contact> listOfContactsToExport;

    private ArrayList<CheckBox> listOfFavoritesCheck;

    public ArrayList<ContactInfo> contactInfos;

    public static ArrayList<View> openedViews;

    private final int PERMISSION_REQUEST_CALL_PHONE = 11;

    private Contact selectedContactForCall;

    public boolean clickMainCheck = false;

    public boolean clicker = false;

    public FrameLayout profilePopUp;

    FrameLayout createPopup;

    public FrameLayout hashTagPopup = null;

    private String cmdTAGForSet;

    public FrameLayout allContactsPopup = null;

    private TypeCount count;

    public FrameLayout fastEditPopup = null;

    public Toolbar toolbarC;

    public TypeCard typeCard = TypeCard.FULL;

    public boolean hideHelpHash = true;

    public FrameLayout popupProfileEditPreviewSocial;
    private FrameLayout popupEditSocial;
    //===
    public FrameLayout popupCompaniesEdit = null;
    public FrameLayout popupPositionEdit = null;
    public FrameLayout popupPositionCompaniesEdit = null;


    public FrameLayout companyProfilePopup = null;

    public FrameLayout remindPopup = null;

    public FrameLayout favoriteContactsPopup = null;

    public static boolean UPD_ALL = false;

    private boolean checkFavoriteGroup = false;

    public static boolean UPD_FAV = false;

    public static boolean UPD_IMP = false;

    public static boolean UPD_FIN = false;

    public static boolean UPD_PAUSE = false;

    public static boolean UPD_CROWN = false;

    public static boolean UPD_VIP = false;

    public static boolean UPD_STARTUP = false;

    public static boolean UPD_INVESTOR = false;


    public static boolean UPD_LIST = false;


    public Contact selectedContactPopup;

    public ContactsService contactsService;

    FrameLayout statusPopup;

    private TypeCount typeCount;

    public HashTagsAdapter HASHTAG_ADAPTER;

    public HashTagSearchAdapter HASHTAG_SEARCH_ADAPTER;

    public Contact lastOpenedProfileId;

    public ContactAdapter contactAdapter;

    private static Integer PERMISSION_REQUEST_CONTACT_WRITE = 48;

    private int quantityCheck = 8;

    private static String PREFS_NAME = "FIRST_RUN";

    private boolean sortedDesc;

    private boolean sortedDescCompany, sortTimeAscCompany;

    private ArrayList<HashTagQuantity> helpsHashtasgs = new ArrayList<>();

    public int lastFirstVisiblePosition = 0;

    private ContentResolver cr;

    private LinearLayoutManager mLinearLayoutManager;

    private CMD magicCMD = new CMD();

    private LinearLayoutManager linearForHashTags;

    private View mainView;

    FloatingActionMenu floatingActionMenu;

    private SocialModel socialModel;

    private boolean openedHashTag = false;

    private String selectedPossition = "";

    private boolean openedFavoritePopup = false;

    private boolean hashtagCheckClick = false;

    public FabNotificationService notificationService;

    public static int SELECTED_STATUS;

    private HashMap<HashTag, Integer> mapOfQuantityHashtags;

    private RecyclerView containerHashTags;

    private RecyclerView containerHashTagsSearch;

    RecyclerView containerAssistant;

    private boolean openedContactsPopup = false;

    public static boolean mergedContacts = false;

    private ArrayList<HashTag> listOfUniqueHashtags;

    private HelpHashtagAdapter helpHashtagAdapter;

    public boolean foundHelpsHashtags = true;

    private String[] magicSplit;

    FrameLayout socialPopup;

    RecyclerView containerMost;

    FrameLayout editFrameWeb;

    CustomTagsAdapter customTagsAdapter;

    public FrameLayout popupUserHashtags;

    private FrameLayout companySelectPopup;

    MostUsedTagsAdapter mostTagAdapter;
    public int countContactsMain;
    public static int MessageToLoad = 0;

    public boolean changeListAfterRemoveText = true;

    public static boolean cherckFirstHash = false;

    public static boolean goneSelectMeny = false;

    public static boolean createContact = false;

    public static Contact contactFindExtractSocial = null;

    public static ExtractEnums extractEnumsToExtractContainer;

    static ExtratorAdapter extratorAdapter;

    public SharedPreferences mPref;

    public SharedPreferences mPrefCompany;

    public static String allWayLink;

    //public static ContactProfileDataFragment contactProfileDataFragment;

    public ArrayList<Contact> listForSelect;

    public ParsingSocial parsingSocialMain;

    public FrameLayout popupHelpCompanyposition;

    public ArrayList<Long> listNewContacts;

    public ArrayList<AdapterScrollModel> listAdapter;

    public int firstItem;
    public int lastItem;

    public int mode = 1;

    public boolean allSearch = false;

    public ContactsFragment() {

    }

    public void changeContactsList(ArrayList<Contact> listOfContacts) {
        savePossitionList();
        this.listOfContacts = new ArrayList<>();
        //   this.listOfContacts.addAll(listOfContacts);
        this.listOfContacts.addAll(ContactCacheService.getAllContacts(null));
        initAdapter(true);

        initContactsBar();
        initRecyclerHashTags();
        initFavoritesPop();
    }

    Intent syncConatcts;

    MainActivity.MyBroadcastReceiver myBroadcastReceiver;

    MainActivity.MyBroadcastReceiverUpdate myBroadcastReceiverUpdate;

    public void updateAllContacts() {
        savePossitionList();
        this.listOfContacts.clear();
        this.listOfContacts.addAll(ContactCacheService.getAllContacts(null));



        ((Postman) getActivity()).setListOfContactsMain(listOfContacts);
        //MainActivity.LIST_OF_CONTACTS = listOfContacts;

        initAdapter(true);

        initContactsBar();
        initRecyclerHashTags();
        initFavoritesPop();
        contactAdapter.notifyDataSetChanged();


        //add sync


    }

    private void initViews() {
        if (!EventBus.getDefault().isRegistered(this)) EventBus.getDefault().register(this);

        openedViews = new ArrayList<>();
        containerContacts = (RecyclerView) mainView.findViewById(R.id.containerContacts);
        containerHashTags = (RecyclerView) getActivity().findViewById(R.id.containerHashTag);
        containerHashTagsSearch = (RecyclerView) getActivity().findViewById(R.id.containerHashTagSearch);
        mLinearLayoutManager = new LinearLayoutManager(mainView.getContext());
        linearForHashTags = new LinearLayoutManager(mainView.getContext());
        containerContacts.setLayoutManager(mLinearLayoutManager);
        containerHashTags.setLayoutManager(linearForHashTags);
        containerHashTagsSearch.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
        createPopup = (FrameLayout) getActivity().findViewById(R.id.popup_create);
        cr = mainView.getContext().getContentResolver();
        floatingActionMenu = (FloatingActionMenu) getActivity().findViewById(R.id.fabMenuContainer);
        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);
        contactsService = new ContactsService(getActivity().getContentResolver(), false);
        mPref = getActivity().getSharedPreferences("Sort", Context.MODE_PRIVATE);
    }

    public void savePossitionList() {
        lastFirstVisiblePosition = ((LinearLayoutManager) containerContacts.getLayoutManager()).findFirstCompletelyVisibleItemPosition();
    }

    public void setContacts() {
        if (listOfContacts == null) listOfContacts = new ArrayList<>();

        if (ContactCacheService.getCountContacts() != 0) {
            listOfContacts.clear();

            // listOfContacts.addAll(ContactCacheService.getAllContacts(getActivity().getApplicationContext()));
            /*listOfContacts = MainActivity.LIST_OF_CONTACTS;
            if(MainActivity.LIST_OF_CONTACTS.size() == 0)*/
            listOfContacts = ContactCacheService.getAllContacts(null);


        } else {

            listOfContacts.clear();

            listOfContacts.addAll(((Postman) getActivity()).getListOfContactsMain());
        }
    }

    public void setHashTagToMagicString(String hashtag) {
        foundHelpsHashtags = false;
        String[] magicSplit = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().split(" ");
        // ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().clear();
        if (magicSplit.length == 1) {

            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(hashtag + " ");
        } else {
            for (int indexI = 0; indexI < magicSplit.length - 1; indexI++) {
                if (indexI != 0)
                    ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText() + " " + magicSplit[indexI]);
                else
                    ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(magicSplit[indexI]);
            }
            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText() + " " + hashtag);
        }
        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setSelection(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length());
    }

    public void sortList() {
        if (sortedDesc) {
            sortArrayByAsc();
            sortedDesc = false;
            return;
        }
        sortArrayByDesc();
        sortedDesc = true;
    }

    private void sortArrayByDesc() {
        ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        ((ContactAdapter) containerContacts.getAdapter()).sortByDesc();
        if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null) {
            kanbanAdapter_1.sortByDesc();
            kanbanAdapter_2.sortByDesc();
            kanbanAdapter_3.sortByDesc();
            kanbanAdapter_4.sortByDesc();
        }
        TextView sortText = (TextView) getActivity().findViewById(R.id.sortText);
        sortText.setText("Z-A");
    }

    private void sortArrayByAsc() {
        ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        ((ContactAdapter) containerContacts.getAdapter()).sortByAsc();
        if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null) {
            kanbanAdapter_1.sortByAsc();
            kanbanAdapter_2.sortByAsc();
            kanbanAdapter_3.sortByAsc();
            kanbanAdapter_4.sortByAsc();
        }
        TextView sortText = (TextView) getActivity().findViewById(R.id.sortText);
        sortText.setText("A-Z");
    }

    private void initAdapter(boolean update) {
        containerContacts = (RecyclerView) mainView.findViewById(R.id.containerContacts);
        if (contactAdapter == null || update) {
            ArrayList<Contact> validateContacts = listOfContacts;
         /*   for (Contact contact : listOfContacts) {
                if (contact.getName() != null && (contact.getName().compareTo("No name") == 0 || contact.getName().trim().compareTo("") == 0)) {
                    continue;
                }
                validateContacts.add(contact);
            }*/
            //    System.out.println("    VALIDATE CONTACT SIZE end = "+validateContacts.size());

            contactAdapter = new ContactAdapter(mainView.getContext(), new ArrayList<>(validateContacts), this, toolbarC, HASHTAG_ADAPTER);

            try {
                String sort = mPref.getString("typeSort", "sortByAsc");

                if (sort.equals("sortByAsc")) {
                    contactAdapter.sortByAsc();
                    ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
                    ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                } else if (sort.equals("sortByDesc")) {
                    contactAdapter.sortByDesc();
                    ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
                    ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                } else if (sort.equals("sortByTimeAsc")) {
                    contactAdapter.sortByTimeAsc();
                    //contactAdapter.sortByTimeAscSaved();
                    ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                    ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                } else if (sort.equals("sortByTimeDesc")) {
                    contactAdapter.sortByTimeDesc();
                    //contactAdapter.sortByTimeDescSaved();
                    ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                    ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                }
                containerContacts.setAdapter(contactAdapter);
            } catch (Exception e) {

            }
            //  ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            //  ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        }

        int sortList = prefKanbanTouch.getInt("scrollList", 0);




        containerContacts.setAdapter(contactAdapter);

        ((LinearLayoutManager) containerContacts.getLayoutManager()).scrollToPosition(sortList);



        /*containerContacts.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {

                switch (event.getAction()) {
                    case MotionEvent.ACTION_UP: {

                        SharedPreferences.Editor editor = prefKanbanTouch.edit();
                        editor.putInt("scrollList", ((LinearLayoutManager) containerContacts.getLayoutManager()).findFirstVisibleItemPosition());
                        editor.apply();



                        break;
                    }
                }
                return false;
            }
        });*/

        if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0)
            contactAdapter.searchByStr(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString());



    }

    public void removeFromListByHashTag(String hashtag, Boolean allCheck) {
        contactAdapter.removeByHashtags(hashtag);
        if (allCheck) {
            clickMainCheck = false;

            clicker = true;
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
        }
        //   ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
    }

    public void removeFromListByHashTagNEW(String hash, ArrayList<HashTagQuantity> list, Boolean allCheck) {
        contactAdapter.removeByHashtagsNEW(list, hash);
        if (allCheck) {
            clickMainCheck = false;

            clicker = true;
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);


        }
        //   ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
    }

    public void addHyperHashtag(String hashTag) {
        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(false);


        contactAdapter.addHyperHashtag(hashTag);


        contactAdapter.setListSaveSort();

        contactAdapter.saveHashList();
        //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


        clickMainCheck = false;

        //updateKanban();


        if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
            setKanbanMode();

    }

    public void addToListByHashTag(String hashTag, boolean allChecked) {
        contactAdapter.addContactsByHashtag(hashTag);
      /*  if (allChecked)
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);*/

        //    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);


    }

    public void addToListByHashTagNEW(ArrayList<HashTagQuantity> list, String hash) {
        contactAdapter.addContactsByHashtagNEW(list, hash);
        /*if (allChecked)
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);*/

        //    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
    }

    public void addToListByHashTagNEWAND(ArrayList<HashTagQuantity> list, ArrayList<String> listHash) {
        if (listHash.size() > 0) {
            getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.contactsText).setVisibility(View.GONE);
            getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v -> {


                if (hashTagPopup != null && ((RadioButton) hashTagPopup.findViewById(R.id.radioOR)).isChecked()) {
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);


                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
                    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);

                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

                    initRecyclerHashTags();
                    stopSelectionMode();
                    contactAdapter.stopNEWSelection();


                    contactAdapter.defaultListContacts();
                    //setListOfContacts(contactsFragment.listForSelect);
                    listForSelect.clear();
                } else if (hashTagPopup != null && ((RadioButton) hashTagPopup.findViewById(R.id.radioAND)).isChecked()) {

                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

                    ContactAdapter.selectionModeEnabled = false;
                    listForSelect = new ArrayList<>();
                    contactAdapter.selectedContacts = new ArrayList<>();
                    contactAdapter.listOfSaveContact = new ArrayList<>();

                    if (!((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                    } else {
                        contactAdapter.defaultListContacts();
                        ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + "");
                    }

                    //getActivity().findViewById(R.id.allContactsLL).callOnClick();

                    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                    checkChangeHash = true;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                    checkChangeHash = false;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(false);


                    HASHTAG_ADAPTER.quantityCheck = 0;
                    HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                    HASHTAG_ADAPTER.allHashtagsCheck = false;
                    HASHTAG_ADAPTER.hyperHashtag = "";
                    HASHTAG_ADAPTER.notifyDataSetChanged();

                }
            });
            //((TextView) contactsFragment.getActivity().findViewById(R.id.barHashtag_count)).setText("(1)");
            ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).setText(contactAdapter.getListOfContacts().size() + " selected by hashtag ");
        } else {
            getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        }
        contactAdapter.addContactsByHashtagNEWAND(list, listHash);

    }

    public void addToListByHashTagNEWWithoutNotify(ArrayList<HashTagQuantity> list, String hash) {
        contactAdapter.addContactsByHashtagNEWWithoutNotify(list, hash);

    }


    private void setSavedAdapter() {
        containerContacts = (RecyclerView) mainView.findViewById(R.id.containerContacts);
        containerContacts.setAdapter(contactAdapter);
    }

    @Override
    public void onPause() {
        super.onPause();
        lastFirstVisiblePosition = ((LinearLayoutManager) containerContacts.getLayoutManager()).findFirstCompletelyVisibleItemPosition();
        //  closeOtherPopup();
        MainActivity.IS_PAUSE = true;
    }

    @Override
    public void onDetach() {
        super.onDetach();
        MainActivity.IS_PAUSE = false;
    }

    private void calculateTypeCount() {


        new Thread(new Runnable() {
            @Override
            public void run() {
                TypeCount count = new TypeCount();

                Realm realm = Realm.getDefaultInstance();
                ArrayList<Contact> c = ContactCacheService.getAllContactsRealm(getContext(), realm);
                if (c != null)
                    for (Contact contact : c) {

                        boolean ch = false;
                        if (contact.accountTypes != null)
                            for (ListAdress str : contact.accountTypes) {


                                if (str.getAddress().contains("phone"))
                                    count.setPhoneCt(count.getPhoneCt() + 1);
                                if (str.getAddress().contains("com.whatsapp"))
                                    count.setWhatsCt(count.getWhatsCt() + 1);
                                if (str.getAddress().contains("org.telegram.messenger") && (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {

                                    count.setTelegramCt(count.getTelegramCt() + 1);
                                }

                                if (str.getAddress().contains("com.google") && !ch) {
                                    count.setGoogleCt(count.getGoogleCt() + 1);
                                    ch = true;
                                }

                                //if (str.getAddress().contains("com.samsung.android.scloud"))
                                //count.setSamsungCloudCt(count.getSamsungCloudCt() + 1);

                               /* if (str.getAddress().contains("com.viber.voip")) {
                                    count.setViberCt(count.getViberCt() + 1);

                                }*/

                               /* if (str.getAddress().contains("com.skype.contacts.sync"))
                                    count.setSkypeCt(count.getSkypeCt() + 1);*/
                            }

                        if (contact.getSocialModel() != null) {
                            if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                                count.setFacebookCt(count.getFacebookCt() + 1);

                            if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                                count.setInstagramCt(count.getInstagramCt() + 1);

                            if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                                count.setLinkedinCt(count.getLinkedinCt() + 1);
                        }
                    }

                realm.close();

                try {
                    setCountOnBar(count);
                } catch (InternalError e) {
                    e.printStackTrace();
                }


            }
        }).start();





    }

    public void calculateTypeCountNEW() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                TypeCount count = new TypeCount();


                Realm realm1 = Realm.getDefaultInstance();
                try {

                    ArrayList<Contact> c = ContactCacheService.getAllContactsRealm(getContext(), realm1);
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (!ContactsService.checkLoad) {
                                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (c.size()) + "");
                            } else
                                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (ContactsService.CONTACT_COUNT_OF_DELETE) + "");
                        }
                    });
                    if (c != null)
                        for (Contact contact : c) {

                            boolean ch = false;
                            if (contact.accountTypes != null)
                                for (ListAdress str : contact.accountTypes) {


                                    if (str.getAddress().contains("phone"))
                                        count.setPhoneCt(count.getPhoneCt() + 1);
                                    if (str.getAddress().contains("com.whatsapp"))
                                        count.setWhatsCt(count.getWhatsCt() + 1);
                                    if (str.getAddress().contains("org.telegram.messenger")) {

                                        count.setTelegramCt(count.getTelegramCt() + 1);
                                    }

                                    if (str.getAddress().contains("com.google") && !ch) {
                                        count.setGoogleCt(count.getGoogleCt() + 1);
                                        ch = true;
                                    }

                                    //if (str.getAddress().contains("com.samsung.android.scloud"))
                                    //count.setSamsungCloudCt(count.getSamsungCloudCt() + 1);

                               /* if (str.getAddress().contains("com.viber.voip")) {
                                    count.setViberCt(count.getViberCt() + 1);

                                }*/

                              /*  if (str.getAddress().contains("com.skype.contacts.sync"))
                                    count.setSkypeCt(count.getSkypeCt() + 1);*/
                                }

                            if (contact.getSocialModel() != null) {
                                if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                                    count.setFacebookCt(count.getFacebookCt() + 1);

                                if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                                    count.setInstagramCt(count.getInstagramCt() + 1);

                                if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                                    count.setLinkedinCt(count.getLinkedinCt() + 1);
                            }
                        }


                    realm1.close();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    realm1.close();
                }

                setCountOnBarNEW(count);


            }
        }).start();
    }

    public void initContactsBar() {
        // count = calculateTypeCount();
        //    setCountOnBar(count);
        calculateTypeCount();
    }


    private void uncheckAllFavorite() {
        ((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.people_fav_check)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.community_fav_check)).setChecked(false);

        ((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).setChecked(false);
        ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).setChecked(false);
        ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).setChecked(false);
        ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).setChecked(false);

        ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).setChecked(false);
        ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).setChecked(false);
        ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).setChecked(false);
        ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).setChecked(false);
    }

    private void checkAll() {
        ((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.people_fav_check)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.community_fav_check)).setChecked(true);
        ((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).setChecked(true);
        ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).setChecked(true);
        ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).setChecked(true);
        ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).setChecked(true);

        ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).setChecked(true);
        ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).setChecked(true);
        ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).setChecked(true);
        ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).setChecked(true);
    }

    private boolean checkChecker() {
        int i = 0;
        for (CheckBox sanyaBelyi : listOfFavoritesCheck) {
            if (sanyaBelyi.isChecked()) i++;
        }
        if (listOfFavoritesCheck.size() == i) return true;
        return false;
    }

    public long countFavorites = 0;
    public long countImportant = 0;
    public long countPause = 0;
    public long countFinished = 0;
    public long countCrown = 0;
    public long countVIP = 0;
    public long countInvestor = 0;
    public long countStartup = 0;


    public void updateFavoriteContactsCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountFavorite();
                        countFavorites = count;
                        ((TextView) Fav_L.findViewById(R.id.whatsapp_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() &&
                                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateImportantContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountImportant();
                        countImportant = count;
                        ((TextView) Imp_L.findViewById(R.id.important_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateFinishedContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountFinished();
                        countFinished = count;
                        ((TextView) Fin_L.findViewById(R.id.finished_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updatePauseContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountPause();
                        countPause = count;
                        ((TextView) Pause_L.findViewById(R.id.pause_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateCrownContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountCrown();
                        ((TextView) Crown_L.findViewById(R.id.crown_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateVipContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountVip();
                        countVIP = count;
                        ((TextView) Vip_L.findViewById(R.id.vip_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateStartupContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountSturtup();
                        countStartup = count;
                        ((TextView) Stur_L.findViewById(R.id.sturtup_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                                && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    public void updateInvestorContactCount() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        int count = (int) ContactCacheService.getCountInvestor();
                        countInvestor = count;
                        ((TextView) Invest_L.findViewById(R.id.investor_ct)).setText("(" + (count) + ")");

                        if (((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() &&
                                !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()) {

                            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (count) + ")");
                        }
                    }
                });
            }
        }).start();
    }

    View Fav_L = null;
    View Imp_L = null;
    View Pause_L = null;
    View Fin_L = null;
    View Crown_L = null;
    View Vip_L = null;
    View Stur_L = null;
    View Invest_L = null;


    final boolean[] checkMain = {false};
    final boolean[] checkPeople = {false};
    final boolean[] checkCompany = {false};
    final boolean[] checkCommunity = {false};

    final boolean[] checkFFF = {false};
    final boolean[] checkIII = {false};
    final boolean[] checkPPP = {false};
    final boolean[] checkFFF2 = {false};

    final boolean[] checkCCC = {false};
    final boolean[] checkVVV = {false};
    final boolean[] checkSSS = {false};
    final boolean[] checkIII2 = {false};

    LinearLayout linearLayoutMark;

    public void updateMarkList() {

    }

    public void initFavoritesPop() {

        listOfFavoritesCheck = new ArrayList<>();


        if (linearLayoutMark == null) {

            Fav_L = getLayoutInflater().inflate(R.layout.layout_favorites, null);
            Imp_L = getLayoutInflater().inflate(R.layout.layout_important, null);
            Pause_L = getLayoutInflater().inflate(R.layout.layout_pause, null);
            Fin_L = getLayoutInflater().inflate(R.layout.layout_finished, null);

            Crown_L = getLayoutInflater().inflate(R.layout.layout_crown, null);
            Vip_L = getLayoutInflater().inflate(R.layout.layout_vip, null);
            Stur_L = getLayoutInflater().inflate(R.layout.layout_startup, null);
            Invest_L = getLayoutInflater().inflate(R.layout.layout_investor, null);

        }

        CheckBox companies = (CheckBox) getActivity().findViewById(R.id.companies_fav_check);
        CheckBox people = (CheckBox) getActivity().findViewById(R.id.people_fav_check);
        CheckBox community = (CheckBox) getActivity().findViewById(R.id.community_fav_check);
        CheckBox favorites = (CheckBox) Fav_L.findViewById(R.id.favorites_fav_check);
        CheckBox important = (CheckBox) Imp_L.findViewById(R.id.important_fav_check);
        CheckBox finished = (CheckBox) Fin_L.findViewById(R.id.finished_fav_check);
        CheckBox pause = (CheckBox) Pause_L.findViewById(R.id.pause_fav_check);

        CheckBox crown = (CheckBox) Crown_L.findViewById(R.id.crown_fav_check);
        CheckBox vip = (CheckBox) Vip_L.findViewById(R.id.vip_fav_check);
        CheckBox startup = (CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check);
        CheckBox investor = (CheckBox) Invest_L.findViewById(R.id.investor_fav_check);

        LinearLayout companiesLL = (LinearLayout) getActivity().findViewById(R.id.companies_fav_check_only);
        LinearLayout peopleLL = (LinearLayout) getActivity().findViewById(R.id.people_fav_check_only);
        LinearLayout communityLL = (LinearLayout) getActivity().findViewById(R.id.community_fav_check_only);
        LinearLayout favoritesLL = (LinearLayout) Fav_L.findViewById(R.id.favorites_fav_check_only);

        LinearLayout importantLL = (LinearLayout) Imp_L.findViewById(R.id.important_fav_check_only);
        LinearLayout finishedLL = (LinearLayout) Fin_L.findViewById(R.id.finished_fav_check_only);
        LinearLayout pauseLL = (LinearLayout) Pause_L.findViewById(R.id.pause_fav_check_only);

        LinearLayout crownLL = (LinearLayout) Crown_L.findViewById(R.id.crown_fav_check_only);
        LinearLayout vipLL = (LinearLayout) Vip_L.findViewById(R.id.vip_fav_check_only);
        LinearLayout startupLL = (LinearLayout) Stur_L.findViewById(R.id.sturtup_fav_check_only);
        LinearLayout investorLL = (LinearLayout) Invest_L.findViewById(R.id.investor_fav_check_only);


        listOfFavoritesCheck.add(companies);
        listOfFavoritesCheck.add(people);
        listOfFavoritesCheck.add(community);
        listOfFavoritesCheck.add(favorites);
        listOfFavoritesCheck.add(important);
        listOfFavoritesCheck.add(finished);
        listOfFavoritesCheck.add(pause);

        listOfFavoritesCheck.add(crown);
        listOfFavoritesCheck.add(vip);
        listOfFavoritesCheck.add(startup);
        listOfFavoritesCheck.add(investor);

        //int serviceContactCount = MainActivity.countContsactsMainAct;



        int contactCount = ContactCacheService.getOnlyContacts();
        int companyCount = ContactCacheService.getOnlyCompanySize();
        int favoriteCount = (int) ContactCacheService.getCountFavorite();
        int importantCount = (int) ContactCacheService.getCountImportant();
        int finishedCount = (int) ContactCacheService.getCountFinished();
        int pauseCount = (int) ContactCacheService.getCountPause();

        int crownCount = (int) ContactCacheService.getCountCrown();
        int vipCount = (int) ContactCacheService.getCountVip();
        int sturtupCount = (int) ContactCacheService.getCountSturtup();
        int investorCount = (int) ContactCacheService.getCountInvestor();


        int allCount = contactCount + companyCount;

        ((TextView) getActivity().findViewById(R.id.all_hashtag_countContacts)).setText(" " + allCount + "");

        //((TextView) getActivity().findViewById(R.id.whatsapp_ct)).setText("(" + (favoriteCount) + ")");

        countFavorites = favoriteCount;
        countImportant = importantCount;
        countPause = pauseCount;
        countFinished = finishedCount;
        countCrown = crownCount;
        countVIP = vipCount;
        countInvestor = investorCount;
        countStartup = sturtupCount;

        ((TextView) Imp_L.findViewById(R.id.important_ct)).setText("(" + (importantCount) + ")");
        ((TextView) Fin_L.findViewById(R.id.finished_ct)).setText("(" + (finishedCount) + ")");

        ((TextView) Crown_L.findViewById(R.id.crown_ct)).setText("(" + (crownCount) + ")");
        ((TextView) Vip_L.findViewById(R.id.vip_ct)).setText("(" + (vipCount) + ")");
        ((TextView) Stur_L.findViewById(R.id.sturtup_ct)).setText("(" + (sturtupCount) + ")");
        ((TextView) Invest_L.findViewById(R.id.investor_ct)).setText("(" + (investorCount) + ")");


        ((TextView) Pause_L.findViewById(R.id.pause_ct)).setText("(" + (pauseCount) + ")");

        ((TextView) Fav_L.findViewById(R.id.whatsapp_ct)).setText("(" + (favoriteCount) + ")");

        ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + allCount + "");
        ((TextView) getActivity().findViewById(R.id.people_fav)).setText("(" + (contactCount) + ")");
        ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + companyCount + ")");


        if (((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked())
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (contactCount + companyCount) + "");
        else if (((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked())
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (contactCount) + ")");
        else if (((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (companyCount) + ")");
        } else if (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (favoriteCount) + ")");
        } else if (((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (importantCount) + ")");
        } else if (((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (finishedCount) + ")");
        } else if (((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (pauseCount) + ")");
        } else if (((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (crownCount) + ")");
        } else if (((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (vipCount) + ")");
        } else if (((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (sturtupCount) + ")");
        } else if (((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (investorCount) + ")");
        }


        //=======================

        ArrayList<Mark_> listOfMark = new ArrayList<>();

        Mark_ favL = new Mark_();
        favL.setLayout(Fav_L);
        favL.setCount(favoriteCount);

        Mark_ impL = new Mark_();
        impL.setLayout(Imp_L);
        impL.setCount(importantCount);

        Mark_ pauL = new Mark_();
        pauL.setLayout(Pause_L);
        pauL.setCount(pauseCount);

        Mark_ finL = new Mark_();
        finL.setLayout(Fin_L);
        finL.setCount(finishedCount);

        //==

        Mark_ croL = new Mark_();
        croL.setLayout(Crown_L);
        croL.setCount(crownCount);

        Mark_ vipL = new Mark_();
        vipL.setLayout(Vip_L);
        vipL.setCount(vipCount);

        Mark_ startupL = new Mark_();
        startupL.setLayout(Stur_L);
        startupL.setCount(sturtupCount);

        Mark_ invL = new Mark_();
        invL.setLayout(Invest_L);
        invL.setCount(investorCount);

        listOfMark.add(favL);
        listOfMark.add(impL);
        listOfMark.add(pauL);
        listOfMark.add(finL);

        listOfMark.add(croL);
        listOfMark.add(vipL);
        listOfMark.add(invL);
        listOfMark.add(startupL);


        //Collections.sort(listOfMark, (first, second) -> second.getCount() - first.getCount());

        if (linearLayoutMark == null) {

            linearLayoutMark = getActivity().findViewById(R.id.layout_mark_main);

            linearLayoutMark.removeAllViewsInLayout();

            for (Mark_ m : listOfMark) {

                linearLayoutMark.addView(m.getLayout());
            }

            linearLayoutMark.requestLayout();


        } else {
            linearLayoutMark.removeAllViewsInLayout();

            for (Mark_ m : listOfMark) {

                linearLayoutMark.addView(m.getLayout());
            }

            linearLayoutMark.requestLayout();
        }
        //=======================


        if (ContactsService.checkLoad) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (ContactsService.CONTACT_COUNT_OF_DELETE) + "");
        }


        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (!checkMain[0]) {

                    if (HASHTAG_ADAPTER.allHashtagsCheck && getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.GONE)
                        checkHashtagPopup(); //new



                    //  if (isChecked) {

                            /*if (listSize > serviceContactCount)
                                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("" + allCount + "");*/
                    ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_contacts_all_favorites));

                    contactAdapter.defaultListContacts();

                    checkAll();

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (ContactCacheService.getOnlyCompanySize() + ContactCacheService.getOnlyContacts()) + "");
                    ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (ContactCacheService.getOnlyCompanySize() + ContactCacheService.getOnlyContacts()) + "");

                }
                      /*  } else {
                            if (checkChecker()) {
                                contactAdapter.removeAllContacts();
                                uncheckAllFavorite();
                            }
                        }*/
            }
        });


//=====================================================old
           /*     companies.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        if (isChecked) {
                            contactAdapter.showCompanies();
                            if (checkChecker()) {
                                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                            }
                        } else {
                            contactAdapter.removeCompanies();
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        }
                    }
                });*/

        companies.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                companyClick(false);
            }
        });


        //==========================================old method
           /*     people.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        if (isChecked) {
                            contactAdapter.showContacts();

                            if (checkChecker()) {
                                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                            }
                        } else {
                            contactAdapter.removeContacts();
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        }
                    }
                });*/
        people.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickPeople(false);
            }
        });


        community.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkCommunity[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);

                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                    }
                }
            }
        });


        favorites.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkFFF[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addFavorites();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeFavorites();

                        checkFFF[0] = true;
                        favorites.setChecked(false);
                        checkFFF[0] = false;

                    }


                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });


        important.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkIII[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addImportant();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeImportant();

                        checkIII[0] = true;
                        important.setChecked(false);
                        checkIII[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        pause.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkPPP[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addPaused();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removePaused();

                        checkPPP[0] = true;
                        pause.setChecked(false);
                        checkPPP[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        finished.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkFFF2[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addFinished();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeFinished();

                        checkFFF2[0] = true;
                        finished.setChecked(false);
                        checkFFF2[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        crown.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkCCC[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addCrown();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeCrown();

                        checkCCC[0] = true;
                        crown.setChecked(false);
                        checkCCC[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        vip.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkVVV[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addVip();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeVip();

                        checkVVV[0] = true;
                        vip.setChecked(false);
                        checkVVV[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        startup.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkSSS[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addStartup();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeStartup();

                        checkSSS[0] = true;
                        startup.setChecked(false);
                        checkSSS[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        investor.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkIII2[0]) {
                    if (isChecked) {
                        if (checkChecker()) {
                            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                        } else {
                            contactAdapter.addInvestor();
                        }
                    } else {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                        contactAdapter.removeInvestor();

                        checkIII2[0] = true;
                        investor.setChecked(false);
                        checkIII2[0] = false;

                    }

                    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");

                    if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                        setKanbanMode();
                }
            }
        });

        companiesLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkHashtagPopup();

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.people_fav_check)).setChecked(false);
                //uncheckAllFavorite();

                ((CheckBox) getActivity().findViewById(R.id.community_fav_check)).setChecked(false);

                ((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).setChecked(false);
                ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).setChecked(false);
                ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).setChecked(false);
                ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).setChecked(false);

                ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).setChecked(false);
                ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).setChecked(false);
                ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).setChecked(false);
                ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).setChecked(false);

                unCheckC();

                /*((CheckBox) getActivity().findViewById(R.id.favorites_fav_check)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.important_fav_check)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.finished_fav_check)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.pause_fav_check)).setChecked(false);*/

                clearSocialPopup();
                companyClick(true);
                //  companies.setChecked(true);
                //  contactAdapter.showCompanies();

                //    ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("");

                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_companies));
            }
        });

        peopleLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkHashtagPopup();

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);

                uncheckAllFavorite();

                unCheckC();



                clickPeople(true);

                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_people));
            }
        });

        communityLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                community.setChecked(true);
                contactAdapter.clearListContacts();
                contactAdapter.clearListSort();
                getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_community));
            }
        });

        favoritesLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);

                uncheckAllFavorite();


                unCheckC();

                favorites.setChecked(true);


                contactAdapter.showFavorite();

                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/


                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                /*contactAdapter.clearListSort();
                contactAdapter.setListSaveSort();*/


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        importantLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                important.setChecked(true);

                contactAdapter.showImportant();


                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


            }
        });

        finishedLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                finished.setChecked(true);
                contactAdapter.showFinished();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        pauseLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                pause.setChecked(true);
                contactAdapter.showPaused();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        crownLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);


                uncheckAllFavorite();

                unCheckC();

                crown.setChecked(true);
                contactAdapter.showCrown();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        vipLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                vip.setChecked(true);
                contactAdapter.showVip();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        startupLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkC();
                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();
                unCheckC();
                startup.setChecked(true);
                contactAdapter.showStartup();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });

        investorLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                checkC();

                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                uncheckAllFavorite();

                unCheckC();

                investor.setChecked(true);
                contactAdapter.showInvestor();
                //contactAdapter.clearListSort();
               /* getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(0)");
                ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_star));*/

                if (mode == 2 && ((MainActivity) getActivity()).selectedFragment.getClass().equals(ContactsFragment.class))
                    setKanbanMode();


                //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);


            }
        });
    }

    private void checkC() {
        checkMain[0] = true;
        checkCommunity[0] = true;
        checkFFF[0] = true;
        checkIII[0] = true;
        checkPPP[0] = true;
        checkFFF2[0] = true;

        checkCCC[0] = true;
        checkVVV[0] = true;
        checkSSS[0] = true;
        checkIII2[0] = true;
    }

    private void unCheckC() {
        checkMain[0] = false;
        checkCommunity[0] = false;
        checkFFF[0] = false;
        checkIII[0] = false;
        checkPPP[0] = false;
        checkFFF2[0] = false;

        checkCCC[0] = false;
        checkVVV[0] = false;
        checkSSS[0] = false;
        checkIII2[0] = false;
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(UpdateMessengersPreview event) {

        updateMessengers(event.getContact());
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(CloseOtherPopups event) {
        closeOtherPopups();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(HideContactsProfile event) {
        if (profilePopUp != null) profilePopUp.setVisibility(View.GONE);
        if (fastEditPopup != null) fastEditPopup.setVisibility(View.GONE);
        if (companyProfilePopup != null) companyProfilePopup.setVisibility(View.GONE);
    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(PopupContact event) {
        Contact ct = ContactCacheService.getContactById(event.getId());
        if (ct.listOfContacts == null || ct.listOfContacts.isEmpty())
            showProfilePopUp(ct);
        else
            showCompanyPopup(ct);
        //updateMessengers(event.getContact());

    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(ContactLoadEvent event) {
        try {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    changeContactsList(event.getContactsList());

                }
            });
        } catch (NullPointerException e) {
            e.printStackTrace();
        }

    }

    ;


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(UpdateAfterSync event) {
        contactAdapter.savedContacts = ContactCacheService.getAllContacts(null);
        listOfContacts = contactAdapter.savedContacts;

        initContactsBar();
        initRecyclerHashTags();


    }

    ;


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(RemoveCompanyFromListAdapter event) {
        try {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    contactAdapter.removeContactByIdLong(event.getContact());

                    initContactsBar();
                    initRecyclerHashTags();
                    initFavoritesPop();

                    //      changeContactsList(event.getContact());
                }
            });
        } catch (NullPointerException e) {
            e.printStackTrace();
        }

    }

    ;


    //=============================new method
    public void companyClick(boolean click) {


        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.companies_fav_check);

        if (click) {
            if (checkBox.isChecked())
                checkBox.setChecked(true);
            else
                checkBox.setChecked(true);
        }
        if (checkBox.isChecked()) {
            if (click)
                contactAdapter.showCompanies();
            else
                contactAdapter.addCompanies();

            if (checkChecker()) {
                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
            }
        } else {
            contactAdapter.removeCompanies();
            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
        }

        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + contactAdapter.getListOfContacts().size() + ")");
    }

    //========================new method
    public void clickPeople(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.people_fav_check);
        contactAdapter.clearListSort();
        if (click) {
            if (checkBox.isChecked())
                checkBox.setChecked(false);
            else
                checkBox.setChecked(true);
        }
        if (checkBox.isChecked()) {
            if (click)
                contactAdapter.showContacts();
            else
                contactAdapter.addContacts();


            if (checkChecker()) {
                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
            }
        } else {
            contactAdapter.removeContacts();
            ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
        }

        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        contactAdapter.sortContacts();

        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("(" + (contactAdapter.getListOfContacts().size()) + ")");
    }


/*    //============================================================================================================================================ new method
    public void allContactClick(boolean click, int serviceContactCount, int companyCount, int listSize, int allCount){
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.all_fav_check);
        if(click){
                if(checkBox.isChecked())
                    checkBox.setChecked(false);
                else
                    checkBox.setChecked(true);

        }

        if (checkBox.isChecked()) {
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("" + (serviceContactCount + companyCount) + "");
            if (listSize > serviceContactCount)
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("" + allCount + "");
            ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_contacts_all_favorites));
            contactAdapter.defaultListContacts();
            checkAll();
        } else {
            if (checkChecker()) {
                contactAdapter.removeAllContacts();
                uncheckAllFavorite();
            }
        }
    }*/


    public void initRecyclerHashTags() {
        System.out.println("START HASHTAG");


        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (!checkChangeHash) {
                    if (isChecked) {

                        clearSocialPopup();
                        clearFavouritePopup();

                        quantityCheck = HASHTAG_ADAPTER.countAll;
                        HASHTAG_ADAPTER.quantityCheck = HASHTAG_ADAPTER.countAll;


                        HASHTAG_ADAPTER.setAllHashtagsCheck(true);
                        if (!mergedContacts) {
                            //    contactAdapter.defaultListContacts();

                            if (((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).isChecked()) {

                                contactAdapter.defaultListContacts();
                                contactAdapter.setListSaveSort();
                                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
                                ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(" " + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + "");
                            } else {

                                contactAdapter.getAllHashtag();
                                contactAdapter.notifyDataSetChanged();
                                contactAdapter.setListSaveSort();
                                ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("(" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + ")");
                            }

                        } else {
                            contactAdapter.selectedListContacts();
                            contactAdapter.setListSaveSort();
                        }
                        //   ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(" "+String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size())+"");
                        //    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                        //    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                        // }
                        //    ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(" "+quantityCheck+"");
                    } else {
                        if (!clicker) {
                            HASHTAG_ADAPTER.quantityCheck = 0;
                            quantityCheck = 0;
                            ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("(" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + ")");

                            //   if(clickMainCheck) {
                            HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                            contactAdapter.setListSaveSort();
                            if (!((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).isChecked()) {
                                contactAdapter.clearListContacts();
                                contactAdapter.setListSaveSort();
                            } else {
                                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                                int countNoTags = contactAdapter.getAllWithoutHashtag();
                                contactAdapter.setListSaveSort();
                                ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("(" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + ")");
                            }
                            //      }


                        } else
                            clicker = false;


                    }
                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                }
            }
        });


        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                boolean checkClick = ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).isChecked();
                onClickNoTags(false);

            }
        });

        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                boolean checkClick = ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).isChecked();
                onClickAllOnTagsMenu(checkClick);

            }
        });

        /*((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                if(b){
                    if(!mergedContacts) {
                        contactAdapter.clearListContacts();
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                     //   HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                        contactAdapter.getAllWithoutHashtag();
                     //   HashTagsAdapter.allHashtagsCheck = false;
                        HASHTAG_ADAPTER.allHashtagsCheck = false;
                        HASHTAG_ADAPTER.notifyDataSetChanged();

                    }
                    //   contactAdapter.clearListContacts();
                    //   ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                }else {
              //      if (clickMainCheck) {
                     //   HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                      //  ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                        contactAdapter.clearListContacts();
               //     }
                }
            }
        });*/


        getActivity().findViewById(R.id.hyperHashtagAll).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //    if(!((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).isChecked()) {
                       /* clickMainCheck = true;
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);*/
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);

                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                //       }
                    /*else {

                    }*/
            }
        });


        getActivity().findViewById(R.id.NoTagsLineName).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //    if(!((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).isChecked()) {
                  /*  clickMainCheck = true;
                    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                    onClickNoTags(false);*/
                ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(false);


                onClickNoTags(true);
                //     }
                /*else {

                }*/
            }
        });

        getActivity().findViewById(R.id.hyperHashtagAllConatcts).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // if(!((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).isChecked()) {
                   /* clickMainCheck = true;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                    onClickAllOnTagsMenu(false);*/
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
                onClickAllOnTagsMenu(true);
                getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                // }
               /* else {

                }*/
            }
        });

        getActivity().findViewById(R.id.hyperHashtagAllConatct).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);

                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
            }
        });


        getActivity().findViewById(R.id.allHashtagCheck).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        clickMainCheck = true;
                        if (((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).isChecked()) {
                            clickMainCheck = true;
                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                        } else {
                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                        }

                    }
                }

                return true;
            }
        });

        listOfUniqueHashtags = new ArrayList<>();
        mapOfQuantityHashtags = new HashMap<>();
        ArrayList<HashTagQuantity> listOfHashTagQuantity = new ArrayList<>();
        ArrayList<HashTagQuantity> listOfHashTagQuantitySearch = new ArrayList<>();


        SharedPreferences mPref = getContext().getSharedPreferences("HashtagSearch", Context.MODE_PRIVATE);
        //SharedPreferences.Editor editor = mPref.edit();

        ArrayList<HashSearchModel> listHash = new ArrayList<>();
        String str = mPref.getString("HashtagS", "");

        Gson gson = new Gson();

        if (!str.isEmpty()) {
            listHash.addAll(gson.fromJson(str, new TypeToken<ArrayList<HashSearchModel>>() {
            }.getType()));
        }

        //listHash.addAll(mPref.getStringSet("HashtagS", new LinkedHashSet<>()));



        int ccc = 0;
        boolean check_ccc = true;
        for (Contact contact : !mergedContacts ? contactAdapter.getSavedList() : contactAdapter.getSelectedContacts()) {
            if (contact != null && contact.getListOfHashtags() != null)
                try {
                    check_ccc = true;
                    for (HashTag hashtag : contact.getListOfHashtags()) {
                        if (hashtag.getHashTagValue().trim().compareTo("") == 0)
                            continue;
                        Integer count = mapOfQuantityHashtags.get(hashtag);
                        if (count != null) {
                            mapOfQuantityHashtags.put(hashtag, count + 1);
                            if (check_ccc) {
                                ccc++;
                                check_ccc = false;
                            }
                        } else {
                            mapOfQuantityHashtags.put(hashtag, 1);

                            if (check_ccc) {
                                ccc++;
                                check_ccc = false;
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR GET LIST = " + e.fillInStackTrace());
                }
        }
        for (HashTag hashTag : mapOfQuantityHashtags.keySet()) {
            listOfHashTagQuantity.add(new HashTagQuantity(hashTag, mapOfQuantityHashtags.get(hashTag)));

        }

        for (HashSearchModel ss : listHash) {

            for (HashTag hashTag : mapOfQuantityHashtags.keySet()) {
                if (ss.getHash().equalsIgnoreCase(hashTag.getHashTagValue())) {
                    listOfHashTagQuantitySearch.add(new HashTagQuantity(hashTag, mapOfQuantityHashtags.get(hashTag)));
                    break;
                }
            }

        }

        SharedPreferences mSettings;
        mSettings = getActivity().getSharedPreferences("HashtagModel", Context.MODE_PRIVATE);

        Set<String> hashBind = mSettings.getStringSet("Bind", null);
        Set<String> hashPin = mSettings.getStringSet("Pin", null);


        HASHTAG_ADAPTER = new HashTagsAdapter(mainView.getContext(), listOfHashTagQuantity, this, mainView, getActivity(), hashBind, hashPin, HASHTAG_SEARCH_ADAPTER);

        HASHTAG_SEARCH_ADAPTER = new HashTagSearchAdapter(mainView.getContext(), listOfHashTagQuantitySearch, getActivity(), HASHTAG_ADAPTER, this, hashBind, hashPin);

        int quantity = 0;
        for (HashTag hashtag : mapOfQuantityHashtags.keySet()) {
            quantity += Integer.valueOf(mapOfQuantityHashtags.get(hashtag));
        }
        hashTagPopup = (FrameLayout) mainView.getRootView().findViewById(R.id.hashtag_popup);


        int contactCount = ContactCacheService.getOnlyContacts();
        int companyCount = ContactCacheService.getOnlyCompanySize();
        int co = contactCount + companyCount;
        co -= ccc;
        ((TextView) getActivity().findViewById(R.id.NoTagsCount)).setText("(" + co + ")");

        ((TextView) getActivity().findViewById(R.id.all_hashtag_count)).setText("(" + listOfHashTagQuantity.size() + ")");
        ((TextView) getActivity().findViewById(R.id.all_hashtag_count_contacts)).setText("(" + ContactCacheService.getListConatctWithHashtagCount() + ")");
        HASHTAG_ADAPTER.setAllHashtagsCheck(true);


        if (!ContactsFragment.cherckFirstHash) {

            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
            ContactsFragment.cherckFirstHash = true;
        }

        HASHTAG_ADAPTER.notifyDataSetChanged();

        containerHashTags.setAdapter(HASHTAG_ADAPTER);
        containerHashTagsSearch.setAdapter(HASHTAG_SEARCH_ADAPTER);

        /*ontainerHashTagsSearch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().findViewById(R.id.popup_menu_hashtag).setVisibility(View.GONE);
            }
        });*/

        // ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(!mergedContacts ? " " + HASHTAG_ADAPTER.getListOfHashtags().size() + "" : " " + HASHTAG_ADAPTER.getListOfHashtags().size() + "");
        ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
    }

    public void onClickNoTags(boolean checkClick) {

        if (checkClick) {
            if (!mergedContacts) {
                clearSocialPopup();
                clearFavouritePopup();
                contactAdapter.clearListContacts();
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                int countNoTags = contactAdapter.getAllWithoutHashtag();
                contactAdapter.setListSaveSort();
                //     contactAdapter.addAllWithoutHashtag();

                //    ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(""+countNoTags+"");
                ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
                //   if(!((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).isChecked())
                HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                //HASHTAG_ADAPTER.allHashtagsCheck = false;
                HASHTAG_ADAPTER.hyperHashtag = "";

                //HASHTAG_ADAPTER.notifyDataSetChanged();

            }
        } else {
            if (((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).isChecked()) {
                if (((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).isChecked()) {
                    contactAdapter.defaultListContacts();
                    contactAdapter.setListSaveSort();
                    HASHTAG_ADAPTER.setAllHashtagsCheck(true);
                    HASHTAG_ADAPTER.allHashtagsCheck = true;

                    //HASHTAG_ADAPTER.notifyDataSetChanged();

                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
                    ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
                    //   contactAdapter.getAllHashtag();
                    //   contactAdapter.notifyDataSetChanged();
                } else
                    contactAdapter.getAllWithoutHashtag();
            } else {
                if (((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).isChecked()) {
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                    contactAdapter.removeNoTags();
                    contactAdapter.setListSaveSort();
                } else {
                    contactAdapter.clearListContacts();
                    contactAdapter.setListSaveSort();
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                    //      ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(" 0");

                }
            }
            //      if (clickMainCheck) {

            //   ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("0");
            //     }
        }
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }


    public void onClickAllOnTagsMenu(boolean checkClick) {

        if (checkClick) {
            if (!mergedContacts) {
                contactAdapter.clearListContacts();
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);

                contactAdapter.defaultListContacts();
                contactAdapter.setListSaveSort();
                HASHTAG_ADAPTER.allHashtagsCheck = true;
                HASHTAG_ADAPTER.notifyDataSetChanged();
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);


                ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
            }
        } else {
            //      if (clickMainCheck) {

            if (!HASHTAG_ADAPTER.allHashtagsCheck) {
                contactAdapter.clearListContacts();
                contactAdapter.setListSaveSort();
            } else if (HASHTAG_ADAPTER.allHashtagsCheck) {
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);

            }

            //   ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("0");
            ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
            //     }
        }

    }


    private void setCountOnBarNEW(TypeCount count) {

        int serviceContactCount = contactsService.getContactsCt();
        try {
            new Thread(new Runnable() {
                @Override
                public void run() {

                    int contactCount = ContactCacheService.getOnlyContacts();
                    int companyCount = ContactCacheService.getOnlyCompanySize();
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (!ContactsService.checkLoad) {
                                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (contactCount + companyCount) + "");
                                ((TextView) getActivity().findViewById(R.id.call2mecloud_count)).setText("(" + (contactCount + companyCount) + ")");
                                ((TextView) getActivity().findViewById(R.id.popupContactsAll)).setText(" " + (contactCount + companyCount) + "");
                                count.setCall2meCt((serviceContactCount + companyCount));
                                ((TextView) getActivity().findViewById(R.id.popupContactsTelegram)).setText("(" + count.getTelegramCt() + ")");
                                ((TextView) getActivity().findViewById(R.id.popupContactsWhatsApp)).setText("(" + count.getWhatsCt() + ")");
                                //((TextView) getActivity().findViewById(R.id.popupContactsViber)).setText("(" + count.getViberCt() + ")");
                                ((TextView) getActivity().findViewById(R.id.popupContactsGoogle)).setText("(" + count.getGoogleCt() + ")");

                                //((TextView) getActivity().findViewById(R.id.popupContactsSamsung)).setText("(" + count.getSamsungCloudCt() + ")");

                                ((TextView) getActivity().findViewById(R.id.popupContactsSmartphone)).setText("(" + count.getPhoneCt() + ")");

                                ((TextView) getActivity().findViewById(R.id.popupContactsFacebook)).setText("(" + count.getFacebookCt() + ")");
                                ((TextView) getActivity().findViewById(R.id.popupContactslinkedin)).setText("(" + count.getLinkedinCt() + ")");
                                ((TextView) getActivity().findViewById(R.id.popupContactsInstagram)).setText("(" + count.getInstagramCt() + ")");

                                //((TextView) getActivity().findViewById(R.id.popupContactsSkype)).setText("(" + count.getSkypeCt() + ")");
                                setListenersToContactsPopup(count);
                            } else {
                                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (ContactsService.CONTACT_COUNT_OF_DELETE) + "");
                                // ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (ContactsService.CONTACT_COUNT_OF_DELETE) + "");
                            }
                        }
                    });
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setCountOnBar(TypeCount count) {

        int serviceContactCount = contactsService.getContactsCt();

        try {
            new Thread(new Runnable() {
                @Override
                public void run() {

                    int contactCount = ContactCacheService.getOnlyContacts();
                    int companyCount = ContactCacheService.getOnlyCompanySize();


                    try {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (contactCount + companyCount) + "");
                                    ((TextView) getActivity().findViewById(R.id.call2mecloud_count)).setText("(" + (contactCount + companyCount) + ")");

                                    if (((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked())
                                        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (contactCount + companyCount) + "");
                                    else if (((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked())
                                        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (contactCount) + "");
                                    else if (((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked()) {
                                        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (companyCount) + "");
                                    }

                                    ((TextView) getActivity().findViewById(R.id.popupContactsAll)).setText(" " + (contactCount + companyCount) + "");

                                    ((TextView) getActivity().findViewById(R.id.all_hashtag_countContacts)).setText(" " + (contactCount + companyCount) + "");
                                    ((TextView) getActivity().findViewById(R.id.all_hashtag_count_contacts)).setText("(" + ContactCacheService.getListConatctWithHashtagCount() + ")");
                                    ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + (contactCount + companyCount) + "");
                                    ((TextView) getActivity().findViewById(R.id.people_fav)).setText("(" + (contactCount) + ")");

                                    ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + (companyCount) + ")");
                                    //     ((TextView) getActivity().findViewById(R.id.people_fav)).setText("(" + (contactCount) + ")");


                                    count.setCall2meCt((serviceContactCount + companyCount));
                                    ((TextView) getActivity().findViewById(R.id.popupContactsTelegram)).setText("(" + count.getTelegramCt() + ")");
                                    ((TextView) getActivity().findViewById(R.id.popupContactsWhatsApp)).setText("(" + count.getWhatsCt() + ")");
                                    //((TextView) getActivity().findViewById(R.id.popupContactsViber)).setText("(" + count.getViberCt() + ")");
                                    ((TextView) getActivity().findViewById(R.id.popupContactsGoogle)).setText("(" + count.getGoogleCt() + ")");
                                    //((TextView) getActivity().findViewById(R.id.popupContactsSamsung)).setText("(" + count.getSamsungCloudCt() + ")");
                                    ((TextView) getActivity().findViewById(R.id.popupContactsSmartphone)).setText("(" + count.getPhoneCt() + ")");

                                    ((TextView) getActivity().findViewById(R.id.popupContactsFacebook)).setText("(" + count.getFacebookCt() + ")");
                                    ((TextView) getActivity().findViewById(R.id.popupContactslinkedin)).setText("(" + count.getLinkedinCt() + ")");
                                    ((TextView) getActivity().findViewById(R.id.popupContactsInstagram)).setText("(" + count.getInstagramCt() + ")");

                                    //((TextView) getActivity().findViewById(R.id.popupContactsSkype)).setText("(" + count.getSkypeCt() + ")");
                                    setListenersToContactsPopup(count);

                                } catch (NullPointerException e) {
                                    e.printStackTrace();
                                }
                            }
                        });

                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    }

                }
            }).start();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showSuggestPopup(View parentView, Contact contact) {
        FrameLayout suggestPopup = (FrameLayout) getActivity().findViewById(R.id.suggestPopup);
        String[] suggest = {"#timesoftware", "#another", "#goodboy", "#smile"};
        List<String> suggestTags = Arrays.asList(suggest);

        HashtagMasstaggingAdapter suggestTagsAdapter = new HashtagMasstaggingAdapter(suggestTags, this, true, contact);
        RecyclerView containerSuggest = (RecyclerView) suggestPopup.findViewById(R.id.container_assistans_tags);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerSuggest.setLayoutManager(mLayoutManager);
        containerSuggest.setItemAnimator(new DefaultItemAnimator());
        containerSuggest.setAdapter(suggestTagsAdapter);


        String[] most = {"#pr", "#investor", "#VC", "#Media", "#PR"};
        List<String> mostUsed = Arrays.asList(most);
        HashtagMasstaggingAdapter mostTagAdapter = new HashtagMasstaggingAdapter(mostUsed, this, true, contact);
        RecyclerView containerMost = (RecyclerView) suggestPopup.findViewById(R.id.container_mostused_tags);
        RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerMost.setLayoutManager(mostLayoutManager);
        containerMost.setItemAnimator(new DefaultItemAnimator());
        containerMost.setAdapter(mostTagAdapter);
        openedViews.add(suggestPopup);
        suggestPopup.setVisibility(View.VISIBLE);
    }

    public void addNewTagToContact(String tag, Contact contact) {
        for (HashTag hashTag : contact.getListOfHashtags()) {
            if (hashTag.getHashTagValue().compareTo(tag) == 0) {
                Toast toast = Toast.makeText(mainView.getContext(), "Hashtag already  exist", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }
        }


        if (popupUserHashtags.findViewById(R.id.ContactHashLinear).getVisibility() == View.VISIBLE) {


            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                    getActivity());
            alertDialogBuilder.setTitle("Do you want to add " + tag + " ?");
            alertDialogBuilder
                    .setCancelable(false)
                    .setPositiveButton("Yes", (dialog, id) -> {
                        customTagsAdapter.addHashTag(tag);


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        contact.getListOfHashtags().add(new HashTag(tag.trim()));
                        realm.commitTransaction();
                        realm.close();

                        ContactCacheService.updateContact(contact, mainView.getContext());

                        //if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                        //contactsService.addNoteToContact(contact.getIdContact(), tag.trim());

                        contactsService.addNoteToContact(contact.getIdContact(), tag, contact.getName());

                  /*  ArrayList<String> listEdit = new ArrayList<>();
                    ArrayList<Boolean> listEditBool = new ArrayList<>();
                    listEdit.add(contact.getName());
                    if(contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                        listEditBool.add(true);
                    else
                        listEditBool.add(false);

                    MainActivity.listToManyUpdateFile.add("EDIT");
                    MainActivity.listToManyUpdateFile.add(listEdit);
                    MainActivity.listToManyUpdateFile.add(listEditBool);*/

                        if (popupUserHashtags.findViewById(R.id.ContactHashLinear).getVisibility() == View.VISIBLE) {

                            ArrayList<String> tags = new ArrayList<>();

                            for (HashTag hashTag : contact.getListOfHashtags()) {

                                tags.add(hashTag.getHashTagValue());
                            }


                            /*TextView textView = new TextView(getActivity());
                            textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                            textView.setLayoutParams(new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                            textView.setTextColor(getResources().getColor(R.color.colorPrimary));
                            textView.setText("");

                            for (String tagg : tags)
                                textView.append(tagg.trim() + " ");*/

                            LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
                            linearLayout.removeAllViews();


                            for (HashTag hashTag : contact.getListOfHashtags()) {
                                TextView text = new TextView(getActivity());
                                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                                text.setLayoutParams(new LinearLayout.LayoutParams(
                                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                                text.setText(hashTag.getHashTagValue() + " ");
                                text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                                text.setOnLongClickListener(new View.OnLongClickListener() {
                                    @Override
                                    public boolean onLongClick(View v) {
                                        deleteHashTagsFromUser(text.getText().toString(), contact);
                                        return true;
                                    }
                                });
                                linearLayout.addView(text);
                            }

                            //linearLayout.addView(textView);

                            HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
                            if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                            scrollView.addView(linearLayout);
                            scrollView.setSmoothScrollingEnabled(false);
                            scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                            scrollView.setSmoothScrollingEnabled(true);

                       /* popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
                        popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
                        EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                        editText.setVisibility(View.GONE);*/
                        } else {
                            ((EditText) popupUserHashtags.findViewById(R.id.hashtagsList)).append(tag.trim() + " ");
                        }


                        //EventBus.getDefault().post(new UpdateFile());
                        Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                        initRecyclerHashTags();

                        ArrayList<HashTagQuantity> listH = new ArrayList<>();
                        listH.addAll(HASHTAG_ADAPTER.getListOfHashtags());
                        Collections.sort(listH, new Comparator<HashTagQuantity>() {
                            @Override
                            public int compare(HashTagQuantity first, HashTagQuantity second) {
                                return second.getQuantity() - first.getQuantity();
                            }
                        });

                        mostTagAdapter.setNewHashtags(listH);
                        addHashtagPreview(tag, contact);
                    })
                    .setNegativeButton("No", (dialog, id) -> dialog.cancel());

            AlertDialog alertDialog = alertDialogBuilder.create();
            alertDialog.show();

        } else
            ((EditText) popupUserHashtags.findViewById(R.id.hashtagsList)).append(tag.trim() + " ");

    }

    public void checkByHashTag(String hashtag) {
        HASHTAG_ADAPTER.checkByHashTag(hashtag);
    }

    private void addHashtagPreview(String hashtag, Contact contact) {
        if (companyProfilePopup == null) {
            profilePopUp = (FrameLayout) mainView.getRootView().findViewById(R.id.profile_popup);
            LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);


            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashtag + " ");
            text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    contactAdapter.searchByHashTagValue(hashtag);
                }
            });
            text.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View view) {
                    deleteHashTagsFromUser(hashtag, contact);
                    return false;
                }
            });

            //  text.setOnClickListener(v -> );
            if (((TextView) containerHashTags.getChildAt(0)) != null)
                if (((TextView) containerHashTags.getChildAt(0)).getText().toString().compareTo("hashtags") == 0)
                    containerHashTags.removeViewAt(0);
            containerHashTags.addView(text);
        } else {
            companyProfilePopup = (FrameLayout) mainView.getRootView().findViewById(R.id.company_popup);
            LinearLayout containerHashTags = (LinearLayout) companyProfilePopup.findViewById(R.id.containerHashTags);
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashtag + " ");
            text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    contactAdapter.searchByHashTagValue(hashtag);
                }
            });

            text.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View view) {
                    deleteHashTagsFromUser(hashtag, contact);
                    return false;
                }
            });

            //      text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashtag));
            if (((TextView) containerHashTags.getChildAt(0)) != null)
                if (((TextView) containerHashTags.getChildAt(0)).getText().toString().compareTo("hashtags") == 0)
                    containerHashTags.removeViewAt(0);
            containerHashTags.addView(text);
        }
    }

    public void deleteHashTagsFromUser(String hashtag, Contact contact) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                getActivity());
        alertDialogBuilder.setTitle("Do you want to delete " + hashtag + " ?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {

                    Realm realm = Realm.getDefaultInstance(); //-

                    RealmList<HashTag> listOfHashtags = contact.getListOfHashtags();

                    if (contact.getListOfHashtags() != null)
                        for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                            contactsService.deleteNoteContact(contact.getIdContact(), contact.getListOfHashtags().get(i).getHashTagValue());
                        }

                    for (int indexI = 0; indexI < listOfHashtags.size(); indexI++) {


                        if (listOfHashtags.get(indexI).getHashTagValue().equals(hashtag.trim())) {


                            realm.beginTransaction();

                            listOfHashtags.remove(indexI);

                            realm.commitTransaction();
                        }
                    }
                    for (HashTag hashTag1 : contact.getListOfHashtags()) {
                        contactsService.addNoteToContact(contact.getIdContact(), hashTag1.getHashTagValue(), contact.getName());
                    }

                    realm.beginTransaction();
                    contact.setListOfHashtags(listOfHashtags);
                    contact.getListOfHashtags().remove(new HashTag(hashtag));
                    realm.commitTransaction();

                    realm.close();


                    ContactCacheService.updateContact(contact, mainView.getContext());


                    //EventBus.getDefault().post(new UpdateFile());
                    initRecyclerHashTags();


                    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                        showProfilePopUp(contact);
                        //      customTagsAdapter.removeHashtag(hashtag);
                    } else
                        showCompanyPopup(contact);

                    if (popupUserHashtags != null && popupUserHashtags.findViewById(R.id.ContactHashLinear).getVisibility() == View.VISIBLE) {
                        showPopupUserHashtags(contact);
                    }


                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }


    @Override
    public void updatedUserHashtags(ArrayList<String> updatedHashtags) {


        Realm realm = Realm.getDefaultInstance(); //-
        realm.beginTransaction();

        RealmList<HashTag> listOfHashtag = new RealmList<>();
        ArrayList<String> listForAdapter = new ArrayList<>();

        if (selectedContactPopup.getListOfHashtags() != null)
            for (int i = 0; i < selectedContactPopup.getListOfHashtags().size(); i++) {
                contactsService.deleteNoteContact(selectedContactPopup.getIdContact(), selectedContactPopup.getListOfHashtags().get(i).getHashTagValue());
            }

        for (int indexI = 0; indexI < updatedHashtags.size(); indexI++) {
            String hashtag = updatedHashtags.get(indexI);
            if (!listOfHashtag.contains(new HashTag(hashtag)) && hashtag.trim().toString().length() > 0) {
                HashTag hashTag = realm.createObject(HashTag.class);
                hashTag.setHashTagValue(hashtag);
                contactsService.addNoteToContact(selectedContactPopup.getIdContact(), hashtag, selectedContactPopup.getName());
                listOfHashtag.add(hashTag);
                listForAdapter.add(hashtag);
            }
        }
        selectedContactPopup.setListOfHashtags(listOfHashtag);
        realm.commitTransaction();
        realm.close();

        ContactCacheService.updateContact(selectedContactPopup, mainView.getContext());
        initRecyclerHashTags();
        contactAdapter.notifyDataSetChanged();
        setNewTagsForProfilePopup(listOfHashtag);
        customTagsAdapter.setNewContacts(listForAdapter);

        //EventBus.getDefault().post(new UpdateFile());
    }

    public Contact getSelectedConatct() {
        return selectedContactPopup;
    }


    private void showPositionAddPopup(Contact contact, @Nullable String company, Boolean update) {
        if (socialPopup != null)
            if (socialPopup.getVisibility() == View.VISIBLE)
                socialPopup.setVisibility(View.GONE);
        if (popupUserHashtags != null)
            if (popupUserHashtags.getVisibility() == View.VISIBLE)
                popupUserHashtags.setVisibility(View.GONE);


        companySelectPopup = (FrameLayout) getActivity().findViewById(R.id.positionAddPopup);
        ((ImageView) companySelectPopup.findViewById(R.id.updateCompany)).setImageDrawable(getResources().getDrawable(R.drawable.icn_saving_pig));
        companySelectPopup.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText("");

        if (company != null)
            ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText(company);
        companySelectPopup.findViewById(R.id.companyName).setFocusable(true);
        companySelectPopup.findViewById(R.id.companyName).setFocusableInTouchMode(true);
        companySelectPopup.findViewById(R.id.companyName).setClickable(true);

        if (update) {
            companySelectPopup.findViewById(R.id.companyName).setFocusable(false);
            companySelectPopup.findViewById(R.id.companyName).setFocusableInTouchMode(false);
            companySelectPopup.findViewById(R.id.companyName).setClickable(false);
            ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText(company);
            ((ImageView) companySelectPopup.findViewById(R.id.updateCompany)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
            companySelectPopup.findViewById(R.id.updateCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    showPositionAddPopup(contact, company, false);
                }
            });
        } else {
            companySelectPopup.findViewById(R.id.updateCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    String companyName = ((EditText) companySelectPopup.findViewById(R.id.companyName)).getText().toString();


                    Realm realm = Realm.getDefaultInstance(); //-
                    realm.beginTransaction();
                    contact.setCompanyPossition(companyName.trim());
                    realm.commitTransaction();
                    realm.close();
                    ContactCacheService.updateContact(contact, mainView.getContext());

                    String mainCompany = contact.getCompany();
                    String oldPosition = contact.getCompanyPossition();
                    //String ContactId = contactsService.getIdContactByName(contact.getName());
                    //   contactsService.addCompanyPossitionToContact(contact.getIdContact(), contact.getCompanyPossition());


                    /*if(mainCompany != null && mainCompany != "")
                        contactsService.addComp(contact.getIdContact(),contact.getCompanyPossition(), mainCompany );
                    else
                        contactsService.insertPosition(contact.getIdContact(), contact.getCompanyPossition());*/


                    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {

                        contactsService.deleteCompany_Possition(contact.getIdContact());
                        if (contact.getCompany() != null && !contact.getCompany().isEmpty())
                            contactsService.insertCompany(contact.getIdContact(), contact.getCompany(), contact.getName());

                        if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() != null && !contact.getCompany().isEmpty()))
                            contactsService.addComp(contact.getIdContact(), contact.getCompanyPossition(), contact.getCompany());

                        if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() == null || contact.getCompany().isEmpty()))
                            contactsService.insertPosition(contact.getIdContact(), contact.getCompanyPossition(), contact.getName());

                    }


             /*       MainActivity.listToManyUpdateFile.clear();
                    ArrayList<String> listEdit = new ArrayList<>();
                    ArrayList<Boolean> listEditBool = new ArrayList<>();
                    listEdit.add(contact.getName());
                    listEditBool.add(true);

                    MainActivity.listToManyUpdateFile.add("EDIT");
                    MainActivity.listToManyUpdateFile.add(listEdit);
                    MainActivity.listToManyUpdateFile.add(listEditBool);*/

                    //EventBus.getDefault().post(new UpdateFile());
                    if (companyName.length() == 0) {
                        showPositionAddPopup(contact, "", true);
                        ((TextView) profilePopUp.findViewById(R.id.company)).setText("");
                    } else {
                        showPositionAddPopup(contact, companyName, true);
                        ((TextView) profilePopUp.findViewById(R.id.company)).setText(companyName);
                    }

                }
            });
        }

        companySelectPopup.setVisibility(View.VISIBLE);
        ArrayList<String> listOfPositions = ContactCacheService.getPossitionContacts();

        SelectPositionAdapter selectPositionAdapter = new SelectPositionAdapter(listOfPositions, ((EditText) companySelectPopup.findViewById(R.id.companyName)));
        RecyclerView containerCompanies = (RecyclerView) companySelectPopup.findViewById(R.id.companiesContainer);
        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 2);
        containerCompanies.setLayoutManager(mostLayoutManager);
        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectPositionAdapter);

        openedViews.add(companySelectPopup);

    }

    private void showCompanyAddPopup(Contact contact, @Nullable String company, Boolean update) {

        if (socialPopup != null)
            if (socialPopup.getVisibility() == View.VISIBLE)
                socialPopup.setVisibility(View.GONE);
        if (popupUserHashtags != null)
            if (popupUserHashtags.getVisibility() == View.VISIBLE)
                popupUserHashtags.setVisibility(View.GONE);

        companySelectPopup = (FrameLayout) getActivity().findViewById(R.id.companyAddPopup);
        ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText("");
        companySelectPopup.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

        ((ImageView) companySelectPopup.findViewById(R.id.updateCompany)).setImageDrawable(getResources().getDrawable(R.drawable.icn_saving_pig));

        if (company != null)
            ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText(company);
        companySelectPopup.findViewById(R.id.companyName).setFocusable(true);
        companySelectPopup.findViewById(R.id.companyName).setFocusableInTouchMode(true);
        companySelectPopup.findViewById(R.id.companyName).setClickable(true);


        if (update) {
            companySelectPopup.findViewById(R.id.companyName).setFocusable(false);
            companySelectPopup.findViewById(R.id.companyName).setFocusableInTouchMode(false);
            companySelectPopup.findViewById(R.id.companyName).setClickable(false);
            ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText(company);
            ((ImageView) companySelectPopup.findViewById(R.id.updateCompany)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
            companySelectPopup.findViewById(R.id.updateCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    showCompanyAddPopup(contact, company, false);
                }
            });

        } else {

            companySelectPopup.findViewById(R.id.updateCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    String companyName = ((EditText) companySelectPopup.findViewById(R.id.companyName)).getText().toString();


                    Realm realm = Realm.getDefaultInstance(); //-

                    String oldCompany = contact.getCompany();
                    String oldPos = contact.getCompanyPossition();


                    if (companyName.trim().length() > 0) {
                        int nameHash = companyName.hashCode();
                        realm.beginTransaction();
                        contact.setCompany(companyName.trim());
                        realm.commitTransaction();
                        boolean found = false;

                        for (Contact searchCompanyContact : ContactCacheService.getCompanies()) {
                            if (searchCompanyContact.getName().trim().compareTo(companyName.trim()) == 0) {
                                realm.beginTransaction();

                                // contactAdapter.removeContact(searchCompanyContact);
                                contactAdapter.removeContactById(searchCompanyContact);
                                removeContactById(searchCompanyContact);

                                if (!searchCompanyContact.listOfContacts.contains(contact))
                                    searchCompanyContact.listOfContacts.add(contact);

                                listOfContacts.add(searchCompanyContact);
                                contactAdapter.savedContacts.add(searchCompanyContact);
                                contactAdapter.addToList(searchCompanyContact);

                                realm.commitTransaction();
                                ContactCacheService.updateCompany(searchCompanyContact);
                                found = true;

                                /*ArrayList<String> lsitCont = new ArrayList<>();
                                ArrayList<Boolean> lsitType = new ArrayList<>();
                                lsitCont.add(searchCompanyContact.getName());
                                lsitType.add(false);
                                MainActivity.listToManyUpdateFile.add("EDIT");
                                MainActivity.listToManyUpdateFile.add(lsitCont);
                                MainActivity.listToManyUpdateFile.add(lsitType);*/

                            }
                        }

                        if (!found) {
                            Date date = new Date();
                            Calendar cal = Calendar.getInstance();
                            cal.setTime(date);
                            Time time = getRandomDate();
                            time.setHours(cal.get(Calendar.HOUR_OF_DAY));
                            time.setMinutes(cal.get(Calendar.MINUTE));
                            time.setSeconds(cal.get(Calendar.SECOND));

                            Contact companyContact = new Contact(date);
                            companyContact.setName(companyName.trim());
                            //    companyContact.time = getRandomDate();
                            companyContact.time = time.toString();

                            companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                            companyContact.listOfContacts = new RealmList<Contact>();
                            companyContact.listOfContacts.add(contact);
                            ContactCacheService.updateCompany(companyContact);
                            companyContact = ContactCacheService.getCompany(companyContact.getName());
                            listOfContacts.add(companyContact);
                            contactAdapter.savedContacts.add(companyContact);
                            contactAdapter.addToList(companyContact);
                            contactAdapter.addContactToSaved2(companyContact);
                            //   ContactsFragment.listOfContacts.add(companyContact);


                            //

                            ArrayList<String> lsitCont = new ArrayList<>();
                            ArrayList<Boolean> lsitType = new ArrayList<>();
                            lsitCont.add(companyContact.getName());
                            lsitType.add(false);
                            MainActivity.listToManyUpdateFile.add("ADD");
                            MainActivity.listToManyUpdateFile.add(lsitCont);
                            MainActivity.listToManyUpdateFile.add(lsitType);


                        }
                        contactAdapter.sortContacts();
                        //   contactAdapter.notifyDataSetChanged();
                        //   realm.commitTransaction();
                        //        ContactCacheService.updateCacheContacts(listOfContacts, mainView.getContext());

                        //                 contactAdapter.savedContacts = ContactCacheService.getAllContacts(mainView.getContext());
                        // contactAdapter.savedContacts = listOfContacts;

                        int companyCount = ContactCacheService.getOnlyCompanySize();
                        ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + companyCount + ")");

                        //      int listSize = listOfContacts.size();

                        //   int serviceContactCount = contactsService.getContactsCt();

                        //    int contactCount = contactAdapter.getContactCount();
                        System.out.println("M 3");
                        int contactCount = ContactCacheService.getOnlyContacts();

                        int allCount = contactCount + companyCount;
                        //System.out.println("contactCount = "+contactCount);
                        //System.out.println("companyCount = "+companyCount);

                        ((TextView) getActivity().findViewById(R.id.all_hashtag_countContacts)).setText(" " + allCount + "");
                        ((TextView) getActivity().findViewById(R.id.all_hashtag_count_contacts)).setText("(" + ContactCacheService.getListConatctWithHashtagCount() + ")");
                        ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + allCount + "");
                        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + allCount + "");
                        ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + allCount + "");
                        System.out.println("LOAD b");

                        if (companyName.length() == 0) {
                            showCompanyAddPopup(contact, "", true);
                            ((TextView) profilePopUp.findViewById(R.id.company_title)).setText("");
                        } else {
                            showCompanyAddPopup(contact, companyName, true);
                            ((TextView) profilePopUp.findViewById(R.id.company_title)).setText(companyName);
                        }

                        ArrayList<String> lsitCont = new ArrayList<>();
                        ArrayList<Boolean> lsitType = new ArrayList<>();
                        lsitCont.add(contact.getName());
                        lsitType.add(true);
                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(lsitCont);
                        MainActivity.listToManyUpdateFile.add(lsitType);

                        //EventBus.getDefault().post(new UpdateFile());


                      /* if(oldCompany == null && oldPos != null && oldPos != "")
                            contactsService.addCompanybyPosition(contact.getIdContact(), oldPos, companyName);
                        else
                            contactsService.addCompanyToContact(contact.getIdContact(), companyName);*/

                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {

                            contactsService.deleteCompany_Possition(contact.getIdContact());

                            if (contact.getCompany() != null && !contact.getCompany().isEmpty())
                                contactsService.insertCompany(contact.getIdContact(), contact.getCompany(), contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() != null && !contact.getCompany().isEmpty()))
                                contactsService.addComp(contact.getIdContact(), contact.getCompanyPossition(), contact.getCompany());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() == null || contact.getCompany().isEmpty()))
                                contactsService.insertPosition(contact.getIdContact(), contact.getCompanyPossition(), contact.getName());


                        }


                        //   contactsService.updateCompany(contact.getIdContact(),"", contact.getCompany());


                    } else {
                        Toast toast = Toast.makeText(mainView.getContext(), "РќР°Р·РІР°РЅРёРµ РєРѕРјРїР°РЅРёРё РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РїСѓСЃС‚С‹Рј", Toast.LENGTH_LONG);
                        toast.show();
                    }

                    realm.close();
                }
            });
        }

        companySelectPopup.setVisibility(View.VISIBLE);
        SelectCompanyAdapter selectCompanyAdapter = new SelectCompanyAdapter(contactAdapter.getListOfCompanies(), this);
        RecyclerView containerCompanies = (RecyclerView) companySelectPopup.findViewById(R.id.companiesContainer);
        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 2);
        containerCompanies.setLayoutManager(mostLayoutManager);
        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectCompanyAdapter);
        openedViews.add(companySelectPopup);

    }

    public void removeContactById(Contact contact) {
        System.out.println("AIZE LIST = " + listOfContacts.size());
        for (int i = 0; i < listOfContacts.size(); i++) {
            if (listOfContacts.get(i).getId() == contact.getId()) {
                listOfContacts.remove(i);
            }
        }
        System.out.println("AIZE LIST = " + listOfContacts.size());

    }

    private Time getRandomDate() {
        final Random random = new Random();
        final int millisInDay = 24 * 60 * 60 * 1000;
        return new Time((long) random.nextInt(millisInDay));
    }

    private void penStartEditMode(Contact contact) {
        popupUserHashtags.findViewById(R.id.penEdit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_saving_pig));
                customTagsAdapter.startEditMode();

                popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.GONE);
                popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.VISIBLE);
                EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                editText.setSelection(0);
                editText.setVisibility(View.VISIBLE);
                editText.setText("");
                for (String str : customTagsAdapter.listOfHashtags)
                    editText.append(str + " ");


                penEndEditMode(contact);
            }
        });
    }

    private void penEndEditMode(Contact contact) {
        popupUserHashtags.findViewById(R.id.penEdit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
                customTagsAdapter.stopEditMode();

                EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                String s = editText.getText().toString().trim();
                magicSplit = s.split(" ");

                String findStr = s.toString();

                ArrayList<String> listHash = new ArrayList<>();
                if (magicSplit.length > 0) {
                    findStr = magicSplit[magicSplit.length - 1];

                    for (int i = 0; i < magicSplit.length; i++) {
                        if (magicSplit[i].length() > 1 && magicSplit[i].charAt(0) == '#')
                            listHash.add(magicSplit[i]);
                    }


                }
                System.out.println("HASHTAGS LENG = " + magicSplit.toString());


                updatedUserHashtags(listHash);

                popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
                popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
                EditText editText2 = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                editText2.setVisibility(View.GONE);

                ArrayList<String> tags = new ArrayList<>();

                for (HashTag hashTag : contact.getListOfHashtags()) {

                    tags.add(hashTag.getHashTagValue());
                }


               /* TextView textView = new TextView(getActivity());
                textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                textView.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                textView.setTextColor(getResources().getColor(R.color.colorPrimary));
                textView.setText("");

                for (String tag : tags)
                    textView.append(tag.trim() + " ");*/

                LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
                linearLayout.removeAllViews();

                for (HashTag hashTag : contact.getListOfHashtags()) {
                    TextView text = new TextView(getActivity());
                    text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                    DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                    text.setLayoutParams(new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                    text.setTextColor(getResources().getColor(R.color.colorPrimary));
                    text.setText(hashTag.getHashTagValue() + " ");
                    text.setOnClickListener(v2 -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                    text.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {
                            deleteHashTagsFromUser(text.getText().toString(), contact);
                            return true;
                        }
                    });
                    linearLayout.addView(text);
                }

                //linearLayout.addView(textView);

                HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
                if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                scrollView.addView(linearLayout);
                scrollView.setSmoothScrollingEnabled(false);
                scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                scrollView.setSmoothScrollingEnabled(true);


                penStartEditMode(contact);
            }
        });
    }

    private void showPopupUserHashtags(Contact contact) {
        popupUserHashtags = (FrameLayout) getActivity().findViewById(R.id.popupProfileHashtags);
        popupUserHashtags.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });


        int nowCount = 0;

        ArrayList<String> tags = new ArrayList<>();

        for (HashTag hashTag : contact.getListOfHashtags()) {

            tags.add(hashTag.getHashTagValue());
        }


        /*TextView textView = new TextView(getActivity());
        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
        DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
        textView.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        textView.setTextColor(getResources().getColor(R.color.colorPrimary));
        textView.setText("");

        for (String tag : tags)
            textView.append(tag.trim() + " ");*/

        LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
        linearLayout.removeAllViews();

        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
            text.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    deleteHashTagsFromUser(text.getText().toString(), contact);
                    return true;
                }
            });
            linearLayout.addView(text);
        }


        //linearLayout.addView(textView);

        HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
        scrollView.addView(linearLayout);
        scrollView.setSmoothScrollingEnabled(false);
        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
        scrollView.setSmoothScrollingEnabled(true);

        popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
        popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
        EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
        editText.setVisibility(View.GONE);

        //=========================

        popupUserHashtags.findViewById(R.id.inviteFriend).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent shareIntent = new Intent(Intent.ACTION_SEND);
                shareIntent.setType("text/plain");
                String friends = "";

                for (HashTag hashtag : contact.getListOfHashtags()) {
                    friends = friends + " " + hashtag.getHashTagValue();
                }

                shareIntent.putExtra(Intent.EXTRA_TEXT, "Join call2me community - i add to your card following tags: " + friends);
                startActivity(Intent.createChooser(shareIntent, "РџРѕРґРµР»РёС‚СЊСЃСЏ РєРѕРЅС‚Р°РєС‚РѕРј"));
            }
        });

        customTagsAdapter = new CustomTagsAdapter(tags, contact, this);
        RecyclerView customTagsContainer = (RecyclerView) popupUserHashtags.findViewById(R.id.customTagsContainer);
        RecyclerView.LayoutManager customLR = new LinearLayoutManager(mainView.getContext());
        customTagsContainer.setLayoutManager(customLR);
        customTagsContainer.setItemAnimator(new DefaultItemAnimator());
        customTagsContainer.setAdapter(customTagsAdapter);

        penStartEditMode(contact);
        ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
        String[] suggest = {"#timesoftware", "#another", "#goodboy", "#smile"};
        List<String> suggestTags = Arrays.asList(suggest);
        HashtagMasstaggingAdapter suggestTagsAdapter = new HashtagMasstaggingAdapter(suggestTags, this, true, contact);
        containerAssistant = (RecyclerView) popupUserHashtags.findViewById(R.id.assistantSuggestContainer);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerAssistant.setLayoutManager(mLayoutManager);
        containerAssistant.setItemAnimator(new DefaultItemAnimator());
        //   containerAssistant.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        containerAssistant.setAdapter(suggestTagsAdapter);
        //=============MOST USER TAGS
        ArrayList<HashTagQuantity> listH = new ArrayList<>();
        listH.addAll(HASHTAG_ADAPTER.getListOfHashtags());
        Collections.sort(listH, new Comparator<HashTagQuantity>() {
            @Override
            public int compare(HashTagQuantity first, HashTagQuantity second) {
                return second.getQuantity() - first.getQuantity();
            }
        });

        /*List<String> mostUsed = new ArrayList<>();

        for(HashTagQuantity hashTagQuantity : listH){
            mostUsed.add(hashTagQuantity.getHashTag().toString());
        }*/
        //====================
        mostTagAdapter = new MostUsedTagsAdapter(listH, this, true, contact);
        containerMost = (RecyclerView) popupUserHashtags.findViewById(R.id.mostUsedTagsContainer);
        RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerMost.setLayoutManager(mostLayoutManager);
        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        containerMost.setItemAnimator(new DefaultItemAnimator());
        containerMost.setAdapter(mostTagAdapter);

//        popupUserHashtags.findViewById(R.id.backToPreview).setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                popupUserHashtags.setVisibility(View.GONE);
//                getActivity().findViewById(R.id.suggestPopup).setVisibility(View.GONE);
//            }
//        });

        popupUserHashtags.findViewById(R.id.openSuggestPopup).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupUserHashtags.findViewById(R.id.arrowSuggest).getScaleY() != -1f) {
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(-1f);
                    suggestTagsAdapter.showAllTags();
                    mostTagAdapter.showAllTags();
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 140, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 140, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    //showSuggestPopup(popupUserHashtags, contact);
                } else {
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                    popupUserHashtags.setVisibility(View.GONE);
                    showPopupUserHashtags(contact);
                    // getActivity().findViewById(R.id.suggestPopup).setVisibility(View.GONE);
                }
            }
        });
        popupUserHashtags.setVisibility(View.VISIBLE);

        openedViews.add(popupUserHashtags);
    }

    private void initBoolToCheck(Boolean checked) {
        //((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.smartphoneCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.googleContactsCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.whatsappCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.telegramCheck)).setChecked(checked);

        ((CheckBox) getActivity().findViewById(R.id.facebookCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.instagramContactsCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.linkedinCheck)).setChecked(checked);

        //((CheckBox) getActivity().findViewById(R.id.viberCheck)).setChecked(checked);
        //((CheckBox) getActivity().findViewById(R.id.skypeCheck)).setChecked(checked);
        ((CheckBox) getActivity().findViewById(R.id.callCheck)).setChecked(checked);
    }

    private void allContactsUncheked() {
        ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
        //((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.smartphoneCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.googleContactsCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.whatsappCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.telegramCheck)).setChecked(false);

        ((CheckBox) getActivity().findViewById(R.id.facebookCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.instagramContactsCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.linkedinCheck)).setChecked(false);

        //((CheckBox) getActivity().findViewById(R.id.viberCheck)).setChecked(false);
        //((CheckBox) getActivity().findViewById(R.id.skypeCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.callCheck)).setChecked(false);
    }

    private void allContactscheked() {
        ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(true);
    }

    private void setListenerToAllContactsCheck() {
        //=====================================old
       /* ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (isChecked) {
                    contactAdapter.selectAllContacts();
                    ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getCall2meCt()) + ")");
                    ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_all_contacts));
                    initBoolToCheck(true);
                } else {
                    contactAdapter.removeAllContacts();
                    initBoolToCheck(false);
                }

            }
        });*/
// ==========================new
        ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickAllCont(false);
            }
        });
    }

    // ==========================new
    public void clickAllCont(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.allContactsCheck);
        if (click) {
            if (checkBox.isChecked())
                checkBox.setChecked(false);
            else
                checkBox.setChecked(true);
        }
        checkAll();
        contactAdapter.clearListSort();
        if (checkBox.isChecked()) {
            System.out.println("CHECK ALL");
            contactAdapter.selectAllContacts();
            ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + listOfContacts.size() + "");
            ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_all_contacts));
            initBoolToCheck(true);
        } else {
            System.out.println("NO CHECK ALL");
            contactAdapter.removeAllContacts();
            initBoolToCheck(false);
        }
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }


    private void checkAllChecked() {
        if (quantityCheck == 8) {
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(true);
        }
    }

    private void setEmptyListenerToAllContactsCheck() {
        ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
        });
    }

    private void setListenersToContactsPopup(TypeCount count) {
        setListenerToAllContactsCheck();
        //LinearLayout samsungLL = (LinearLayout) getActivity().findViewById(R.id.samsungCheckOnly);
        LinearLayout phoneLL = (LinearLayout) getActivity().findViewById(R.id.smartphoneCheckOnly);
        LinearLayout googleLL = (LinearLayout) getActivity().findViewById(R.id.googleContactsCheckOnly);
        LinearLayout whatsappLL = (LinearLayout) getActivity().findViewById(R.id.whatsappCheckOnly);
        LinearLayout telegramLL = (LinearLayout) getActivity().findViewById(R.id.telegramCheckOnly);
        //LinearLayout skypeLL = (LinearLayout) getActivity().findViewById(R.id.skypeCheckOnly);
        //LinearLayout viberLL = (LinearLayout) getActivity().findViewById(R.id.viberCheckOnly);

        LinearLayout facebookLL = (LinearLayout) getActivity().findViewById(R.id.facebookCheckOnly);
        LinearLayout linkedinLL = (LinearLayout) getActivity().findViewById(R.id.linkedinCheckOnly);
        LinearLayout instagramLL = (LinearLayout) getActivity().findViewById(R.id.instagramContactsCheckOnly);

        LinearLayout c2mLL = (LinearLayout) getActivity().findViewById(R.id.callCheckOnly);
        LinearLayout allContactsLL = (LinearLayout) getActivity().findViewById(R.id.allContactsPP);

        allContactsLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                clickAllCont(true);
                //    allContactscheked();

                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + ContactCacheService.getCountContacts() + "");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_all_contacts));
            }
        });

        /*samsungLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //  allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setChecked(true);
                clickSumsungCloud(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getSamsungCloudCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_samsung));
            }
        });*/

        phoneLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //   allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.smartphoneCheck)).setChecked(true);
                clickSmart(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getPhoneCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_phone));
            }
        });

        googleLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //      allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.googleContactsCheck)).setChecked(true);
                clickGoogle(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getGoogleCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_google_contacts));
            }
        });

        facebookLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                contactAdapter.removeAllContacts();
                allContactsUncheked();

                ((CheckBox) getActivity().findViewById(R.id.facebookCheck)).setChecked(true);
                clickFacebook(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getFacebookCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_facebook));
            }
        });

        instagramLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                contactAdapter.removeAllContacts();
                allContactsUncheked();

                ((CheckBox) getActivity().findViewById(R.id.instagramContactsCheck)).setChecked(true);
                clickInstagram(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getInstagramCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.instagram_adapter));
            }
        });

        linkedinLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                contactAdapter.removeAllContacts();
                allContactsUncheked();

                ((CheckBox) getActivity().findViewById(R.id.linkedinCheck)).setChecked(true);
                clickLinkedIn(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getLinkedinCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_linkedin));
            }
        });

        whatsappLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //       allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.whatsappCheck)).setChecked(true);
                clickWhatsApp(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getWhatsCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_whatsapp));
            }
        });

        telegramLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //  allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.telegramCheck)).setChecked(true);
                clickTelegram(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" (" + (count.getTelegramCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_telegram));
            }
        });

       /* skypeLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //   allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.skypeCheck)).setChecked(true);
                clickSkype(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getSkypeCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_skype));
            }
        });*/

        /*viberLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //     allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.viberCheck)).setChecked(true);
                clickViber(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + (count.getViberCt()) + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_viber));
            }
        });*/

        c2mLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //   allContactscheked();
                contactAdapter.removeAllContacts();
                allContactsUncheked();


                ((CheckBox) getActivity().findViewById(R.id.callCheck)).setChecked(true);
                clickCallMeCloud(true);
                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("(" + ContactCacheService.getCountContacts() + ")");
                ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_call2me));
            }
        });

        //================new
        /*((CheckBox) getActivity().findViewById(R.id.skypeCheck)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickSkype(false);
            }
        });*/

        //=============================old
       /* ((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.addTypeToList("com.samsung.android.scloud");
                ++quantityCheck;
            } else {
                contactAdapter.removeTypeFromList("com.samsung.android.scloud");
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/
        //===================new

        /*((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickSumsungCloud(false);
            }
        });*/
        //==================old
  /*      ((CheckBox) getActivity().findViewById(R.id.callCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.selectAllContacts();
                ++quantityCheck;
            } else {
                contactAdapter.removeAllContacts();
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/
        //==================new
        getActivity().findViewById(R.id.callCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickCallMeCloud(false);
            }
        });
        //================old
      /*  ((CheckBox) getActivity().findViewById(R.id.smartphoneCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.addPhoneTypeToList();
                ++quantityCheck;
            } else {
                contactAdapter.removePhoneTypeFromList();
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/
        //================================new

        getActivity().findViewById(R.id.smartphoneCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickSmart(false);
            }
        });
        //=============old
      /*  ((CheckBox) getActivity().findViewById(R.id.googleContactsCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.addTypeToList("com.google");
                ++quantityCheck;
            } else {
                contactAdapter.removeTypeFromList("com.google");
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/

        //==================new
        getActivity().findViewById(R.id.googleContactsCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickGoogle(false);
            }
        });

        getActivity().findViewById(R.id.facebookCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickFacebook(false);
            }
        });

        getActivity().findViewById(R.id.instagramContactsCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickInstagram(false);
            }
        });

        getActivity().findViewById(R.id.linkedinCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickLinkedIn(false);
            }
        });
        //===================old
        /*((CheckBox) getActivity().findViewById(R.id.whatsappCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.addTypeToList("com.whatsapp");
                ++quantityCheck;
            } else {
                contactAdapter.removeTypeFromList("com.whatsapp");
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/

        //===========================new
        getActivity().findViewById(R.id.whatsappCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickWhatsApp(false);
            }
        });


        //===================old
   /*     ((CheckBox) getActivity().findViewById(R.id.telegramCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                contactAdapter.addTypeToList("org.telegram.messenger");
                ++quantityCheck;
            } else {
                contactAdapter.removeTypeFromList("org.telegram.messenger");
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/
        //=======================new
        getActivity().findViewById(R.id.telegramCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickTelegram(false);
            }
        });
        //===============old
      /*  ((CheckBox) getActivity().findViewById(R.id.viberCheck)).setOnCheckedChangeListener((buttonView, isChecked) -> {
            System.out.println("VIBER CHECK");
            if (isChecked) {
                contactAdapter.addTypeToList("com.viber.voip");
                ++quantityCheck;
            } else {
                contactAdapter.removeTypeFromList("com.viber.voip");
                setEmptyListenerToAllContactsCheck();
                allContactsUncheked();
                setListenerToAllContactsCheck();
                --quantityCheck;
            }
            checkAllChecked();
        });*/

        //=================new
       /* getActivity().findViewById(R.id.viberCheck).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                clickViber(false);
            }
        });*/
    }

    public void clickCallMeCloud(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.callCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.selectAllContacts();
            ++quantityCheck;
        } else {
            contactAdapter.removeAllContacts();
            setEmptyListenerToAllContactsCheck();
            //  allContactsUncheked();
            setListenerToAllContactsCheck();
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    /*public void clickViber(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.viberCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("com.viber.voip");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("com.viber.voip");
            setEmptyListenerToAllContactsCheck();
            //     allContactsUncheked();
            setListenerToAllContactsCheck();
            --quantityCheck;
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }*/

   /* public void clickSkype(boolean click) {
        checkAll();
    }*/

    public void clickWhatsApp(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.whatsappCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("com.whatsapp");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("com.whatsapp");
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

    }

    public void clickGoogle(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.googleContactsCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("com.google");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("com.google");
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickFacebook(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.facebookCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("facebook");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("facebook");
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickInstagram(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.instagramContactsCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("instagram");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("instagram");
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickLinkedIn(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.linkedinCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("linkedin");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("linkedin");
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickSmart(boolean click) {
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.smartphoneCheck);
        checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addPhoneTypeToList();
            ++quantityCheck;
        } else {
            contactAdapter.removePhoneTypeFromList();
            setEmptyListenerToAllContactsCheck();
            //    allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickTelegram(boolean click) {
        System.out.println("CLICK TELEGRAM");
        CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.telegramCheck);
        checkAll();
       /* if(click){
            if(checkBox.isChecked())
                checkBox.setChecked(false);
            else
                checkBox.setChecked(true);
        }*/

        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("org.telegram.messenger");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("org.telegram.messenger");
            setEmptyListenerToAllContactsCheck();
            //  allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
    }

    public void clickSumsungCloud(boolean click) {
        //CheckBox checkBox = (CheckBox) getActivity().findViewById(R.id.samsungCheck);

        /*if(click){
            if(checkBox.isChecked())
                checkBox.setChecked(false);
            else
                checkBox.setChecked(true);
        }*/

       /* checkAll();
        if (checkBox.isChecked()) {
            contactAdapter.addTypeToList("com.samsung.android.scloud");
            ++quantityCheck;
        } else {
            contactAdapter.removeTypeFromList("com.samsung.android.scloud");
            setEmptyListenerToAllContactsCheck();
            //     allContactsUncheked();
            setListenerToAllContactsCheck();
            ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(false);
            --quantityCheck;
        }
        checkAllChecked();
        contactAdapter.setListSaveSort();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);*/
    }

    public void closeHelpHashtagsPopup() {
        getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);
    }

    boolean checkS = false;

    public int sortAutoHash = 1;
    public boolean sABC = true;
    public boolean sPopul = true;
    public boolean sTime = true;

    public float xPosHash;
    public float yPosHash;

    private void showHelpTags() {

        System.out.println("showHelpTags");


        /*SwipeController swipeController = new SwipeController(new SwipeControllerActions() {
            @Override
            public void swipe(int position) {
                //System.out.println(clibpboardAdapter.getClipboards().get(position).getValueCopy());

                if (position == -1) return;


                if (ProfileFragment.profile && !clibpboardAdapter.getClipboards().get(position).getType().equals(ClipboardEnum.GROUP) && !ProfileFragment.company) {
                    ArrayList<DataUpdate> updateArrayList = new ArrayList<>();
                    DataUpdate dataUpdate = new DataUpdate(clibpboardAdapter.getClipboards().get(position).getValueCopy(), clibpboardAdapter.getClipboards().get(position).getType());
                    updateArrayList.add(dataUpdate);
                    new Thread(new Runnable() {
                        @Override
                        public void run() {

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    openDialodUpdateProfile(updateArrayList, clibpboardAdapter.getClipboards().get(position));
                                }
                            });

                        }
                    }).start();

                }
            }

            @Override
            public void swipeLeft(int position) {
                if (position == -1) return;
                ((EditText) findViewById(R.id.magic_edit_text)).setText(clibpboardAdapter.getClipboards().get(position).getValueCopy());


            }
        });


        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(swipeController);

        itemTouchHelper.attachToRecyclerView(helpsHashtasgs);*/














        //=========================================

        if (getActivity().findViewById(R.id.completeTagsPopup).getVisibility() == View.VISIBLE)
            return;

        if (getActivity().findViewById(R.id.popupProfileCompanyPossitions).getVisibility() == View.VISIBLE)
            getActivity().findViewById(R.id.popupProfileCompanyPossitions).setVisibility(View.GONE);

        helpsHashtasgs.clear();
        helpsHashtasgs.addAll(HASHTAG_ADAPTER.getListOfHashtags());
        if (foundHelpsHashtags) {
            LinearLayout completeTagsPopup = (LinearLayout) getActivity().findViewById(R.id.completeTagsPopup);


            RecyclerView helpHashtagContainer = (RecyclerView) completeTagsPopup.findViewById(R.id.help_hashtags_container);
            RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
            helpHashtagContainer.setLayoutManager(mostLayoutManager);
            helpHashtagContainer.setItemAnimator(new DefaultItemAnimator());

            SharedPreferences mPref = getActivity().getSharedPreferences("Sort", Context.MODE_PRIVATE);
            SharedPreferences.Editor editor = mPref.edit();

            sortAutoHash = mPref.getInt("typeSortHelpHashtag", 6);
            //sortAutoHash = 6;


            if (sortAutoHash == 1) {
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("A-Z");
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            } else if (sortAutoHash == 2) {
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("Z-A");
            } else if (sortAutoHash == 5 || sortAutoHash == 6) {
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            } else {
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            }
            /*((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));*/
            helpHashtagAdapter = new HelpHashtagAdapter(helpsHashtasgs, this, completeTagsPopup);
            helpHashtagContainer.setAdapter(helpHashtagAdapter);

            if (sortAutoHash == 1 /*&& sABC*/) {
                Collections.sort(helpsHashtasgs, (hashTagFirst, hashTagSecond) -> hashTagFirst.getHashTag().getHashTagValue().compareToIgnoreCase(hashTagSecond.getHashTag().getHashTagValue()));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("A-Z");
                editor.putInt("typeSortHelpHashtag", 1);
                editor.commit();
                helpHashtagAdapter.setsortAsc(true);
            } else if (sortAutoHash == 2 /*&& !sABC*/) {
                Collections.sort(helpsHashtasgs, (hashTagFirst, hashTagSecond) -> hashTagSecond.getHashTag().getHashTagValue().compareToIgnoreCase(hashTagFirst.getHashTag().getHashTagValue()));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("Z-A");
                helpHashtagAdapter.setsortAsc(false);
                editor.putInt("typeSortHelpHashtag", 2);
                editor.commit();
            } else if (sortAutoHash == 5 /*&& sPopul*/) {
                editor.putInt("typeSortHelpHashtag", 5);
                editor.commit();
                Collections.sort(helpsHashtasgs, new Comparator<HashTagQuantity>() {
                    @Override
                    public int compare(HashTagQuantity first, HashTagQuantity second) {
                        return first.getQuantity() - second.getQuantity();
                    }
                });
                helpHashtagAdapter.setSortByPpul(true);
            } else if (sortAutoHash == 6 /*&& !sPopul*/) {
                editor.putInt("typeSortHelpHashtag", 6);
                editor.commit();
                Collections.sort(helpsHashtasgs, new Comparator<HashTagQuantity>() {
                    @Override
                    public int compare(HashTagQuantity first, HashTagQuantity second) {
                        return second.getQuantity() - first.getQuantity();
                    }
                });
                helpHashtagAdapter.setSortByPpul(false);
            } else if (sortAutoHash == 3 /*&& sTime*/) {

                //helpsHashtasgs.clear();
                //helpsHashtasgs.addAll(HASHTAG_ADAPTER.getListOfHashtags());
                try {
                    Collections.sort(helpsHashtasgs, (hashTagFirst, hashTagSecond) -> hashTagFirst.getHashTag().getDate().compareTo(hashTagSecond.getHashTag().getDate()));
                } catch (NullPointerException e) {
                    e.printStackTrace();
                }
                editor.putInt("typeSortHelpHashtag", 3);
                editor.commit();
                helpHashtagAdapter.setSortByTime(true);
            } else if (sortAutoHash == 4 /*&& !sTime*/) {

                //helpsHashtasgs.clear();
                //helpsHashtasgs.addAll(HASHTAG_ADAPTER.getListOfHashtags());

                Collections.sort(helpsHashtasgs, (hashTagFirst, hashTagSecond) -> hashTagSecond.getHashTag().getDate().compareTo(hashTagFirst.getHashTag().getDate()));
                helpHashtagAdapter.setSortByTime(false);
                editor.putInt("typeSortHelpHashtag", 4);
                editor.commit();
            }

            helpHashtagAdapter.setListHashTag(helpsHashtasgs);

            completeTagsPopup.findViewById(R.id.sortElements).setOnClickListener(v -> {
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                helpHashtagAdapter.sortList();
                if (helpHashtagAdapter.getsortAsc()) {
                    ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("A-Z");
                    sABC = true;
                    sortAutoHash = 1;
                    editor.putInt("typeSortHelpHashtag", 1);
                    editor.commit();

                } else {
                    ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setText("Z-A");
                    sABC = false;
                    sortAutoHash = 2;
                    editor.putInt("typeSortHelpHashtag", 2);
                    editor.commit();
                }
                sortAutoHash = 1;
            });
            completeTagsPopup.findViewById(R.id.populHashTag).setOnClickListener(v -> {
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                helpHashtagAdapter.sortListByPopul();
                if (helpHashtagAdapter.getsortpopul()) {
                    sPopul = true;
                    editor.putInt("typeSortHelpHashtag", 5);
                    editor.commit();
                    sortAutoHash = 5;
                } else {
                    sPopul = false;
                    editor.putInt("typeSortHelpHashtag", 6);
                    editor.commit();
                    sortAutoHash = 6;

                }

                sortAutoHash = 2;
            });
            completeTagsPopup.findViewById(R.id.sortByTime).setOnClickListener(v -> {
                ((ImageView) completeTagsPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) completeTagsPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) completeTagsPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                helpHashtagAdapter.sortListByTime();
                if (helpHashtagAdapter.getsorttime()) {
                    sTime = true;
                    sortAutoHash = 3;
                    editor.putInt("typeSortHelpHashtag", 3);
                    editor.commit();
                } else {
                    sTime = false;
                    sortAutoHash = 4;
                    editor.putInt("typeSortHelpHashtag", 4);
                    editor.commit();
                }

            });

            completeTagsPopup.setVisibility(View.VISIBLE);


            completeTagsPopup.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                }
            });




            /*getActivity().findViewById(R.id.hashContainer).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("TOUCH");
                    final int x = (int) motionEvent.getRawX();
                    final int y = (int) motionEvent.getRawY();

                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            System.out.println("CLICK");
                            xPosHash = x;
                            yPosHash = y;
                            return true;

                        }
                        case MotionEvent.ACTION_MOVE: {
                            int[] location = new int[2];
                            getActivity().findViewById(R.id.hashContainer).getLocationInWindow(location);
                            ViewGroup.LayoutParams params = getActivity().findViewById(R.id.completeTagsPopup).getLayoutParams();
                            System.out.println("MOVE = "+params.height);
                            System.out.println("X = "+x);
                            System.out.println("Y = "+y);

                            //if(yPosHash > y) {
                                if(params.height>=200)
                                params.height = Math.round(200 + yPosHash - y);
                                if(params.height<200) params.height = 200;
                            //}

                            getActivity().findViewById(R.id.completeTagsPopup).setLayoutParams(params);


                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            view.performClick();
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL:

                            break;
                    }

                    return  false;
                }
            });*/


        }
    }

    public boolean checkClick = true;
    ParsingSocial parsingSocial = null;


    public void checkConnectionFroParsing(boolean check) {
        if (check) {
            getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.nameAccount).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.textNoWifi).setVisibility(View.GONE);
            getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.GONE);
            getActivity().findViewById(R.id.textWaitLoad).setVisibility(View.GONE);

        } else {
            getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.GONE);
            getActivity().findViewById(R.id.nameAccount).setVisibility(View.GONE);
            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
            getActivity().findViewById(R.id.textNoWifi).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.textWaitLoad).setVisibility(View.GONE);
        }
    }

    public void showWaitText(SocialEnums socialEnums) {
        if (socialEnums.equals(SocialEnums.INSTAGRAM))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_instagram));
        else if (socialEnums.equals(SocialEnums.VK))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_vk));
        else if (socialEnums.equals(SocialEnums.FACEBOOK))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_facebook));
        else if (socialEnums.equals(SocialEnums.LINKEDIN))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_linkedin));
        else if (socialEnums.equals(SocialEnums.TWITTER))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_48));
        else if (socialEnums.equals(SocialEnums.YOUTUBE))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_youtube_48));
        else if (socialEnums.equals(SocialEnums.MEDIUM))
            ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.medium_size_64));

        getActivity().findViewById(R.id.textNoWifi).setVisibility(View.GONE);
        getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textWaitLoad).setVisibility(View.GONE);
        getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.GONE);
        getActivity().findViewById(R.id.nameAccount).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textWaitLoad).setVisibility(View.VISIBLE);
    }

    public void hideWaitText() {
        getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.nameAccount).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.textNoWifi).setVisibility(View.GONE);
        getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textWaitLoad).setVisibility(View.GONE);
    }

   /* public void NoConnectionHide(){
        getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.GONE);
        getActivity().findViewById(R.id.nameAccount).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
        getActivity().findViewById(R.id.textNoWifi).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.VISIBLE);


    }

    public void ConnectionTrueShow(){
        getActivity().findViewById(R.id.nameSocialExtract).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.nameAccount).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.textNoWifi).setVisibility(View.GONE);
        getActivity().findViewById(R.id.imageNoWifi).setVisibility(View.GONE);
    }
    */

    public boolean checkInput = false;

    public int[] number_of_clicks = {0};
    public boolean[] thread_started = {false};
    public int DELAY_BETWEEN_CLICKS_IN_MILLISECONDS = 250;

    private void initListeners() {

        getActivity().findViewById(R.id.magicIconHashtag).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (getActivity().findViewById(R.id.completeTagsPopup).getVisibility() == View.VISIBLE)
                    getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);
                else
                    EventBus.getDefault().post(new ShowHashtagPopup(true));

            }
        });

        getActivity().findViewById(R.id.magicIconHashtag).setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                if (getActivity().findViewById(R.id.completeTagsPopup).getVisibility() == View.VISIBLE)
                    getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);
                else
                    EventBus.getDefault().post(new ShowHashtagPopup(false));

                return true;
            }
        });

        getActivity().findViewById(R.id.plane_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        toolbarC.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                getActivity().findViewById(R.id.popup_menu_settings).setVisibility(View.GONE);
                getActivity().findViewById(R.id.popup_menu_contacts).setVisibility(View.GONE);
                getActivity().findViewById(R.id.popup_menu_timeline).setVisibility(View.GONE);

                ++number_of_clicks[0];
                if (!thread_started[0]) {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            thread_started[0] = true;
                            try {
                                Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                if (number_of_clicks[0] == 1) {
                                    //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                } else if (number_of_clicks[0] == 2) {
                                    System.out.println("DDD BAR");
                                    /*if (ProfileFragment.profile) {

                                    } else if (ContactsFragment.createContact) {

                                    } else {*/
                                    if (MainActivity.secretMode == 1) {
                                        MainActivity.secretMode = 2;
                                        EventBus.getDefault().post(new NotifyAdapter());
                                        getActivity().runOnUiThread(new Runnable() {
                                            @Override
                                            public void run() {
                                                Toast.makeText(getContext(), "Secret view mode enabled", Toast.LENGTH_SHORT).show();
                                            }
                                        });
                                    } else if (MainActivity.secretMode == 3) {
                                        MainActivity.secretMode = 1;
                                        EventBus.getDefault().post(new NotifyAdapter());
                                        getActivity().runOnUiThread(new Runnable() {
                                            @Override
                                            public void run() {
                                                Toast.makeText(getContext(), "Secret view mode disabled", Toast.LENGTH_SHORT).show();
                                            }
                                        });
                                    } else {
                                        MainActivity.secretMode = 3;
                                        EventBus.getDefault().post(new NotifyAdapter());
                                    }
                                    // }
                                }
                                number_of_clicks[0] = 0;
                                thread_started[0] = false;
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }).start();
                }
            }
        });

        mainView.findViewById(R.id.closer).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("CLOSER CLICK");
                if (openedViews.size() > 0) {
                    System.out.println(" CLOSE 1");
                    contactAdapter.notifyDataSetChanged();
                    contactAdapter.setNULLSelectedID();
                    closeOtherPopup();
                }


                getActivity().findViewById(R.id.popupInfoClipboard).setVisibility(View.GONE);
                getActivity().findViewById(R.id.popupEditClip).setVisibility(View.GONE);
                getActivity().findViewById(R.id.popupChangeType).setVisibility(View.GONE);
            }
        });

        floatingActionMenu.setOnMenuToggleListener(new FloatingActionMenu.OnMenuToggleListener() {
            @Override
            public void onMenuToggle(boolean opened) {
                if (!opened) createPopup.setVisibility(View.GONE);
            }
        });


        getActivity().findViewById(R.id.textExtractSocial).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                System.out.println("CLick ext");

                if (((TextView) getActivity().findViewById(R.id.textExtractSocial)).getText().equals("Extract data") && ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).getText().equals("Extract data")) {

                    //getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);

                    //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.GONE);

                    //getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.GONE);


                    getActivity().findViewById(R.id.extratorContainer).setVisibility(View.VISIBLE);
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial)).setText("Create");
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).setText("Create");

                    ArrayList<Extrator> listExtract = new ArrayList<>();
                    String usernameLink = "Error!";
                    String name = "Error!";
                    try {
                        //===============================================================================CUT LINK!
                        int index = CreateFragment.nameContactExtractFromSocial.length();
                        if (extractEnumsToExtractContainer.equals(ExtractEnums.INSTAGRAM)) {
                            index = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                            if (index != -1 && index != 0) {
                                usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index, CreateFragment.nameContactExtractFromSocial.length() - 1);
                                if (usernameLink.contains("•")) {
                                    int ind2 = usernameLink.indexOf('•');
                                    usernameLink = usernameLink.substring(0, ind2 - 2);
                                }
                                System.out.println("usernameInst 2 = " + usernameLink);
                                index -= 2;
                                name = CreateFragment.nameContactExtractFromSocial.substring(0, index).trim();
                            } else if (CreateFragment.nameContactExtractFromSocial != null && !CreateFragment.nameContactExtractFromSocial.isEmpty()) {
                                name = CreateFragment.nameContactExtractFromSocial;

                                index = name.indexOf('•');
                                if (index != -1) {
                                    usernameLink = name.substring(0, index - 1);
                                    System.out.println("usernameInst 3 = " + usernameLink);
                                    name = name.substring(0, index - 1).trim();
                                    index -= 2;
                                }

                            } else {
                                index = name.indexOf('•');
                                if (index != -1) {
                                    usernameLink = name.substring(0, index - 1);
                                    System.out.println("usernameInst 3 = " + usernameLink);
                                    name = name.substring(0, index - 1).trim();
                                    index -= 2;
                                }
                            }


                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.VK)) {
                            index = allWayLink.indexOf(".com/");
                            usernameLink = allWayLink.toString().substring(index + 5, allWayLink.length());
                            name = CreateFragment.nameContactExtractFromSocial;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.FACEBOOK)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            if (name.contains("(") && name.contains(")")) {
                                int ind = name.indexOf("(");
                                name = name.substring(0, ind - 1);
                            }
                            index = allWayLink.lastIndexOf(".com/");
                            if (allWayLink.contains("people")) {
                                index = allWayLink.lastIndexOf("/");
                                usernameLink = "id" + allWayLink.toString().substring(index + 5, allWayLink.length());
                            } else {
                                usernameLink = allWayLink.toString().substring(index + 5, allWayLink.length());
                                if (usernameLink.contains("/")) {
                                    usernameLink = usernameLink.substring(0, usernameLink.indexOf('/'));
                                }
                            }

                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.LINKEDIN)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.TWITTER)) {
                            index = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                            if (index != -1) {
                                usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index, CreateFragment.nameContactExtractFromSocial.length() - 1);
                                System.out.println("usernameInst 2 = " + usernameLink);
                                index -= 2;
                                name = CreateFragment.nameContactExtractFromSocial.substring(0, index).trim();
                            } else if (CreateFragment.nameContactExtractFromSocial != null && !CreateFragment.nameContactExtractFromSocial.isEmpty()) {
                                name = CreateFragment.nameContactExtractFromSocial;
                            }
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.YOUTUBE)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.MEDIUM)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            if (allWayLink.contains(".com/@")) {
                                int in = allWayLink.indexOf(".com/@") + 5;
                                usernameLink = allWayLink.substring(in);
                            } else usernameLink = allWayLink;
                            //usernameLink = allWayLink;
                        }
                        if (index < 0)
                            index = CreateFragment.nameContactExtractFromSocial.length();
                        //=====================================================================================
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    listExtract.add(new Extrator(ExtractEnums.NAME, name.trim(), null));
                    //listExtract.add(new Extrator(extractEnumsToExtractContainer, ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
                    listExtract.add(new Extrator(extractEnumsToExtractContainer, usernameLink, allWayLink));

                    ((TextView) getActivity().findViewById(R.id.textCountFoundExtrator)).setText(listExtract.size() + " data items found");

                    RecyclerView recyclerView = (RecyclerView) getActivity().findViewById(R.id.clipboardRVExtract);


                    recyclerView.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
                    extratorAdapter = new ExtratorAdapter(listExtract, getActivity());
                    recyclerView.setAdapter(extratorAdapter);

                } else if (((TextView) getActivity().findViewById(R.id.textExtractSocial)).getText().equals("Create") || ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).getText().equals("Create")) {
                    //ContactAdapter.contactAd = contactAdapter;
                   /* checkMerge = false;
                    checkMergeContacts = true;
                    contactsFragment.closeOtherPopup();*/
                    Contact contact = new Contact();
                    ArrayList<Extrator> listEx = extratorAdapter.getListExtract();
                    for (Extrator extrator : listEx) {
                        if (extrator.isCheck() == true) {
                            if (extrator.getType().equals(ExtractEnums.NAME))
                                contact.setName(extrator.getText().trim());

                            if (extrator.getType().equals(ExtractEnums.FACEBOOK)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setFacebookLink(extrator.getAllLink());
                                contact.hasFacebook = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.INSTAGRAM)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setInstagramLink(extrator.getAllLink());
                                contact.hasInst = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.VK)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setVkLink(extrator.getAllLink());
                                contact.hasVk = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.LINKEDIN)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setLinkedInLink(extrator.getAllLink());
                                contact.hasLinked = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.TWITTER)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setTwitterLink(extrator.getAllLink());
                                contact.hasTwitter = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.YOUTUBE)) {
                                if (extrator.getAllLink().contains("channel") || extrator.getAllLink().contains("user")) {
                                    if (contact.getSocialModel() == null)
                                        contact.setSocialModel(new SocialModel());
                                    contact.getSocialModel().setYoutubeLink(extrator.getAllLink());
                                    contact.hasYoutube = true;
                                } else {
                                    if (contact.getListOfContactInfo() == null)
                                        contact.setListOfContactInfo(new RealmList<ContactInfo>());
                                    contact.addNote(extrator.getAllLink());
                                }
                            }

                            if (extrator.getType().equals(ExtractEnums.MEDIUM)) {
                                if (extrator.getAllLink().contains("com/@")) {
                                    if (contact.getSocialModel() == null)
                                        contact.setSocialModel(new SocialModel());
                                    contact.getSocialModel().setMediumLink(extrator.getAllLink());
                                    contact.hasMedium = true;
                                } else {
                                    if (contact.getListOfContactInfo() == null)
                                        contact.setListOfContactInfo(new RealmList<ContactInfo>());
                                    contact.addNote(extrator.getAllLink());
                                }
                            }


                        }
                    }
                    System.out.println("NAMENEWCONTACT=" + contact.getName());
                    ContactsFragment.createContact = true;
                    ArrayList<Contact> contactExtract = new ArrayList<>();
                    contactExtract.add(contact);
                    android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();
                    android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                    fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();

                    getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial)).setText("Extract data");
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).setText("Extract data");
                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                    getActivity().findViewById(R.id.text_reset_btn).callOnClick();
                    //contactsFragment.hideSelectMenu();

                }
            }
        });

        getActivity().findViewById(R.id.textExtractSocial2).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().findViewById(R.id.textExtractSocial).callOnClick();
            }
        });


        getActivity().findViewById(R.id.nameContactExtractFind).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if ((contactAdapter.getSelectContactID() == null || contactAdapter.getSelectContactID() == "") && !ProfileFragment.profile && !ContactAdapter.checkMergeContacts && !ContactsFragment.createContact) {
                    if (contactFindExtractSocial != null) {

                        if (ContactAdapter.checkMerge) {

                            ContactAdapter.checkFoActionIconProfile = true;
                            ContactAdapter.checkMerge = false;
                        }

                        /*android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();
                        android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                        fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(ContactCacheService.getContactById(contactFindExtractSocial.getId()), false)).addToBackStack("contacts").commit();*/

                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);

                        closeOtherPopup();

                        if (contactFindExtractSocial.listOfContacts == null || contactFindExtractSocial.listOfContacts.isEmpty()) {
                            showProfilePopUp(contactFindExtractSocial);
                        } else {
                            showCompanyPopup(contactFindExtractSocial);
                        }

                        //contactFindExtractSocial = null;
                        //ContactAdapter.contactAd = contactAdapter;
                    }
                }
            }
        });

      /*  getActivity().findViewById(R.id.magic_edit_text).setOnClickListener(new DoubleClick(new DoubleClickListener() {
            @Override
            public void onSingleClick(View view) {
                System.out.println("One click");
            }

            @Override
            public void onDoubleClick(View view) {
                System.out.println("DOUBLE CLIIICK");
            }
        }));*/


        getActivity().findViewById(R.id.magic_edit_text).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ++number_of_clicks[0];
                if (!thread_started[0]) {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            thread_started[0] = true;
                            try {
                                Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                if (number_of_clicks[0] == 1) {
                                    //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                } else if (number_of_clicks[0] == 2) {
                                    System.out.println("DOUBLE CLIIICK");
                                    EventBus.getDefault().post(new ShowHashtagPopup(true));
                                    //client.send(AppHelper.FORMAT_DOUBLE_CLICK);
                                }
                                number_of_clicks[0] = 0;
                                thread_started[0] = false;
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }).start();
                }
            }
        });


        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                System.out.println("BEFOOOOOOOOOORE = " + checkS);
                checkS = true;
                if (s.length() == 0) {
                    checkInput = true;
                }
                //     if(!checkS) checkS = true;
                //    else return;

            }


            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (s.length() > 0) {
                    if (String.valueOf(s.charAt(s.length() - 1)).compareTo("#") == 0)
                        foundHelpsHashtags = true;
                }
            }


            @Override
            public void afterTextChanged(Editable s) {
                if (s.length() == 0) {
                    if (parsingSocial != null)
                        parsingSocial.cancel(true);

                    try {
                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                        getActivity().findViewById(R.id.countSearchContacts).setVisibility(View.GONE);

                        getActivity().findViewById(R.id.magicIconHashtag).setVisibility(View.VISIBLE);
                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    }

                }

                try {
                    if (changeListAfterRemoveText) {

                        if (checkS) {
                            System.out.println("AFTEEEEEEEEEEER");

                            allSearch = false;

                            contactFindExtractSocial = null;
                            int possition = 3;

                            magicSplit = s.toString().split(" ");

                            String findStr = s.toString();

                            if (magicSplit.length > 0)
                                findStr = magicSplit[magicSplit.length - 1];

                            if (hideHelpHash)
                                getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);

                            getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);

                            if (s.length() > 0) {
                                //getActivity().findViewById(R.id.magicIconHashtag).setVisibility(View.GONE);


                                if (String.valueOf(s.charAt(0)).compareTo("#") == 0) {
                                    if (hideHelpHash)
                                        showHelpTags();
                                    if (s.length() > 1 && hideHelpHash)
                                        helpHashtagAdapter.findByStr(findStr.toLowerCase());

                                    // hideHelpHash = true;
                                } else if (ClipboardType.isInsta(s.toString())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.INSTAGRAM);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_instagram));
                                    }


                                } else if (ClipboardType.isVk(s.toString())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.VK);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_vk));
                                    }

                                } else if (/*(s.length() > 21 && s.toString().substring(0, 21).equalsIgnoreCase("https://facebook.com/")) || (s.length() > 23 && s.toString().substring(0, 23).equalsIgnoreCase("https://m.facebook.com/")) ||
                                    (s.length() > 25 && s.toString().substring(0, 25).equalsIgnoreCase("https://www.facebook.com/")) || (s.length() > 13 && s.toString().substring(0, 13).equalsIgnoreCase("facebook.com/")) ||
                                    (s.length() > 15 && s.toString().substring(0, 15).equalsIgnoreCase("m.facebook.com/")) || (s.length() > 7 && s.toString().substring(0, 7).equalsIgnoreCase("fb.com/")) ||
                                    (s.length() > 11 && s.toString().substring(0, 11).equalsIgnoreCase("www.fb.com/"))*/ ClipboardType.isFacebook(s.toString())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.FACEBOOK);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_facebook));
                                    }
                                } else if (ClipboardType.isLinkedIn(s.toString())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.LINKEDIN);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_linkedin));
                                    }
                                } else if (ClipboardType.isEmail(s.toString().trim())) {


                                    if (parsingSocial != null)
                                        parsingSocial.cancel(true);
                                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                                    floatingActionMenu.setVisibility(View.VISIBLE);
                                    if (!ProfileFragment.profile && !ContactsFragment.createContact) {
                                        if (!mergedContacts) {
                                            if (s.length() == 1 && checkInput) {
                                                contactAdapter.setListSaveSort();
                                                checkInput = false;
                                            }
                                            ((ContactAdapter) containerContacts.getAdapter()).searchByEmail(s.toString());

                                        } else
                                            ((ContactAdapter) containerContacts.getAdapter()).searchByEmailFromSelected(s.toString());
                                    }


                                } else if (ClipboardType.isTwitter(s.toString().trim())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.TWITTER);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twit_main));
                                    }
                                } else if (ClipboardType.isYoutube(s.toString().trim())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.YOUTUBE);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_youtube_48));
                                    }
                                } else if (ClipboardType.isMedium(s.toString().trim())) {
                                    if (MainActivity.hasConnection(getContext())) {
                                        checkConnectionFroParsing(true);
                                        if (parsingSocial != null)
                                            parsingSocial.cancel(true);

                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.GONE);
                                        parsingSocial = new ParsingSocial(s.toString(), SocialEnums.MEDIUM);
                                        parsingSocial.execute();
                                    } else {
                                        checkConnectionFroParsing(false);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                                        ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.medium_size_64));
                                    }
                                } else {
                                    // else{
                                    if (parsingSocial != null)
                                        parsingSocial.cancel(true);
                                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                                    //getActivity().findViewById(R.id.fab).setVisibility(View.VISIBLE);
                                    // floatingActionMenu.close(false);
                                    floatingActionMenu.setVisibility(View.VISIBLE);
                                    // }
                                    if (!ProfileFragment.profile && !ContactsFragment.createContact) {
                                        if (!mergedContacts) {
                                            if (s.length() == 1 && checkInput) {
                                                contactAdapter.setListSaveSort();
                                                checkInput = false;
                                            }
                                            ((ContactAdapter) containerContacts.getAdapter()).searchByStr(s.toString().trim());

                                        } else
                                            ((ContactAdapter) containerContacts.getAdapter()).searchByStrFromSelected(s.toString().trim());
                                    }
                                }


                            } else {

                                getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);
                                getActivity().findViewById(R.id.plane_icon).setVisibility(View.GONE);
                                getActivity().findViewById(R.id.search_magic_icon).setVisibility(View.VISIBLE);

                                if (checkClick)
                                    //if(!ProfileFragment.profile) {
                                    if (!mergedContacts) {
                                        //   ((ContactAdapter) containerContacts.getAdapter()).searchByStr(s.toString());


                                        if (contactAdapter.getListSaveSort() != null && !contactAdapter.getListSaveSort().isEmpty()) {
                                            System.out.println("LSIT SAVE");

                                            if ((!((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked()
                                                    || ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()
                                                    || ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                                    || ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                                    || ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()
                                                    || ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                                                    || ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                                    || ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) && getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.VISIBLE && !HASHTAG_ADAPTER.allHashtagsCheck)) {
                                                System.out.println("LSIT SAVE GONE");
                                                contactAdapter.setSaveSortToList();
                                            } else if ((getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.VISIBLE || (getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.GONE && (ProfileFragment.profile || ContactsFragment.createContact))) && (listForSelect != null && !listForSelect.isEmpty())) {
                                                contactAdapter.setListOfListOFrSelect();
                                            } else if (((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                                                getActivity().findViewById(R.id.companies_fav_check_only).callOnClick();
                                            } else {
                                                if (getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.GONE) {
                                                    System.out.println("LSIT SAVE GONE");
                                                    contactAdapter.setSaveSortToList();
                                                }
                                            }
                                        } else {
                                            System.out.println("LSIT DEFAULT");


                                            contactAdapter.defaultListContacts();

                                        }

                                        //contactAdapter.clearListSort();

                                    } else {
                                        //    ((ContactAdapter) containerContacts.getAdapter()).searchByStrFromSelected(s.toString());
                                        contactAdapter.selectedListContacts();
                                    }
                                //}

                            }
                            checkClick = true;

                            if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0) {

                                getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.VISIBLE);
                                getActivity().findViewById(R.id.plane_icon).setVisibility(View.VISIBLE);
                                getActivity().findViewById(R.id.search_magic_icon).setVisibility(View.GONE);

                                getActivity().findViewById(R.id.text_reset_btn).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        floatingActionMenu.close(false);
                                        floatingActionMenu.setVisibility(View.VISIBLE);
                                        getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
                                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                                        getActivity().findViewById(R.id.countSearchContacts).setVisibility(View.GONE);

                                        allSearch = false;

                                        //if(!ProfileFragment.profile) {
                                        if (!mergedContacts) {

                                            if (contactAdapter.getListSaveSort() != null && !contactAdapter.getListSaveSort().isEmpty()) {
                                                if (getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.GONE || (!((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked()
                                                        || ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()
                                                        || ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                                                        || ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                                                        || ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()
                                                        || ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                                                        || ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()
                                                        || ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked())
                                                        && getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.VISIBLE && !HASHTAG_ADAPTER.allHashtagsCheck)) {
                                                    contactAdapter.setSaveSortToList2();

                                                    System.out.println("LSIT SAVE GONE 2 2");


                                                }
                                                System.out.println("LSIT SAVE GONE 2");
                                            } else {

                                                contactAdapter.defaultListContacts();
                                                System.out.println("LSIT SAVE GONE 3");

                                            }

                                            //contactAdapter.clearListSort();

                                            getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);
                                        } else {
                                            System.out.println("MERGE CONT 2019");
                                            contactAdapter.selectedListContacts();
                                            getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);
                                        }
                                        //}
                                        System.out.println("RESEEEEEEEEEEEET TEXT");
                                        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                                        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).requestFocus();
                                        checkClick = false;
                                    }
                                });


                                getActivity().findViewById(R.id.textExtractSocial).setOnTouchListener(new View.OnTouchListener() {
                                    @Override
                                    public boolean onTouch(View view, MotionEvent motionEvent) {
                                        TextView textView = ((TextView) getActivity().findViewById(R.id.textExtractSocial));
                                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                                        FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.frameTextExtract));
                                        switch (motionEvent.getAction()) {
                                            case MotionEvent.ACTION_DOWN: {
                                                OnTouchMethodExtract(textView);
                                                break;
                                            }
                                            case MotionEvent.ACTION_UP: {
                                                OnUpTouchMethodExtract(textView);
                                                break;
                                            }
                                            case MotionEvent.ACTION_CANCEL: {
                                                OnCalcelTouchMethodExtract(textView);
                                                break;
                                            }
                                            case MotionEvent.ACTION_MOVE: {
                                                OnMoveTouchMethodExtract(textView, motionEvent);
                                                break;
                                            }
                                        }
                                        return false;
                                    }
                                });


                            }
                            checkS = false;
                        }
                    } else {
                        getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);
                        getActivity().findViewById(R.id.plane_icon).setVisibility(View.GONE);
                        getActivity().findViewById(R.id.search_magic_icon).setVisibility(View.VISIBLE);
                    }
                } catch (NullPointerException e) {
                    e.printStackTrace();
                }


            }
        });

        getActivity().findViewById(R.id.allContactsLL).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // if(((CheckBox)getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(false);
                //  } else {
                ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                //  }


            }
        });

        getActivity().findViewById(R.id.plane_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                //======

                setGlobalSearch();


            }
        });


        getActivity().findViewById(R.id.mergeData).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                contactAdapter.mergeContacts();
            }
        });

        /*getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v -> {
            closeOtherPopup();
            stopSelectionMode();
        });*/

        getActivity().findViewById(R.id.remindPopup).setOnClickListener(v -> {
        });
        getActivity().findViewById(R.id.frame_select_menu).setOnClickListener(v -> {
        });
        getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(v -> {
        });
        getActivity().findViewById(R.id.fastEditPopup).setOnClickListener(v -> {
        });
        getActivity().findViewById(R.id.statusPopup).setOnClickListener(v -> {
        });

        getActivity().findViewById(R.id.googleItemFAB).setOnClickListener(v -> {
            Uri uri = Uri.parse("http://www.google.com/#q=" + ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText());
            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
        });

        getActivity().findViewById(R.id.googleMapsFAB).setOnClickListener(v -> {
            Uri uri = Uri.parse("https://www.google.by/maps/search/" + ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText());
            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
        });

        getActivity().findViewById(R.id.create_item).setOnClickListener(v -> {
            showCreatePopup();
        });

        getActivity().findViewById(R.id.googleTranslateFAB).setOnClickListener(v -> {
            Uri uri = Uri.parse("https://translate.google.com/?hl=ru#en/ru/" + ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText());
            Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(intent);
        });


        getActivity().findViewById(R.id.share_contacts_menu).setOnClickListener(v -> {
            contactAdapter.shareSelectedContacts();
        });

        getActivity().findViewById(R.id.back_contacts).setOnClickListener(v -> {
            contactAdapter.removeLastSelectedContact();
        });

        getActivity().findViewById(R.id.sortByTime).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ((TextView) getActivity().findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) getActivity().findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                contactAdapter.sortByTime();

                if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null) {
                    kanbanAdapter_1.sortByTime();
                    kanbanAdapter_2.sortByTime();
                    kanbanAdapter_3.sortByTime();
                    kanbanAdapter_4.sortByTime();
                }
            }
        });

        getActivity().findViewById(R.id.delete_selected_contacts).setOnClickListener(v -> {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
                askWritePermission();
            } else {
                String text = "Do you want to delete contact?";
                if (contactAdapter.getSelectedContacts().size() > 1)
                    text = "Do you want to delete contacts?";

                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                        getActivity());
                alertDialogBuilder.setTitle(text);
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Delete", (dialog, id) -> {
                            System.out.println("S1");

                            if (ContactsService.checkLoad) {
                                ContactsService.CONTACT_COUNT_OF_DELETE -= contactAdapter.getSelectedContacts().size();
                            }

                            System.out.println("S2");

                            ArrayList<String> listToEdit = new ArrayList<>();
                            ArrayList<Boolean> listToEditCheck = new ArrayList<>();

                            ArrayList<Contact> list = contactAdapter.getSelectedContacts();
                            for (int i = 0; i < list.size(); i++) {
                                System.out.println("|||||||||||||||||||||||||||||||||||||||||||||| = " + list.get(i).toString());
                                listToEdit.add(list.get(i).getName());

                                if (list.get(i).listOfContacts == null || list.get(i).listOfContacts.isEmpty())
                                    listToEditCheck.add(true);
                                else
                                    listToEditCheck.add(false);
                            }


                            for (int i = 0; i < list.size(); i++) {
                                if (list.get(i).isValid()) {
                                    System.out.println("CONTACT !!!!!!!!!!!! = " + list.get(i).toString());
                                    if (list.get(i).getCompany() == null && (list.get(i).listOfContacts == null || list.get(i).listOfContacts.isEmpty())) {
                                        System.out.println("REMOVE +++++++ start ID = " + list.get(i).getIdContact());

                                        String idC = list.get(i).getIdContact();
                                        new Thread(new Runnable() {
                                            @Override
                                            public void run() {
                                                contactsService.deleteContact(idC);
                                            }
                                        }).start();


                                        System.out.println("REMOVE END");
                                        contactAdapter.removeContactById(list.get(i));
                                        ContactCacheService.removeContactById(list.get(i));
                                    } else if (list.get(i).getCompany() != null && !list.get(i).getCompany().isEmpty()) {

                                        System.out.println("Delete and company");
                                        Contact c = ContactCacheService.getCompany(list.get(i).getCompany());
                                        contactAdapter.removeContactById(list.get(i));

                                        String idC = list.get(i).getIdContact();
                                        new Thread(new Runnable() {
                                            @Override
                                            public void run() {
                                                contactsService.deleteContact(idC);
                                            }
                                        }).start();


                                        if (c != null && c.listOfContacts != null && c.listOfContacts.size() == 1) {
                                            contactAdapter.removeContactById(c);
                                        }

                                        ArrayList<String> listToEdit2 = new ArrayList<>();
                                        ArrayList<Boolean> listToEditCheck2 = new ArrayList<>();
                                        listToEdit2.add(list.get(i).getName());

                                        if (c.listOfContacts == null || c.listOfContacts.isEmpty())
                                            listToEditCheck2.add(true);
                                        else
                                            listToEditCheck2.add(false);


                                        MainActivity.listToManyUpdateFile.add("Delete");
                                        MainActivity.listToManyUpdateFile.add(listToEdit2);
                                        MainActivity.listToManyUpdateFile.add(listToEditCheck2);

                                        ArrayList<String> listToEdit3 = new ArrayList<>();
                                        ArrayList<Boolean> listToEditCheck3 = new ArrayList<>();

                                        listToEdit3.add(c.getName());
                                        listToEditCheck3.add(false);

                                        boolean checkDelete = ContactCacheService.removeContactFromCompany(c, list.get(i));
                                        if (checkDelete) {
                                            MainActivity.listToManyUpdateFile.add("Delete");
                                            MainActivity.listToManyUpdateFile.add(listToEdit3);
                                            MainActivity.listToManyUpdateFile.add(listToEditCheck3);
                                        } else {
                                            MainActivity.listToManyUpdateFile.add("EDIT");
                                            MainActivity.listToManyUpdateFile.add(listToEdit3);
                                            MainActivity.listToManyUpdateFile.add(listToEditCheck3);
                                        }
                                        ContactCacheService.removeContactById(list.get(i));

                                    } else if (list.get(i).listOfContacts != null && !list.get(i).listOfContacts.isEmpty()) {

                                        ArrayList<String> listToEdit3 = new ArrayList<>();
                                        ArrayList<Boolean> listToEditCheck3 = new ArrayList<>();

                                        listToEdit3.add(list.get(i).getName());
                                        listToEditCheck3.add(false);

                                        MainActivity.listToManyUpdateFile.add("Delete");
                                        MainActivity.listToManyUpdateFile.add(listToEdit3);
                                        MainActivity.listToManyUpdateFile.add(listToEditCheck3);

                                        System.out.println("DEL 1");
                                        contactAdapter.removeContactById(list.get(i));


                                        ArrayList<String> listToEdit4 = new ArrayList<>();
                                        ArrayList<Boolean> listToEditCheck4 = new ArrayList<>();

                                        for (int j = 0; j < list.get(i).listOfContacts.size(); j++) {
                                            //  System.out.println("CONTAINS NAME = "+list.get(i).listOfContacts.get(j).getName()+", contain = "+list.contains(list.get(i).listOfContacts.get(j)));
                                            listToEdit4.add(list.get(i).listOfContacts.get(j).getName());
                                            listToEditCheck4.add(true);

                                            //  String idContact = contactsService.getIdContactByName(list.get(i).listOfContacts.get(j).getName());
                                            //   System.out.println("ID FOR UPDATE = "+list.get(i).listOfContacts.get(j).getIdContact()+"company = "+list.get(i).getName());


                                            String idC = list.get(i).listOfContacts.get(j).getIdContact();
                                            String nameC = list.get(i).getName();
                                            new Thread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    contactsService.updateCompany(idC, nameC, null);
                                                }
                                            }).start();

                                        }

                                        MainActivity.listToManyUpdateFile.add("EDIT");
                                        MainActivity.listToManyUpdateFile.add(listToEdit4);
                                        MainActivity.listToManyUpdateFile.add(listToEditCheck4);

                                        System.out.println("DEL 2");
                                        contactAdapter.changeFromRemoveCompany(list.get(i));
                                        System.out.println("DEL 3");
                                        ContactCacheService.removeCompany(list.get(i).getName());


                                        System.out.println("DEL 4");


                                    }
                                }
                                //contactAdapter.notifyDataSetChanged();
                            }


                            MainActivity.listToManyUpdateFile.add("Delete");
                            MainActivity.listToManyUpdateFile.add(listToEdit);
                            MainActivity.listToManyUpdateFile.add(listToEditCheck);


                            //=====================END REMOVE FROM REALM
                            //    System.out.println("SSS@@@@@@@@ 222 = "+contactAdapter.getSavedList().size() );
                            System.out.println("S4");
                            //   this.listOfContacts.clear();
                            //   this.listOfContacts.addAll(contactAdapter.getSavedList());
                            //    System.out.println("List 1 = "+listOfContacts.size());
                            // listOfContacts = contactAdapter.getSavedList();
                            //  listOfContacts.clear();
                            listOfContacts.clear();
                            listOfContacts.addAll(contactAdapter.getSavedList());
                            //   System.out.println("List 2 = "+listOfContacts.size());

                            //  System.out.println("SSSSSSSSSSSSSSSSSSSS   "+contactAdapter.getSavedList().size());

                            //contactAdapter.removeSelectedContacts();

                            boolean checkFrame = false;
                            if (getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.VISIBLE)
                                checkFrame = true;

                            //stopSelectionModeNEW();

                            stopSelectionModeNEWWithoutHash();

                            if (checkFrame) {
                                getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
                                getActivity().findViewById(R.id.typeHash).setVisibility(View.GONE);
                            }

                            Toast toast = Toast.makeText(mainView.getContext(), "Delete success", Toast.LENGTH_SHORT);
                            toast.show();


                            calculateTypeCountNEW();
                            //  initRecyclerHashTags();
                            new Thread(new Runnable() {
                                @Override
                                public void run() {
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            initFavoritesPop();
                                        }
                                    });
                                }
                            }).start();

                            //  contactAdapter.stopSelectionMode();


                            ((Postman) getActivity()).getMenu().getItem(0).setVisible(true);

                            ((Postman) getActivity()).getMenu().getItem(2).setVisible(false);
                            ((Postman) getActivity()).getMenu().getItem(3).setVisible(false);
                            ((Postman) getActivity()).getMenu().getItem(4).setVisible(false);

                            toolbarC.setNavigationIcon(R.drawable.icn_menu);


                            toolbarC.setNavigationOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    System.out.println("Drawer 4");
                                    EventBus.getDefault().post(new OpenDriver());
                                    EventBus.getDefault().post(new OpenDriver());
                                }


                            });

                            toolbarC.findViewById(R.id.toolbar_title).setVisibility(View.VISIBLE);
                            ((TextView) toolbarC.findViewById(R.id.cancel_toolbar)).setTextSize(14);
                            ((TextView) toolbarC.findViewById(R.id.cancel_toolbar)).setVisibility(View.GONE);
                            ((TextView) toolbarC.findViewById(R.id.cancel_toolbar)).setText("CANCEL");


                           /* new Thread(new Runnable() {
                                @Override
                                public void run() {
                                    EventBus.getDefault().post(new UpdateFile());
                                }
                            }).start();*/

                        })
                        .setNegativeButton("Cancel", (dialog, id) -> dialog.cancel());

                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();
            }
        });
        getActivity().findViewById(R.id.exportButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showExportPopup();
            }
        });


        getActivity().findViewById(R.id.editSelectMenu).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showFastEditPopup(contactAdapter.getSelectedContacts().get(0));


                fastEditPopup.findViewById(R.id.nameContact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        System.out.println("CLICK NAME EDIIIT");
                        getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
                    }
                });


            }
        });


        getActivity().findViewById(R.id.delete_selected_contacts).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) getActivity().findViewById(R.id.textDeleteSelectMenu));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.delete_selected_contacts));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        getActivity().findViewById(R.id.mergeData).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) getActivity().findViewById(R.id.mergeTxt));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.mergeData));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        getActivity().findViewById(R.id.editSelectMenu).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) getActivity().findViewById(R.id.editTextSelectMenu));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.editSelectMenu));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        getActivity().findViewById(R.id.share_contacts_menu).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) getActivity().findViewById(R.id.textShareSelect));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.share_contacts_menu));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        getActivity().findViewById(R.id.back_contacts).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) getActivity().findViewById(R.id.textBackSelectMenu));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) getActivity().findViewById(R.id.back_contacts));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


    }


    public void setGlobalSearch() {
        String[] hashTagSplit = magicCMD.getHashTag().split("");
        if (hashTagSplit[0].compareTo("#") != 0)
            magicCMD.setHashTag("#" + magicCMD.getHashTag());

        String[] maskSplit = magicCMD.getMaskFindName().split("");
        if (maskSplit[0].compareTo("*") == 0)
            magicCMD.setMaskFindName(magicCMD.getMaskFindName().substring(1, magicCMD.getMaskFindName().length()));

        System.out.println(" MASK: " + magicCMD.getMagicStringCMDEnum());

        switch (magicCMD.getMagicStringCMDEnum()) {
            case NONE: {
                break;
            }
            case SETTAG_FOR_ALL_CONTACT: {
                for (Contact contact : listOfContacts) {
                    if (!contact.getListOfHashtags().contains(new HashTag(magicCMD.getHashTag())))
                        contact.getListOfHashtags().add(new HashTag(magicCMD.getHashTag()));
                }
                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().clear();
                ContactCacheService.updateCacheContacts(listOfContacts, mainView.getContext());
                //EventBus.getDefault().post(new UpdateFile());
                setContacts();
                initAdapter(false);
                System.out.println("TTTTTTTTTTTTTT");
                initContactsBar();
                initRecyclerHashTags();
                initFavoritesPop();
                Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                break;
            }
            case SETTAG_FOR_ALL_CONTACT_BY_MASK: {
                for (Contact contact : listOfContacts) {
                    if (!contact.getListOfHashtags().contains(new HashTag(magicCMD.getHashTag())) && contact.getName().toLowerCase().contains(magicCMD.getMaskFindName().toLowerCase())) {
                        contact.getListOfHashtags().add(new HashTag(magicCMD.getHashTag()));
                    }
                }
                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().clear();
                ContactCacheService.updateCacheContacts(listOfContacts, mainView.getContext());
                //EventBus.getDefault().post(new UpdateFile());
                setContacts();
                initAdapter(false);
                System.out.println("GGGGGGGGGGGGGGGGG");
                initContactsBar();
                initRecyclerHashTags();
                initFavoritesPop();
                Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                break;
            }
        }

        if (contactAdapter.getSizeSelectlist() > 0) {
            if (String.valueOf(magicSplit[0].charAt(0)).compareTo("#") == 0) {
                ArrayList<String> hashtagToSave = new ArrayList<String>();
                for (int indexI = 0; indexI < magicSplit.length; indexI++) {
                    if (String.valueOf(magicSplit[indexI].charAt(0)).compareTo("#") == 0 && magicSplit[indexI].length() > 1)
                        hashtagToSave.add(magicSplit[indexI]);
                }
                String count = "";
                String c = "contact";
                if (contactAdapter.getSelectedContacts() != null && contactAdapter.getSelectedContacts().size() > 1) {
                    count = String.valueOf(contactAdapter.getSelectedContacts().size()) + " ";
                    c = "contacts";
                }
                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                        getActivity());
                alertDialogBuilder.setTitle("Do you want to add new hashtags to " + count + "" + c + "?");
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Yes", (dialog, id) -> {
                            System.out.println("ADD TO ONE CONTA HASH");
                            getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);

                            contactAdapter.addHashtagsToSelectedContacts(hashtagToSave);

                            changeListAfterRemoveText = false;

                            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).requestFocus();

                            changeListAfterRemoveText = true;
                            mergedContacts = false;
                            initRecyclerHashTags();
                            mergedContacts = true;

                            //   Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                        })
                        .setNegativeButton("No", (dialog, id) -> dialog.cancel());

                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();

            }
        } else if (contactAdapter.getSelectContactID() != null && contactAdapter.getSelectContactID() != "") {
            ArrayList<String> hashtagToSave = new ArrayList<String>();
            for (int indexI = 0; indexI < magicSplit.length; indexI++) {
                if (String.valueOf(magicSplit[indexI].charAt(0)).compareTo("#") == 0 && magicSplit[indexI].length() > 1)
                    hashtagToSave.add(magicSplit[indexI]);
            }


            Realm realm = Realm.getDefaultInstance(); //-


            String[] splitNote = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().split("/");
            final String[] noteLink = {((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()};


            String mainWay = "";
            if (noteLink[0].contains(".com"))
                mainWay = noteLink[0].substring(0, noteLink[0].indexOf(".com") + 4);
            else if (noteLink[0].contains(".org"))
                mainWay = noteLink[0].substring(0, noteLink[0].indexOf(".org") + 4);

            System.out.println("MAINWAY =" + mainWay);


            if ((mainWay.toLowerCase().equals("https://fb.com") || mainWay.toLowerCase().equals("fb.com") || mainWay.toLowerCase().equals("facebook.com") || mainWay.toLowerCase().equals("https://facebook.com") || mainWay.toLowerCase().equals("https://m.facebook.com") || mainWay.toLowerCase().equals("m.facebook.com") || mainWay.toLowerCase().equals("https://www.facebook.com")) || (mainWay.toLowerCase().equals("vk.com") || mainWay.toLowerCase().equals("https://vk.com") || mainWay.toLowerCase().equals("https://www.vk.com") || mainWay.toLowerCase().equals("m.vk.com") || mainWay.toLowerCase().equals("https://www.vk.com")) || (mainWay.toLowerCase().equals("linkedin.com") || mainWay.toLowerCase().equals("https://www.linkedin.com")) || (mainWay.toLowerCase().equals("instagram.com") || mainWay.toLowerCase().equals("https://www.instagram.com")) || (mainWay.toLowerCase().equals("viber.com") || mainWay.toLowerCase().equals("https://www.viber.com")) || (mainWay.toLowerCase().equals("whatsapp.com") || mainWay.toLowerCase().equals("https://www.whatsapp.com")) || (mainWay.toLowerCase().equals("telegram.org") || mainWay.toLowerCase().equals("https://telegram.org")) || (mainWay.toLowerCase().equals("skype.com") || mainWay.toLowerCase().equals("https://www.skype.com"))) {
                if (mainWay.length() < noteLink[0].length()) {

                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                            getActivity());
                    alertDialogBuilder.setTitle("Do you want to add new info to contact?");
                    String finalMainWay = mainWay;
                    alertDialogBuilder
                            .setCancelable(false)
                            .setPositiveButton("Yes", (dialog, id) -> {


                                Contact contact;
                                try {
                                    contact = ContactCacheService.getContactById(Long.valueOf(contactAdapter.getSelectContactID()));
                                } catch (Exception e) {
                                    contact = ContactCacheService.getCompany(contactAdapter.getSelectContactID());
                                }
                                if (contact == null)
                                    contact = ContactCacheService.getCompany(contactAdapter.getSelectContactID());

                                if (contact.getSocialModel() == null) {
                                    realm.beginTransaction();
                                    RealmObject realmObj = realm.createObject(SocialModel.class);
                                    contact.setSocialModel((SocialModel) realmObj);
                                    realm.commitTransaction();

                                }


                                if (splitNote.length > 1) {
                                    // realm.beginTransaction();
                                    switch (finalMainWay.toLowerCase()) {
                                        case "fb.com":
                                        case "https://fb.com":
                                        case "facebook.com":
                                        case "https://facebook.com":
                                        case "https://www.facebook.com":
                                        case "m.facebook.com":
                                        case "https://m.facebook.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null && contact.getSocialModel().getFacebookLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getFacebookLink());
                                                }

                                            if (noteLink[0].contains("?") && !noteLink[0].contains("watch?")) {
                                                int ind = noteLink[0].indexOf("?");
                                                if (ind != -1)
                                                    noteLink[0] = noteLink[0].substring(0, ind);
                                            }

                                            contact.getSocialModel().setFacebookLink(noteLink[0]);
                                            if (socialPopup != null)
                                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                                            contact.hasFacebook = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //  EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "vk.com":
                                        case "https://vk.com":
                                        case "https://www.vk.com":
                                        case "m.vk.com":
                                        case "https://m.vk.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getVkLink() != null && contact.getSocialModel().getVkLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getVkLink());
                                                }

                                            if (noteLink[0].contains("?") && !noteLink[0].contains("watch?")) {
                                                int ind = noteLink[0].indexOf("?");
                                                if (ind != -1)
                                                    noteLink[0] = noteLink[0].substring(0, ind);
                                            }


                                            contact.getSocialModel().setVkLink(noteLink[0]);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                            } catch (Exception e) {

                                            }
                                            contact.hasVk = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //  EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "linkedin.com":
                                        case "https://www.linkedin.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null && contact.getSocialModel().getLinkedInLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getLinkedInLink());
                                                }

                                            if (noteLink[0].contains("?") && !noteLink[0].contains("watch?")) {
                                                int ind = noteLink[0].indexOf("?");
                                                if (ind != -1)
                                                    noteLink[0] = noteLink[0].substring(0, ind);
                                            }


                                            contact.getSocialModel().setLinkedInLink(noteLink[0]);
                                            try {


                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                                            } catch (Exception e) {

                                            }
                                            contact.hasLinked = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            // EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "instagram.com":
                                        case "https://www.instagram.com":
                                        case "https://instagram.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null && contact.getSocialModel().getInstagramLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getInstagramLink());
                                                }

                                            String username = noteLink[0];/*.substring(noteLink.indexOf(".com")+5, noteLink.length());*/
                                                   /* if(username.charAt(username.length()-1) == '/')
                                                        username = username.substring(0,username.length()-1);
                                                    System.out.println("USERNAME INSTA = "+username);*/

                                            if (username.contains("?utm")) {
                                                int ind = username.indexOf('?');
                                                if (ind != -1)
                                                    username = username.substring(0, ind);

                                            }

                                            if (!username.toLowerCase().contains("instagram.com")) {
                                                username = "https://instagram.com/" + username;
                                            }

                                            if (username.contains("?") && !username.contains("watch?")) {
                                                int ind = username.indexOf("?");
                                                if (ind != -1)
                                                    username = username.substring(0, ind);
                                            }

                                            contact.getSocialModel().setInstagramLink(username);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                                            } catch (Exception e) {

                                            }
                                            contact.hasInst = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //   EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "viber.com":
                                        case "https://www.viber.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && contact.getSocialModel().getViberLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getViberLink());
                                                }

                                            contact.getSocialModel().setViberLink(noteLink[0]);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                            } catch (Exception e) {

                                            }
                                            contact.hasViber = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //   EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "whatsapp.com":
                                        case "https://www.whatsapp.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && contact.getSocialModel().getWhatsappLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getWhatsappLink());
                                                }

                                            contact.getSocialModel().setWhatsappLink(noteLink[0]);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                            } catch (Exception e) {

                                            }

                                            contact.hasWhatsapp = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //   EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "telegram.org":
                                        case "https://telegram.org": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && contact.getSocialModel().getTelegramLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getTelegramLink());
                                                }

                                            contact.getSocialModel().setTelegramLink(noteLink[0]);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                                            } catch (Exception e) {

                                            }
                                            contact.hasTelegram = true;
                                            realm.commitTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //    EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                        case "skype.com":
                                        case "https://www.skype.com": {

                                            if (contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && contact.getSocialModel().getSkypeLink().equals(noteLink[0])) {
                                                Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            realm.beginTransaction();

                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                if (contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                                                    contactsService.deleteNoteContact(contact.getIdContact(), contact.getSocialModel().getSkypeLink());
                                                }

                                            String username = noteLink[0].substring(noteLink[0].indexOf(".com") + 5, noteLink[0].length());
                                            if (username.charAt(username.length() - 1) == '/')
                                                username = username.substring(0, username.length() - 1);
                                            System.out.println("USERNAME Stype = " + username);
                                            contact.getSocialModel().setSkypeLink(username);
                                            try {
                                                if (socialPopup != null)
                                                    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                            } catch (Exception e) {

                                            }
                                            contact.hasSkype = true;
                                            realm.commitTransaction();
                                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                                contactsService.addNoteToContact(contact.getIdContact(), noteLink[0], contact.getName());
                                            ContactCacheService.updateContact(contact, mainView.getContext());
                                            //    EventBus.getDefault().post(new UpdateFile());
                                            break;
                                        }
                                    }
                                    //  realm.commitTransaction();
                                }
                                //  ((EditText)getActivity().findViewById(R.id.magic_edit_text)).getText().clear();


                                try {
                                    contact = ContactCacheService.getContactById(Long.valueOf(contactAdapter.getSelectContactID()));
                                } catch (Exception e) {
                                    contact = ContactCacheService.getCompany(contactAdapter.getSelectContactID());
                                }
                                if (contact == null)
                                    contact = ContactCacheService.getCompany(contactAdapter.getSelectContactID());


                                if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                                    if (socialPopup != null && socialPopup.getVisibility() == View.VISIBLE) {
                                        showProfilePopUp(contact);
                                        showSocialPopup(contact);
                                    } else
                                        showProfilePopUp(contact);

                                } else if (contact.listOfContacts != null && !contact.listOfContacts.isEmpty()) {
                                    if (socialPopup != null && socialPopup.getVisibility() == View.VISIBLE) {
                                        showCompanyPopup(contact);
                                        showSocialPopup(contact);
                                    } else
                                        showCompanyPopup(contact);

                                }


                                //   changeListAfterRemoveText = false;

                                    /*if (!mergedContacts) {
                                        contactAdapter.defaultListContacts();*/
                                changeListAfterRemoveText = false;
                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).requestFocus();
                                changeListAfterRemoveText = true;
                                contactAdapter.defaultListContacts();

                                /*ArrayList<String> listEdit = new ArrayList<>();
                                ArrayList<Boolean> listEditBool = new ArrayList<>();

                                listEdit.add(contact.getName());
                                if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                    listEditBool.add(true);
                                else
                                    listEditBool.add(false);

                                MainActivity.listToManyUpdateFile.add("EDIT");
                                MainActivity.listToManyUpdateFile.add(listEdit);
                                MainActivity.listToManyUpdateFile.add(listEditBool);*/

                                //EventBus.getDefault().post(new UpdateFile());
                                //   changeListAfterRemoveText = true;

                                //   changeListAfterRemoveText = true;


                            })
                            .setNegativeButton("No", (dialog, id) -> dialog.cancel());

                    AlertDialog alertDialog = alertDialogBuilder.create();
                    alertDialog.show();
                }

            } else if (String.valueOf(magicSplit[0].charAt(0)).compareTo("#") == 0) {


                boolean checkToAdd = true;

                Contact contact1;
                try {
                    contact1 = ContactCacheService.getContactById(Long.valueOf(contactAdapter.getSelectContactID()));
                } catch (Exception e) {
                    contact1 = ContactCacheService.getCompany(contactAdapter.getSelectContactID());
                }
                if (contact1 == null)
                    contact1 = ContactCacheService.getCompany(contactAdapter.getSelectContactID());

                contactAdapter.addToSelectList(contact1);


                for (Contact contact : contactAdapter.getSelectedContacts()) {
                    for (String hashtag : hashtagToSave) {

                        if (hashtagToSave.size() == 1 && contactAdapter.getSelectedContacts().size() == 1) {

                            if (contact.getListOfHashtags().contains(new HashTag(hashtag.trim()))) {
                                Toast.makeText(mainView.getContext(), "Hashtag already exist", Toast.LENGTH_SHORT).show();
                                contactAdapter.getSelectedContacts().clear();
                                checkToAdd = false;
                            }
                            //    else
                            //        Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();


                        }


                    }

                }


                contactAdapter.getSelectedContacts().clear();
                if (checkToAdd) {

                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                            getActivity());
                    alertDialogBuilder.setTitle("Do you want to add new hashtags to contact?");
                    alertDialogBuilder
                            .setCancelable(false)
                            .setPositiveButton("Yes", (dialog, id) -> {
                                System.out.println("ADD TO XXX");
                                getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);
                                Contact contact11;
                                try {
                                    contact11 = ContactCacheService.getContactById(Long.valueOf(contactAdapter.getSelectContactID()));
                                } catch (Exception e) {
                                    contact11 = ContactCacheService.getCompany(contactAdapter.getSelectContactID());
                                }

                                contactAdapter.addToSelectList(contact11);
                                contactAdapter.addHashtagsToSelectedContacts(hashtagToSave);
                                contactAdapter.clearSelectList();


                                try {
                                    contact11 = ContactCacheService.getContactById(Long.valueOf(contactAdapter.getSelectContactID()));
                                } catch (Exception e) {
                                    contact11 = ContactCacheService.getCompany(contactAdapter.getSelectContactID());
                                }
                                if (contact11 == null)
                                    contact11 = ContactCacheService.getCompany(contactAdapter.getSelectContactID());

                                if (contact11.listOfContacts == null || contact11.listOfContacts.isEmpty())
                                    showProfilePopUp(contact11);
                                else if (contact11.listOfContacts != null && !contact11.listOfContacts.isEmpty())
                                    showCompanyPopup(contact11);

                                changeListAfterRemoveText = false;

                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).requestFocus();

                                changeListAfterRemoveText = true;

                                initRecyclerHashTags();


                               /* ArrayList<String> listEdit = new ArrayList<>();
                                ArrayList<Boolean> listEditBool = new ArrayList<>();
                                listEdit.add(contact11.getName());
                                if (contact11.listOfContacts == null || contact11.listOfContacts.isEmpty())
                                    listEditBool.add(true);
                                else
                                    listEditBool.add(false);

                                MainActivity.listToManyUpdateFile.add("EDIT");
                                MainActivity.listToManyUpdateFile.add(listEdit);
                                MainActivity.listToManyUpdateFile.add(listEditBool);*/

                                //EventBus.getDefault().post(new UpdateFile());


                                //  Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                            })
                            .setNegativeButton("No", (dialog, id) -> dialog.cancel());

                    AlertDialog alertDialog = alertDialogBuilder.create();
                    alertDialog.show();
                }
            }

            realm.close();

        } else {
            System.out.println("FIND BY ALL DATA");

            if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim().length() > 0) {
                System.out.println("ADD HISTORY 3");
                EventBus.getDefault().post(new AddHistoryEntry(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
            }


            if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim().length() > 0) {
                allSearch = true;
                ((ContactAdapter) containerContacts.getAdapter()).searchByStrAllData(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim());
            }

        }
    }

    public void searcByAll() {
        System.out.println("FIND BY ALL DATA");

        if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim().length() > 0) {
            System.out.println("ADD HISTORY 3");
            EventBus.getDefault().post(new AddHistoryEntry(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
        }


        if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim().length() > 0) {
            allSearch = true;
            ((ContactAdapter) containerContacts.getAdapter()).searchByStrAllData(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim());
        }
    }

    public void updateCountSearchConatcts() {
        ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setText(contactAdapter.getListOfContacts().size() + " matched entries");
        getActivity().findViewById(R.id.countSearchContacts).setVisibility(View.VISIBLE);
    }

    public void OnTouchMethodExtract(TextView textview) {
        System.out.println("DOWN");
        checkClick = false;
        System.out.println("COLOR = " + textview.getTextColors().getDefaultColor());
        int colorFrom;
        String s = getActivity().getResources().getResourceEntryName(textview.getId());

        colorFrom = getActivity().getResources().getColor(R.color.primary);

        int colorTo = getActivity().getResources().getColor(R.color.md_deep_orange_300);
        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(50); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textview.setTextColor((int) animator.getAnimatedValue());
                //  imageview.setColorFilter((int) animator.getAnimatedValue());
                // textview.setTypeface(null, Typeface.BOLD);
            }
        });
        colorAnimation.start();
    }


    public void OnCalcelTouchMethodExtract(TextView textView) {
        int colorFrom = getActivity().getResources().getColor(R.color.md_deep_orange_300);
        String s = getActivity().getResources().getResourceEntryName(textView.getId());
        int colorTo;
        colorTo = getActivity().getResources().getColor(R.color.primary);

        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(300); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textView.setTextColor((int) animator.getAnimatedValue());
                //      imageView.setColorFilter((int) animator.getAnimatedValue());
                textView.setTypeface(null, Typeface.NORMAL);
            }

        });
        colorAnimation.start();
    }


    public void OnUpTouchMethodExtract(TextView textview) {
        if (!checkClick) {
            int colorFrom = getActivity().getResources().getColor(R.color.md_deep_orange_300);
            //   int colorTo = getResources().getColor(R.color.colorPrimaryDark);
            String s = getActivity().getResources().getResourceEntryName(textview.getId());
            int colorTo;
            colorTo = getActivity().getResources().getColor(R.color.primary);
            ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
            colorAnimation.setDuration(50); // milliseconds
            colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator animator) {
                    textview.setTextColor((int) animator.getAnimatedValue());
                    //  imageview.setColorFilter((int) animator.getAnimatedValue());
                    //textview.setTypeface(null, Typeface.NORMAL);
                }

            });
            colorAnimation.start();
        }
    }


    public void OnMoveTouchMethodExtract(TextView textView, MotionEvent motionEvent) {
        int[] location = new int[2];
        textView.getLocationInWindow(location);
        int leftX = 0;
        int rightX = leftX + textView.getWidth();
        int topY = 0;
        int bottomY = topY + textView.getHeight();
        float xCurrent = motionEvent.getX();
        float yCurrent = motionEvent.getY();
        System.out.println(leftX + ", " + rightX + ", " + topY + ", " + bottomY + ",== " + location[0] + ", = " + location[1] + ", ==== " + xCurrent + ", " + yCurrent);
        if (xCurrent > rightX || xCurrent < leftX || yCurrent > bottomY || yCurrent < topY) {
            if (!checkClick) {
                checkClick = true;
                System.out.println("UPKI222222");

                String s = getActivity().getResources().getResourceEntryName(textView.getId());
                int colorTo2;


                colorTo2 = getActivity().getResources().getColor(R.color.primary);


                int colorFrom = getActivity().getResources().getColor(R.color.md_deep_orange_300);
                // int colorTo = textView.getTextColors().getDefaultColor();
                //colorTo2 = textView.getTextColors().getDefaultColor();
                //  ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
                //  colorAnimation.setDuration(1000); // milliseconds

                ValueAnimator colorAnimation2 = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo2);
                colorAnimation2.setDuration(50); // milliseconds

             /*   colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                      //  textView.setTextColor((int) animator.getAnimatedValue());
                       // imageView.setColorFilter((int) animator.getAnimatedValue());
                     //   textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation.start();*/


                colorAnimation2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                        textView.setTextColor((int) animator.getAnimatedValue());
                        //  imageView.setColorFilter((int) animator.getAnimatedValue());
                        //    textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation2.start();


            }

        }
    }


    public void scrollToPosstion(Integer possition) {
        containerContacts.getLayoutManager().scrollToPosition(possition);
    }

    boolean keyboardOpen = false;

    private void showCreatePopup() {
        createPopup.findViewById(R.id.createContact).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //ContactAdapter.contactAd = contactAdapter;
                createPopup.setVisibility(View.GONE);
                System.out.println(" CLOSE 3");
                closeOtherPopup();
                floatingActionMenu.close(false);

                createContact = true;
                /*MainActivity.MAIN_MENU.getItem(0).setVisible(true);
                MainActivity.MAIN_MENU.getItem(2).setVisible(false);
                MainActivity.MAIN_MENU.getItem(3).setVisible(false);*/

                ((TextView) toolbarC.findViewById(R.id.cancel_toolbar)).setVisibility(View.GONE);

                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(), "createContact").addToBackStack("create").commit();
                //floatingActionMenu.setVisibility(View.GONE);
            }
        });
        if (createPopup.getVisibility() == View.VISIBLE) {
            createPopup.setVisibility(View.GONE);
        } else {
            createPopup.setVisibility(View.VISIBLE);
            openedViews.add(createPopup);
        }
        createPopup.findViewById(R.id.createCompany).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        createPopup.findViewById(R.id.createCommunity).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
    }

    public void showExportPopup() {
        FrameLayout exportPopup = (FrameLayout) getActivity().findViewById(R.id.popup_export);

        if (exportPopup.getVisibility() == View.GONE)
            exportPopup.setVisibility(View.VISIBLE);
        else
            exportPopup.setVisibility(View.GONE);
        openedViews.add(exportPopup);
        exportTxt();
    }

    private void exportTxt() {

        getActivity().findViewById(R.id.exportTxt).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String exportData = "";
                listOfContactsToExport = new ArrayList<>();
                contactInfos = new ArrayList<>();
                listOfContactsToExport.addAll(contactAdapter.getSelectedContacts());
                for (Contact contact : listOfContactsToExport) {
                    //contact.fillData(getContext(), contactsService);
                    if (contact.getName() != null)
                        exportData += "Name: " + contact.getName() + "\n";
                    if (contact.getCompany() != null)
                        exportData += "Company: " + contact.getCompany() + "\n";
                    if (contact.getCompanyPossition() != null)
                        exportData += "Position: " + contact.getCompanyPossition() + "\n";
                    if (contact.listOfContactInfo != null) {
                        contactInfos.addAll(contact.listOfContactInfo);
                        for (ContactInfo contactInfo : contactInfos) {
                            if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                                exportData += "Phone: " + contactInfo.toString() + "\n";
                            if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                            if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                                exportData += "Facebook: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                                exportData += "Vk: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                                exportData += "Instagram: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                                exportData += "Linkedin: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                                exportData += "Twitter: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                                exportData += "Youtube: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                                exportData += "Google_sheet: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                                exportData += "Google_doc: " + contactInfo + "\n";
                                continue;
                            }

                            if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                                exportData += "Tumblr: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                                exportData += "Angel: " + contactInfo + "\n";
                                continue;
                            }
                            if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                                exportData += "Web: " + contactInfo + "\n";
                        }
                    }


                    if (contact.getSocialModel() != null) {
                        if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                            exportData += "Facebook: " + getPhoneNumberInfo(contact.getSocialModel().getFacebookLink()) + "\n";
                        if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())
                            exportData += "Vk: " + getPhoneNumberInfo(contact.getSocialModel().getVkLink()) + "\n";
                        if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                            exportData += "Linkedin: " + getPhoneNumberInfo(contact.getSocialModel().getLinkedInLink()) + "\n";
                        if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                            exportData += "Instagram: " + getPhoneNumberInfo(contact.getSocialModel().getInstagramLink()) + "\n";
                        if (contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())
                            exportData += "Twitter: " + getPhoneNumberInfo(contact.getSocialModel().getTwitterLink()) + "\n";
                        if (contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())
                            exportData += "Youtube: " + getPhoneNumberInfo(contact.getSocialModel().getYoutubeLink()) + "\n";
               /* if(contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty())
                    exportData += "Whatsapp: " + getPhoneNumberInfo(contact.getSocialModel().getWhatsappLink()) + "\n";
                if(contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty())
                    exportData += "Viber: " + getPhoneNumberInfo(contact.getSocialModel().getViberLink()) + "\n";
                if(contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty())
                    exportData += "Telegram: " + getPhoneNumberInfo(contact.getSocialModel().getTelegramLink()) + "\n";
                if(contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty())
                    exportData += "Skype: " + getPhoneNumberInfo(contact.getSocialModel().getSkypeLink()) + "\n";*/
                    }

                    if (contact.getListOfHashtags() != null && !contact.getListOfHashtags().isEmpty()) {
                        exportData += "Tags:";
                        for (HashTag hashTag : contact.getListOfHashtags()) {
                            if (hashTag != null && hashTag.getHashTagValue() != null) {
                                exportData += " " + hashTag.getHashTagValue();
                            }
                        }
                        exportData += "\n";
                    }


                    exportData += "\n";

                    contactInfos.clear();
                }
                exportData += "\n";
                exportData += "Data shared via http://Extime.pro\n";
                sendExportListEmail(exportData);
            }
        });

        getActivity().findViewById(R.id.exportExcel).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /*new Thread(new Runnable() {
                    @Override
                    public void run() {*/


                System.out.println("excel click");
                File directory, sd, file;
                WritableWorkbook workbook;

                //SimpleDateFormat dateFormant = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss", Locale.ENGLISH);
                Date parsedDate = new Date();



                String csvFile = "Contacts-"+parsedDate+".xls";
                sd = Environment.getExternalStorageDirectory();

                Storage storage = new Storage(getContext());
                //storage.deleteFile(sd.getAbsolutePath() + "/Extime/Contacts.xls");


                directory = new File(sd.getAbsolutePath() + "/Extime");
                file = new File(directory, csvFile);
                WorkbookSettings wbSettings = new WorkbookSettings();
                wbSettings.setLocale(new Locale("en", "EN"));
                try {
                    workbook = Workbook.createWorkbook(file, wbSettings);
                    createFirstSheet(workbook);

                    //closing cursor
                    workbook.write();
                    workbook.close();
                    Toast.makeText(getContext(), "Export success", Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                   /* }
                }).start();*/

            }
        });
    }

    public void createFirstSheet(WritableWorkbook workbook) {
        try {
            /*List<Bean> listdata = new ArrayList<>();

            listdata.add(new Bean("mr","firstName1","middleName1","lastName1"));
            listdata.add(new Bean("mr","firstName1","middleName1","lastName1"));
            listdata.add(new Bean("mr","firstName1","middleName1","lastName1"));
            //Excel sheet name. 0 (number)represents first sheet*/
            listOfContactsToExport = new ArrayList<>();
            listOfContactsToExport.addAll(contactAdapter.getSelectedContacts());

            WritableSheet sheet = workbook.createSheet("sheet1", 0);
            // column and row title
            sheet.addCell(new Label(0, 0, "Name"));
            sheet.addCell(new Label(1, 0, "Company"));
            sheet.addCell(new Label(2, 0, "Position"));
            sheet.addCell(new Label(3, 0, "Phone"));
            sheet.addCell(new Label(4, 0, "Email"));
            sheet.addCell(new Label(5, 0, "Facebook"));
            sheet.addCell(new Label(6, 0, "Vk"));
            sheet.addCell(new Label(7, 0, "LinkedIn"));
            sheet.addCell(new Label(8, 0, "Instagram"));
            sheet.addCell(new Label(9, 0, "Twitter"));
            sheet.addCell(new Label(10, 0, "Youtube"));
            sheet.addCell(new Label(11, 0, "Web"));
            sheet.addCell(new Label(12, 0, "Hashtags"));


            int i = 0;
            for (Contact c : listOfContactsToExport) {
                i++;
                if (c.listOfContacts != null && !c.listOfContacts.isEmpty()) {
                    i--;
                    continue;
                }

                /*if (listOfContactsToExport.get(i).listOfContacts != null) {
                    q--;
                    continue;
                }*/

                sheet.addCell(new Label(0, i, c.getName()));

                sheet.addCell(new Label(1, i, c.getCompany() == null ? "" : c.getCompany()));

                sheet.addCell(new Label(2, i, c.getCompanyPossition() == null ? "" : c.getCompanyPossition()));
                if (c.getSocialModel() != null) {
                    if (c.getSocialModel().getFacebookLink() != null)
                        sheet.addCell(new Label(5, i, c.getSocialModel().getFacebookLink()));
                    if (c.getSocialModel().getVkLink() != null)
                        sheet.addCell(new Label(6, i, c.getSocialModel().getVkLink()));
                    if (c.getSocialModel().getLinkedInLink() != null)
                        sheet.addCell(new Label(7, i, c.getSocialModel().getLinkedInLink()));
                    if (c.getSocialModel().getInstagramLink() != null)
                        sheet.addCell(new Label(8, i, c.getSocialModel().getInstagramLink()));
                    if (c.getSocialModel().getTwitterLink() != null)
                        sheet.addCell(new Label(9, i, c.getSocialModel().getTwitterLink()));
                    if (c.getSocialModel().getYoutubeLink() != null)
                        sheet.addCell(new Label(10, i, c.getSocialModel().getYoutubeLink()));
                }

                if (c.getListOfContactInfo() != null)
                    for (ContactInfo ci : c.getListOfContactInfo()) {
                        if (ClipboardType.isWeb(ci.value))
                            sheet.addCell(new Label(11, i, ci.value));
                        if (ClipboardType.isEmail(ci.value))
                            sheet.addCell(new Label(4, i, ci.value));
                        if (ClipboardType.isPhone(ci.value) && !ci.value.equalsIgnoreCase("+000000000000"))
                            sheet.addCell(new Label(3, i, ci.value));
                    }
                String hash = "";
                if (c.getListOfHashtags() != null) {
                    for (HashTag h : c.getListOfHashtags()) {
                        hash += h.getHashTagValue() + " ";
                    }
                }
                sheet.addCell(new Label(12, i, hash));
            }

            for (int w = 0; w < 13; w++) {
                CellView cc = sheet.getColumnView(w);
                cc.setAutosize(true);
                sheet.setColumnView(w, cc);
            }

            /*for(int w = 5;w< 13;w++){
                CellView cc = sheet.getColumnView(w);
                cc.setSize(9000);
                sheet.setColumnView(w,cc);
            }*/
            /*sheet.getColumnView(1).setSize(200);
            sheet.getColumnView(2).setSize(200);
            sheet.getColumnView(3).setSize(200);
            sheet.getColumnView(4).setSize(200);
            sheet.getColumnView(5).setSize(200);
            sheet.getColumnView(6).setSize(200);
            sheet.getColumnView(7).setSize(200);
            sheet.getColumnView(8).setAutosize(true);
            sheet.getColumnView(9).setAutosize(true);
            sheet.getColumnView(10).setAutosize(true);
            sheet.getColumnView(11).setAutosize(true);
            sheet.getColumnView(12).setAutosize(true);*/
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void sendExportListEmail(String data) {
        Uri uri = Uri.parse("mailto:" + "")
                .buildUpon()
                .appendQueryParameter("subject", "Contacts list")
                .appendQueryParameter("body", data)
                .build();

        Intent emailIntent = new Intent(Intent.ACTION_SENDTO, uri);
        startActivity(Intent.createChooser(emailIntent, "Send export list to Email"));
    }

    private String getPhoneNumberInfo(String number) {
        PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();

        try {
            Phonenumber.PhoneNumber swissNumberProto = phoneUtil.parse(number, "");
            PhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();
            String region = "";
            region = phoneUtil.getRegionCodeForCountryCode(swissNumberProto.getCountryCode());

            if (region.length() > 0) {
                region = " " + region;
            }

            String carrier = "";
            carrier = carrierMapper.getNameForNumber(swissNumberProto, Locale.ENGLISH);

            if (carrier.length() > 0) {
                carrier = " " + carrier;
            }
            String result = number + region + carrier;
            return result;
        } catch (NumberParseException e) {
            return number;
        }
    }

    private void askWritePermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
            if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED)
                ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.WRITE_CONTACTS, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE,}, PERMISSION_REQUEST_CONTACT_WRITE);
    }

    private void deleteSelectedContacts() {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                getActivity());
        alertDialogBuilder.setTitle("РџРѕРґС‚РІРµСЂРґРёС‚Рµ СѓРґР°Р»РµРЅРёРµ");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("РЈРґР°Р»РёС‚СЊ", (dialog, id) -> {
                    contactsService.deleteContacts(contactAdapter.getSelectedContacts());
                    contactAdapter.removeSelectedContacts();
                    System.out.println("RRRRRRRRRRRRRRR");
                    initContactsBar();
                    initRecyclerHashTags();
                    initFavoritesPop();
                    contactAdapter.stopSelectionMode();
                    stopSelectionMode();
                })
                .setNegativeButton("РћС‚РјРµРЅР°", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(UpdateList event) {
        updateAllContacts();


        Storage storage = new Storage(getActivity());
        String path = Environment.getExternalStorageDirectory().getAbsolutePath();
        List<File> listBack = storage.getFiles(path + "/Extime/ExtimeContacts/");
        if (listBack != null) {
            for (int i = 0; i < listBack.size(); i++) {
                if ((listBack.get(i).getName().contains("backup_") && !listBack.get(i).getName().equalsIgnoreCase("backup_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backup")) {
                    storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                    storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backup_" + MainActivity.versionDebug);
                }

                if ((listBack.get(i).getName().contains("backupClipboard_") && !listBack.get(i).getName().equalsIgnoreCase("backupClipboard_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backupClipboard")) {
                    storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                    storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backupClipboard_" + MainActivity.versionDebug);
                }
            }
        }

        //synkNewContacts();

    }

    ;

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(ShowHashtagPopup event) {
        if (getActivity().findViewById(R.id.completeTagsPopup).getVisibility() == View.VISIBLE)
            getActivity().findViewById(R.id.completeTagsPopup).setVisibility(View.GONE);
        else {
            showHelpTags();

            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    String magicText = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString();

                    if (magicText.trim().equals("")) {
                        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).append("#");
                    } else {
                        if (magicText.charAt(magicText.length() - 1) != '#') {
                            if (magicText.charAt(magicText.length() - 1) == ' ')
                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).append("#");
                            else
                                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).append(" #");
                        }

                    }
                }
            });

            if (event.isFocus()) {
                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).requestFocus();

                InputMethodManager imm = (InputMethodManager)
                        getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(((EditText) getActivity().findViewById(R.id.magic_edit_text)), InputMethodManager.SHOW_IMPLICIT);
            }


        }
    }

    ;


    private void updateCountLoad(int number, int countContactSFromFile) {
        getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {

                //   System.out.println("CHECKED NUMBER");
                getActivity().findViewById(R.id.loadBar).setVisibility(View.GONE);
                getActivity().findViewById(R.id.loadBar).setVisibility(View.VISIBLE);
                getActivity().findViewById(R.id.progressBar).setVisibility(View.GONE);
                getActivity().findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
                ((TextView) getActivity().findViewById(R.id.quantity_contacts_load)).setText("" + number);
                Integer firstValue = new Integer(number);
                Integer secondValue = new Integer(countContactSFromFile);
                ((android.widget.ProgressBar) getActivity().findViewById(R.id.progressBar)).setProgress((firstValue * 100) / secondValue);
                ((TextView) getActivity().findViewById(R.id.all_contacts_for_load)).setText("" + countContactSFromFile);
                ((TextView) getActivity().findViewById(R.id.loadProc)).setVisibility(View.VISIBLE);
                ((TextView) getActivity().findViewById(R.id.loadProc)).setText(" Progress - " + (((firstValue * 100) / secondValue) + 1) + "%   ");

                ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + (countContactSFromFile) + "");
                //   if (listSize > serviceContactCount)
                //       ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + allCount + "");

                ((TextView) getActivity().findViewById(R.id.call2mecloud_count)).setText("(" + (countContactSFromFile) + ")");
                ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + (countContactSFromFile) + "");

                //   if (listSize > serviceContactCount)
                //       ((TextView) getActivity().findViewById(R.id.call2mecloud_count)).setText("(" + allCount + ")");

                ((TextView) getActivity().findViewById(R.id.popupContactsAll)).setText(" " + (countContactSFromFile) + "");

                ((TextView) getActivity().findViewById(R.id.all_hashtag_countContacts)).setText(" " + (countContactSFromFile) + "");

                ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + (countContactSFromFile) + "");


                //      System.out.println("NUMBER = "+number);
                //  System.out.println(getContactsCt());
                //    System.out.println(getAllCt());
                if (number == countContactSFromFile) {
                    System.out.println("Done success");
                    ((TextView) getActivity().findViewById(R.id.loadProc)).setVisibility(View.GONE);
                    /*int permission = ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE);
                    if (permission != PackageManager.PERMISSION_GRANTED) {
                        ActivityCompat.requestPermissions(
                                activity,
                                PERMISSIONS_STORAGE,
                                REQUEST_EXTERNAL_STORAGE
                        );
                    }else{*/
                    System.out.println("START GONE");
                    getActivity().findViewById(R.id.loadBar).setVisibility(View.GONE);
                    getActivity().findViewById(R.id.progressBar).setVisibility(View.GONE);
                    System.out.println("END GONE");


                    //     storage.createDirectory(path+"/Call2Me/Call2MeFiles");
                        /*Storage storage = new Storage(getApplicationContext());
                        String path = Environment.getExternalStorageDirectory().getAbsolutePath();
                        storage.createDirectory(path+"/Call2Me/Call2MeContacts");
                        Gson gson = new Gson();*/


                        /*new Thread(new Runnable() {
                            @Override
                            public void run() {
                            try {
                                String jsonContacts = gson.toJson(LIST_OF_CONTACTS);
                                storage.createFile(path + "/Call2Me/Call2MeContacts/backup", jsonContacts);
                            }catch (Exception e){
                                System.out.println("ERROR TO CRETAE BACKUP");
                                e.fillInStackTrace();
                            }
                            }
                        }).start();*/


                    //   MainActivity.LIST_OF_CONTACTS = listOfContacts;

                    System.out.println("END Load");
                }
            }
        });
    }

    public void setListMode() {

        mainView.findViewById(R.id.containerContacts).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.scrollRec).setVisibility(View.GONE);
        mainView.findViewById(R.id.kanbanTabs).setVisibility(View.GONE);
        //mainView.findViewById(R.id.kanban_list).setVisibility(View.GONE);

        System.out.println("SEARCH 1");
        if (MainActivity.selectedType.equals(FragmentTypeEnum.CONTACTS) && ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0)
            getActivity().findViewById(R.id.countSearchContacts).setVisibility(View.VISIBLE);

        if (getActivity().findViewById(R.id.countSearchContacts).getVisibility() == View.VISIBLE)
            ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setText(contactAdapter.getListOfContacts().size() + " matched entries");

        mode = 1;
    }

    KanbanAdapter kanbanAdapter_1, kanbanAdapter_2, kanbanAdapter_3, kanbanAdapter_4, kanbanAdapter_5, kanbanAdapter_6, kanbanAdapter_7, kanbanAdapter_8;
    ArrayList<Contact> listAll, listF, listI, listP, listS, listC, listV, listSt, listInv;

    public void updateKanban() {


        if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null && kanbanAdapter_5 != null && kanbanAdapter_6 != null && kanbanAdapter_7 != null && kanbanAdapter_8 != null) {

            ArrayList<Contact> listType = new ArrayList<>();
            listType.addAll(listF);
            listType.addAll(listI);
            listType.addAll(listP);
            listType.addAll(listS);
            listType.addAll(listC);
            listType.addAll(listV);
            listType.addAll(listInv);
            listType.addAll(listSt);

            listF = new ArrayList<>();
            listI = new ArrayList<>();
            listP = new ArrayList<>();
            listS = new ArrayList<>();
            listC = new ArrayList<>();
            listV = new ArrayList<>();
            listSt = new ArrayList<>();
            listInv = new ArrayList<>();

            for (Contact contact : listType) {
                if (contact.isFavorite) {
                    listF.add(contact);
                    continue;
                }

                if (contact.isImportant) {
                    listI.add(contact);
                    continue;
                }

                if (contact.isPause) {
                    listP.add(contact);
                    continue;
                }

                if (contact.isFinished) {
                    listS.add(contact);
                }

                if (contact.isCrown) {
                    listC.add(contact);
                }

                if (contact.isVip) {
                    listV.add(contact);
                }

                if (contact.isInvestor) {
                    listInv.add(contact);
                }

                if (contact.isStartup) {
                    listSt.add(contact);
                }


            }

            ((TextView) mainView.findViewById(R.id.countType_1)).setText(String.valueOf(listF.size()));
            ((TextView) mainView.findViewById(R.id.countType_2)).setText(String.valueOf(listI.size()));
            ((TextView) mainView.findViewById(R.id.countType_3)).setText(String.valueOf(listP.size()));
            ((TextView) mainView.findViewById(R.id.countType_4)).setText(String.valueOf(listS.size()));
            ((TextView) mainView.findViewById(R.id.countType_5)).setText(String.valueOf(listC.size()));
            ((TextView) mainView.findViewById(R.id.countType_6)).setText(String.valueOf(listV.size()));
            ((TextView) mainView.findViewById(R.id.countType_7)).setText(String.valueOf(listSt.size()));
            ((TextView) mainView.findViewById(R.id.countType_8)).setText(String.valueOf(listInv.size()));


            kanbanAdapter_1.updateList(listF);
            kanbanAdapter_2.updateList(listI);
            kanbanAdapter_3.updateList(listP);
            kanbanAdapter_4.updateList(listS);
            kanbanAdapter_5.updateList(listC);
            kanbanAdapter_6.updateList(listV);
            kanbanAdapter_7.updateList(listInv);
            kanbanAdapter_8.updateList(listSt);

        }
    }


    public void updateKankabFull() {

        System.out.println("UPDATE KANBAN FULL");

        listF = new ArrayList<>();
        listI = new ArrayList<>();
        listP = new ArrayList<>();
        listS = new ArrayList<>();
        listC = new ArrayList<>();
        listV = new ArrayList<>();
        listSt = new ArrayList<>();
        listInv = new ArrayList<>();

        for (Contact contact : contactAdapter.getListOfContacts()) {
            if (contact.isFavorite) {
                listF.add(contact);
                continue;
            }

            if (contact.isImportant) {
                listI.add(contact);
                continue;
            }

            if (contact.isPause) {
                listP.add(contact);
                continue;
            }

            if (contact.isFinished) {
                listS.add(contact);
            }

            if (contact.isCrown) {
                listC.add(contact);
            }

            if (contact.isVip) {
                listV.add(contact);
            }

            if (contact.isStartup) {
                listSt.add(contact);
            }

            if (contact.isInvestor) {
                listInv.add(contact);
            }
        }

        System.out.println("SEARCH 2");

        if (getActivity().findViewById(R.id.countSearchContacts).getVisibility() == View.VISIBLE)
            ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setText((listF.size() + listI.size() + listP.size() + listS.size() + listC.size() + listV.size() + listSt.size() + listInv.size()) + " matched entries");

        if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null && kanbanAdapter_5 != null && kanbanAdapter_6 != null && kanbanAdapter_7 != null && kanbanAdapter_8 != null) {

            ((TextView) mainView.findViewById(R.id.countType_1)).setText(String.valueOf(listF.size()));
            ((TextView) mainView.findViewById(R.id.countType_2)).setText(String.valueOf(listI.size()));
            ((TextView) mainView.findViewById(R.id.countType_3)).setText(String.valueOf(listP.size()));
            ((TextView) mainView.findViewById(R.id.countType_4)).setText(String.valueOf(listS.size()));
            ((TextView) mainView.findViewById(R.id.countType_5)).setText(String.valueOf(listC.size()));
            ((TextView) mainView.findViewById(R.id.countType_6)).setText(String.valueOf(listV.size()));
            ((TextView) mainView.findViewById(R.id.countType_7)).setText(String.valueOf(listInv.size()));
            ((TextView) mainView.findViewById(R.id.countType_8)).setText(String.valueOf(listSt.size()));


            kanbanAdapter_1.updateList(listF);
            kanbanAdapter_2.updateList(listI);
            kanbanAdapter_3.updateList(listP);
            kanbanAdapter_4.updateList(listS);
            kanbanAdapter_5.updateList(listC);
            kanbanAdapter_6.updateList(listV);
            kanbanAdapter_7.updateList(listInv);
            kanbanAdapter_8.updateList(listSt);

            if (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_1).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_1).setVisibility(View.GONE);
            }

            if (((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_2).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_2).setVisibility(View.GONE);
            }

            if (((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_3).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_3).setVisibility(View.GONE);
            }

            if (((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_4).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_4).setVisibility(View.GONE);
            }

            if (((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_5).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_5).setVisibility(View.GONE);
            }

            if (((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_6).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_6).setVisibility(View.GONE);
            }

            if (((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_7).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_7).setVisibility(View.GONE);
            }

            if (((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {
                mainView.findViewById(R.id.head_card_8).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.head_card_8).setVisibility(View.GONE);
            }


        }
    }

    public KanbanRowFragment kanbanRowFragment_All;
    public KanbanRowFragment kanbanRowFragment_Fav;
    public KanbanRowFragment kanbanRowFragment_Imp;
    public KanbanRowFragment kanbanRowFragment_P;
    public KanbanRowFragment kanbanRowFragment_Fin;
    public KanbanRowFragment kanbanRowFragment_Crown;
    public KanbanRowFragment kanbanRowFragment_Vip;
    public KanbanRowFragment kanbanRowFragment_Inv;
    public KanbanRowFragment kanbanRowFragment_St;


    public void changeType() {
        if (!typeCard.equals(TypeCard.ROW)) {
            if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null && kanbanAdapter_5 != null && kanbanAdapter_6 != null && kanbanAdapter_7 != null && kanbanAdapter_8 != null) {
                kanbanAdapter_1.updateType(typeCard);
                kanbanAdapter_2.updateType(typeCard);
                kanbanAdapter_3.updateType(typeCard);
                kanbanAdapter_4.updateType(typeCard);

                kanbanAdapter_5.updateType(typeCard);
                kanbanAdapter_6.updateType(typeCard);
                kanbanAdapter_7.updateType(typeCard);
                kanbanAdapter_8.updateType(typeCard);
            }

            if (mode == 2) {
                mainView.findViewById(R.id.scrollRec).setVisibility(View.VISIBLE);
                mainView.findViewById(R.id.kanbanTabs).setVisibility(View.GONE);
            }
        } else {

            if (mode == 2) {
                mainView.findViewById(R.id.scrollRec).setVisibility(View.GONE);
                mainView.findViewById(R.id.kanbanTabs).setVisibility(View.VISIBLE);
            }

           /* if(kanbanRowFragment_All == null || kanbanRowFragment_Crown == null || kanbanRowFragment_Fav == null || kanbanRowFragment_Fin == null || kanbanRowFragment_Imp == null
                    || kanbanRowFragment_Inv == null || kanbanRowFragment_P == null || kanbanRowFragment_St == null || kanbanRowFragment_Vip == null){






            }*/

          /*  ViewPager viewPagerRow = (ViewPager) mainView.findViewById(R.id.viewpager_kanban);
            ContactsSectionAdapter adapter;
            adapter = new ContactsSectionAdapter(getChildFragmentManager(), getContext());
            adapter.addFragment(new KanbanRowFragment(), "All contacts", ContactCacheService.getCountContacts());
            adapter.addFragment(new KanbanRowFragment(), "Favorites", countFavorites);
            adapter.addFragment(new KanbanRowFragment(), "Important", countImportant);
            adapter.addFragment(new KanbanRowFragment(), "Pause", countPause);
            adapter.addFragment(new KanbanRowFragment(), "Finished", countFinished);
            adapter.addFragment(new KanbanRowFragment(), "Crown", countCrown);
            adapter.addFragment(new KanbanRowFragment(), "VIP", countVIP);
            adapter.addFragment(new KanbanRowFragment(), "Investor", countInvestor);
            adapter.addFragment(new KanbanRowFragment(), "Startup", countStartup);

            viewPagerRow.setAdapter(adapter);
            SmartTabLayout tabs = (SmartTabLayout) mainView.findViewById(R.id.result_tabs_kanban);
            tabs.setCustomTabView(adapter);
            tabs.setViewPager(viewPagerRow);

            tabs.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
                @Override
                public void onPageScrolled(int i, float v, int i1) {

                }

                @Override
                public void onPageSelected(int i) {
                    ((TextView)tabs.getTabAt(i).findViewById(R.id.text_title_tab)).setTextColor(getContext().getResources().getColor(R.color.black));
                    ((TextView)tabs.getTabAt(lastPosition).findViewById(R.id.text_title_tab)).setTextColor(getContext().getResources().getColor(R.color.gray_dark));
                    System.out.println("SELECT TAB");
                    lastPosition = i;
                }

                @Override
                public void onPageScrollStateChanged(int i) {

                }
            });*/

            /*mainView.findViewById(R.id.scrollRec).setVisibility(View.GONE);
            mainView.findViewById(R.id.kanbanTabs).setVisibility(View.VISIBLE);*/
        }
    }

    public int lastPosition = 0;

    public RecyclerView recyclerView_k, recyclerView_k_1, recyclerView_k_2, recyclerView_k_3, recyclerView_k_4, recyclerView_k_5, recyclerView_k_6, recyclerView_k_7;


    public SharedPreferences prefKanbanTouch;

    public void setKanbanMode() {


        if (typeCard.equals(TypeCard.FULL) || typeCard.equals(TypeCard.SHORT)) {
            int width_medium = (int) (160 * getResources().getDisplayMetrics().density);
            int height_medium = (int) (40 * getResources().getDisplayMetrics().density);

            mainView.findViewById(R.id.head_card_1).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_2).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_3).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_4).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_5).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_6).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_7).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
            mainView.findViewById(R.id.head_card_8).setLayoutParams(new LinearLayout.LayoutParams(width_medium, height_medium));
        }

        if (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_1).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_1).setVisibility(View.GONE);
        }

        if (((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_2).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_2).setVisibility(View.GONE);
        }

        if (((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_3).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_3).setVisibility(View.GONE);
        }

        if (((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_4).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_4).setVisibility(View.GONE);
        }

        if (((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_5).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_5).setVisibility(View.GONE);
        }

        if (((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_6).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_6).setVisibility(View.GONE);
        }

        if (((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_7).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_7).setVisibility(View.GONE);
        }

        if (((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()) {
            mainView.findViewById(R.id.head_card_8).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.head_card_8).setVisibility(View.GONE);
        }

        listAll = new ArrayList<>();
        listF = new ArrayList<>();
        listI = new ArrayList<>();
        listP = new ArrayList<>();
        listS = new ArrayList<>();
        listC = new ArrayList<>();
        listV = new ArrayList<>();
        listSt = new ArrayList<>();
        listInv = new ArrayList<>();

        listAll.addAll(contactAdapter.getListOfContacts());

        for (Contact contact : contactAdapter.getListOfContacts()) {
            if (contact.isFavorite) {
                listF.add(contact);
                continue;
            }

            if (contact.isImportant) {
                listI.add(contact);
                continue;
            }

            if (contact.isPause) {
                listP.add(contact);
                continue;
            }

            if (contact.isFinished) {
                listS.add(contact);
            }

            if (contact.isCrown) {
                listC.add(contact);
            }

            if (contact.isVip) {
                listV.add(contact);
            }

            if (contact.isStartup) {
                listSt.add(contact);
            }
            if (contact.isInvestor) {
                listInv.add(contact);
            }
        }
        System.out.println("SEARCH 3");

        if (getActivity().findViewById(R.id.countSearchContacts).getVisibility() == View.VISIBLE) {
            ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setText((listF.size() + listI.size() + listP.size() + listS.size() + listC.size() + listV.size() + listSt.size() + listInv.size()) + " matched entries");
        }

        ((TextView) mainView.findViewById(R.id.countType_1)).setText(String.valueOf(listF.size()));
        ((TextView) mainView.findViewById(R.id.countType_2)).setText(String.valueOf(listI.size()));
        ((TextView) mainView.findViewById(R.id.countType_3)).setText(String.valueOf(listP.size()));
        ((TextView) mainView.findViewById(R.id.countType_4)).setText(String.valueOf(listS.size()));
        ((TextView) mainView.findViewById(R.id.countType_5)).setText(String.valueOf(listC.size()));
        ((TextView) mainView.findViewById(R.id.countType_6)).setText(String.valueOf(listV.size()));
        ((TextView) mainView.findViewById(R.id.countType_7)).setText(String.valueOf(listInv.size()));
        ((TextView) mainView.findViewById(R.id.countType_8)).setText(String.valueOf(listSt.size()));

        if (kanbanAdapter_1 == null || kanbanAdapter_2 == null || kanbanAdapter_3 == null || kanbanAdapter_4 == null || kanbanAdapter_5 == null || kanbanAdapter_6 == null || kanbanAdapter_7 == null || kanbanAdapter_8 == null) {


            kanbanAdapter_1 = new KanbanAdapter(listF, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_2 = new KanbanAdapter(listI, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_3 = new KanbanAdapter(listP, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_4 = new KanbanAdapter(listS, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_5 = new KanbanAdapter(listC, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_6 = new KanbanAdapter(listV, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_7 = new KanbanAdapter(listInv, mainView.getContext(), this, getFragmentManager(), typeCard, this);
            kanbanAdapter_8 = new KanbanAdapter(listSt, mainView.getContext(), this, getFragmentManager(), typeCard, this);


            recyclerView_k = mainView.findViewById(R.id.kanban_list);
            recyclerView_k_1 = mainView.findViewById(R.id.kanban_list_2);
            recyclerView_k_2 = mainView.findViewById(R.id.kanban_list_3);
            recyclerView_k_3 = mainView.findViewById(R.id.kanban_list_4);
            recyclerView_k_4 = mainView.findViewById(R.id.kanban_list_5);
            recyclerView_k_5 = mainView.findViewById(R.id.kanban_list_6);
            recyclerView_k_6 = mainView.findViewById(R.id.kanban_list_7);
            recyclerView_k_7 = mainView.findViewById(R.id.kanban_list_8);

            recyclerView_k.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k.setAdapter(kanbanAdapter_1);

            recyclerView_k_1.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_1.setAdapter(kanbanAdapter_2);

            recyclerView_k_2.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_2.setAdapter(kanbanAdapter_3);

            recyclerView_k_3.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_3.setAdapter(kanbanAdapter_4);

            recyclerView_k_4.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_4.setAdapter(kanbanAdapter_5);

            recyclerView_k_5.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_5.setAdapter(kanbanAdapter_6);

            recyclerView_k_6.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_6.setAdapter(kanbanAdapter_7);

            recyclerView_k_7.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
            recyclerView_k_7.setAdapter(kanbanAdapter_8);


            int sortK1 = prefKanbanTouch.getInt("scrollKanban1", 0);
            int sortK2 = prefKanbanTouch.getInt("scrollKanban2", 0);
            int sortK3 = prefKanbanTouch.getInt("scrollKanban3", 0);
            int sortK4 = prefKanbanTouch.getInt("scrollKanban4", 0);
            int sortK5 = prefKanbanTouch.getInt("scrollKanban5", 0);
            int sortK6 = prefKanbanTouch.getInt("scrollKanban6", 0);
            int sortK7 = prefKanbanTouch.getInt("scrollKanban7", 0);
            int sortK8 = prefKanbanTouch.getInt("scrollKanban8", 0);

            ((LinearLayoutManager) recyclerView_k.getLayoutManager()).scrollToPosition(sortK1);
            ((LinearLayoutManager) recyclerView_k_1.getLayoutManager()).scrollToPosition(sortK2);
            ((LinearLayoutManager) recyclerView_k_2.getLayoutManager()).scrollToPosition(sortK3);
            ((LinearLayoutManager) recyclerView_k_3.getLayoutManager()).scrollToPosition(sortK4);
            ((LinearLayoutManager) recyclerView_k_4.getLayoutManager()).scrollToPosition(sortK5);

            ((LinearLayoutManager) recyclerView_k_5.getLayoutManager()).scrollToPosition(sortK6);
            ((LinearLayoutManager) recyclerView_k_6.getLayoutManager()).scrollToPosition(sortK7);
            ((LinearLayoutManager) recyclerView_k_7.getLayoutManager()).scrollToPosition(sortK8);

        } else {
            kanbanAdapter_1.updateList(listF);
            kanbanAdapter_2.updateList(listI);
            kanbanAdapter_3.updateList(listP);
            kanbanAdapter_4.updateList(listS);
            kanbanAdapter_5.updateList(listC);
            kanbanAdapter_6.updateList(listV);
            kanbanAdapter_7.updateList(listInv);
            kanbanAdapter_8.updateList(listSt);
        }


        //recyclerView_3.setHasFixedSize(true);


        //mainView.findViewById(R.id.kanban_list).setVisibility(View.VISIBLE);


        getActivity().findViewById(R.id.recyclerKankab).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                closeOtherPopup();
            }
        });





        if (getActivity().findViewById(R.id.countSearchContacts).getVisibility() == View.VISIBLE) {
            ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setText((listF.size() + listI.size() + listP.size() + listS.size() + listC.size() + listV.size() + listSt.size() + listInv.size()) + " matched entries");
        }

        if (kanbanRowFragment_All == null || kanbanRowFragment_Crown == null || kanbanRowFragment_Fav == null || kanbanRowFragment_Fin == null || kanbanRowFragment_Imp == null
                || kanbanRowFragment_Inv == null || kanbanRowFragment_P == null || kanbanRowFragment_St == null || kanbanRowFragment_Vip == null/* || kanbanRowFragment_All.kanbanContactsAdapter == null
                || kanbanRowFragment_Crown.kanbanContactsAdapter == null || kanbanRowFragment_Fav.kanbanContactsAdapter == null || kanbanRowFragment_Fin.kanbanContactsAdapter == null ||
                kanbanRowFragment_Imp.kanbanContactsAdapter == null || kanbanRowFragment_Inv.kanbanContactsAdapter == null || kanbanRowFragment_P.kanbanContactsAdapter == null ||
                kanbanRowFragment_St.kanbanContactsAdapter == null || kanbanRowFragment_Vip.kanbanContactsAdapter == null*/) {

            System.out.println("SEARCH 5");

            kanbanRowFragment_All = new KanbanRowFragment();
            /*Bundle args = new Bundle();
            args.putSerializable("list", listAll);
            kanbanRowFragment_All.setArguments(args);*/

            kanbanRowFragment_Fav = new KanbanRowFragment();
            Bundle args_F = new Bundle();
            args_F.putSerializable("list", listF);
            kanbanRowFragment_Fav.setArguments(args_F);

            kanbanRowFragment_Imp = new KanbanRowFragment();
            Bundle args_Imp = new Bundle();
            args_Imp.putSerializable("list", listI);
            kanbanRowFragment_Imp.setArguments(args_Imp);

            kanbanRowFragment_P = new KanbanRowFragment();
            Bundle args_P = new Bundle();
            args_P.putSerializable("list", listP);
            kanbanRowFragment_P.setArguments(args_P);

            kanbanRowFragment_Fin = new KanbanRowFragment();
            Bundle args_Fin = new Bundle();
            args_Fin.putSerializable("list", listS);
            kanbanRowFragment_Fin.setArguments(args_Fin);

            kanbanRowFragment_Crown = new KanbanRowFragment();
            Bundle args_Cr = new Bundle();
            args_Cr.putSerializable("list", listC);
            kanbanRowFragment_Crown.setArguments(args_Cr);

            kanbanRowFragment_Vip = new KanbanRowFragment();
            Bundle args_Vip = new Bundle();
            args_Vip.putSerializable("list", listV);
            kanbanRowFragment_Vip.setArguments(args_Vip);

            kanbanRowFragment_Inv = new KanbanRowFragment();
            Bundle args_Inv = new Bundle();
            args_Inv.putSerializable("list", listInv);
            kanbanRowFragment_Inv.setArguments(args_Inv);

            kanbanRowFragment_St = new KanbanRowFragment();
            Bundle args_St = new Bundle();
            args_St.putSerializable("list", listSt);
            kanbanRowFragment_St.setArguments(args_St);


            ViewPager viewPagerRow = (ViewPager) mainView.findViewById(R.id.viewpager_kanban);
            ContactsSectionAdapter adapter;
            adapter = new ContactsSectionAdapter(getChildFragmentManager(), getContext());


            adapter.addFragment(kanbanRowFragment_All, "All contacts", listAll.size());
            adapter.addFragment(kanbanRowFragment_Fav, "Favorites", listF.size());
            adapter.addFragment(kanbanRowFragment_Imp, "Important", listI.size());
            adapter.addFragment(kanbanRowFragment_P, "Pause", listP.size());
            adapter.addFragment(kanbanRowFragment_Fin, "Finished", listS.size());
            adapter.addFragment(kanbanRowFragment_Crown, "Crown", listC.size());
            adapter.addFragment(kanbanRowFragment_Vip, "VIP", listV.size());
            adapter.addFragment(kanbanRowFragment_Inv, "Investor", listInv.size());
            adapter.addFragment(kanbanRowFragment_St, "Startup", listSt.size());




            viewPagerRow.setAdapter(adapter);
            SmartTabLayout tabs = (SmartTabLayout) mainView.findViewById(R.id.result_tabs_kanban);
            tabs.setCustomTabView(adapter);
            tabs.setViewPager(viewPagerRow);



            tabs.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
                @Override
                public void onPageScrolled(int i, float v, int i1) {

                }

                @Override
                public void onPageSelected(int i) {
                    ((TextView) tabs.getTabAt(i).findViewById(R.id.text_title_tab)).setTextColor(getContext().getResources().getColor(R.color.black));
                    ((TextView) tabs.getTabAt(lastPosition).findViewById(R.id.text_title_tab)).setTextColor(getContext().getResources().getColor(R.color.gray_dark));
                    //System.out.println("SELECT TAB");
                    lastPosition = i;
                }

                @Override
                public void onPageScrollStateChanged(int i) {

                }
            });


        } else {
            System.out.println("SEARCH 6");
            if(kanbanRowFragment_All.kanbanContactsAdapter != null) {
                kanbanRowFragment_All.kanbanContactsAdapter.updateList(listAll);
            }else{
                Bundle args_F = new Bundle();
                args_F.putSerializable("list", listAll);
                kanbanRowFragment_All.setArguments(args_F);
            }

            if(kanbanRowFragment_Fav.kanbanContactsAdapter != null) {
                kanbanRowFragment_Fav.kanbanContactsAdapter.updateList(listF);
            }else{
                Bundle args_F = new Bundle();
                args_F.putSerializable("list", listF);
                kanbanRowFragment_Fav.setArguments(args_F);
            }
            if(kanbanRowFragment_Imp.kanbanContactsAdapter != null) {
                kanbanRowFragment_Imp.kanbanContactsAdapter.updateList(listI);
            }else{
                Bundle args_Imp = new Bundle();
                args_Imp.putSerializable("list", listI);
                kanbanRowFragment_Imp.setArguments(args_Imp);
            }

            if(kanbanRowFragment_P.kanbanContactsAdapter != null) {
                kanbanRowFragment_P.kanbanContactsAdapter.updateList(listP);
            }else{
                Bundle args_P = new Bundle();
                args_P.putSerializable("list", listP);
                kanbanRowFragment_P.setArguments(args_P);
            }

            if(kanbanRowFragment_Fin.kanbanContactsAdapter != null){
                kanbanRowFragment_Fin.kanbanContactsAdapter.updateList(listS);
            }else{
                Bundle args_Fin = new Bundle();
                args_Fin.putSerializable("list", listS);
                kanbanRowFragment_Fin.setArguments(args_Fin);
            }

            if(kanbanRowFragment_Crown.kanbanContactsAdapter != null){
                kanbanRowFragment_Crown.kanbanContactsAdapter.updateList(listC);
            }else{
                Bundle args_Cr = new Bundle();
                args_Cr.putSerializable("list", listC);
                kanbanRowFragment_Crown.setArguments(args_Cr);
            }

            if(kanbanRowFragment_Vip.kanbanContactsAdapter != null){
                kanbanRowFragment_Vip.kanbanContactsAdapter.updateList(listV);
            }else{
                Bundle args_Vip = new Bundle();
                args_Vip.putSerializable("list", listV);
                kanbanRowFragment_Vip.setArguments(args_Vip);
            }

            if(kanbanRowFragment_Inv.kanbanContactsAdapter != null){
                kanbanRowFragment_Inv.kanbanContactsAdapter.updateList(listInv);
            }else{
                Bundle args_Inv = new Bundle();
                args_Inv.putSerializable("list", listInv);
                kanbanRowFragment_Inv.setArguments(args_Inv);
            }

            if(kanbanRowFragment_St.kanbanContactsAdapter != null){
                kanbanRowFragment_St.kanbanContactsAdapter.updateList(listSt);
            }else{
                Bundle args_St = new Bundle();
                args_St.putSerializable("list", listSt);
                kanbanRowFragment_St.setArguments(args_St);
            }



        }


        if (!typeCard.equals(TypeCard.ROW)) {
            mainView.findViewById(R.id.kanbanTabs).setVisibility(View.GONE);
            mainView.findViewById(R.id.containerContacts).setVisibility(View.GONE);
            mainView.findViewById(R.id.scrollRec).setVisibility(View.VISIBLE);
        } else {
            mainView.findViewById(R.id.kanbanTabs).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.containerContacts).setVisibility(View.GONE);
            mainView.findViewById(R.id.scrollRec).setVisibility(View.GONE);
        }

        mode = 2;
    }

    public boolean startSynk = true;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup viewGroup, Bundle bundle) {
        System.out.println("FRAAAAAAAAAAAAAAAAAAAAAAAAAAAAGMEEEEEEEEEEEEEEEEENT");
        if (mainView == null) {

            mainView = inflater.inflate(R.layout.fragment_contacts_list, viewGroup, false);

            if (MessageToLoad == 1) {
                /*startSynk = false;
                new Thread(new Runnable() {
                    @Override
                    public void run() {


                        Storage storage = new Storage(getActivity());
                        String path = Environment.getExternalStorageDirectory().getAbsolutePath();
                        //String content = storage.readTextFile(path+"/Call2Me/Call2MeContacts/backup");
                        Gson gson = new Gson();
                        try {
                            JSONArray js = MainActivity.mainJS;
                            System.out.println("222221223 + " + js.length());
                            int number = 0;
                            ArrayList<Contact> l = new ArrayList<>();
                            int coutCont = 0;
                            int coutCom = 0;
                            ArrayList<Contact> listOfCompanies = new ArrayList<>();


                            for (int i = 0; i < js.length(); i++) {
                                JSONObject o = js.getJSONObject(i);
                                Contact c = gson.fromJson(o.toString(), Contact.class);

                                if (c.listOfContacts == null || c.listOfContacts.isEmpty()) {


                                    //   System.out.println("1111111 = " + c.getName());
                                    //    if (c.listOfContacts == null || c.listOfContacts.isEmpty())
                                    coutCont++;
                                    //    else
                                    //        coutCom++;
                                    final int con = coutCont;
                                    //    final int com = coutCom;
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            ((TextView) getActivity().findViewById(R.id.people_fav)).setText("(" + (con) + ")");
                                            //      ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + (com) + ")");
                                        }
                                    });


                                    //   System.out.println("nme = " + c.getName() + ", list = " + c.listOfContacts.size());
                                       *//* if(c.listOfContacts == null || c.listOfContacts.isEmpty())
                                            ContactCacheService.insertOneContact(c);
                                        else
                                            ContactCacheService.updateCompany(c);*//*
                                    //ContactCacheService.insertOneContactFromFile(c);
                                    ContactCacheService.updateContact(c, null);


                                    //=========================================
                                    //if(contactsService.getIdContactByName(c.getName()) == null) contactsService.saveContact(c);
                                    //=====================================

                                    number++;
                                    final int num = number;
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            updateCountLoad(num, js.length());
                                        }
                                    });

                                } else
                                    listOfCompanies.add(c);
                            }
                            //System.out.println("COMPANI SIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIZE = "+listOfCompanies.size()+", size cont = "+number+", basa size = "+ContactCacheService.getAllContacts(null).size());
                            for (int i = 0; i < listOfCompanies.size(); i++) {
                                try {
                                    for (int j = 0; j < listOfCompanies.get(i).listOfContacts.size(); j++) {
                                        System.out.println("NAME TO ADD = " + listOfCompanies.get(i).listOfContacts.get(j).getName());
                                        Contact conOfComp = ContactCacheService.getContactByIDContact(listOfCompanies.get(i).listOfContacts.get(j).getIdContact());
                                        if (conOfComp != null)
                                            listOfCompanies.get(i).listOfContacts.set(j, conOfComp);
                                    }

                                    ContactCacheService.updateCompany(listOfCompanies.get(i));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                number++;
                                //   number+=listOfCompanies.get(i).listOfContacts.size();
                                final int num = number;

                                coutCom++;
                                final int com = coutCom;

                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        // ((TextView) getActivity().findViewById(R.id.people_fav)).setText("(" + (con) + ")");
                                        ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + (com) + ")");
                                    }
                                });

                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        updateCountLoad(num, js.length());
                                    }
                                });
                            }

                            listOfCompanies.clear();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        EventBus.getDefault().post(new UpdateList());
                        EventBus.getDefault().post(new SynkNewC());
                        //EventBus.getDefault().post(new StartSync());
                        MessageToLoad = 0;

                        Runtime.getRuntime().gc();
                    }
                }).start();
                //MessageToLoad = 0;*/
            } else {
                /*Storage storage = new Storage(getActivity());
                String path = Environment.getExternalStorageDirectory().getAbsolutePath();
                List<File> listBack = storage.getFiles(path + "/Extime/ExtimeContacts/");
                if (listBack != null) {
                    for (int i = 0; i < listBack.size(); i++) {
                        if ((listBack.get(i).getName().contains("backup_") && !listBack.get(i).getName().equalsIgnoreCase("backup_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backup")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backup_" + MainActivity.versionDebug);
                        }

                        if ((listBack.get(i).getName().contains("backupClipboard_") && !listBack.get(i).getName().equalsIgnoreCase("backupClipboard_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backupClipboard")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backupClipboard_" + MainActivity.versionDebug);
                        }
                    }
                }*/

            }

            /*Storage storage = new Storage(getActivity());
                String path = Environment.getExternalStorageDirectory().getAbsolutePath();
                List<File> listBack = storage.getFiles(path + "/Extime/ExtimeContacts/");
                if (listBack != null) {
                    for (int i = 0; i < listBack.size(); i++) {
                        if ((listBack.get(i).getName().contains("backup_") && !listBack.get(i).getName().equalsIgnoreCase("backup_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backup")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backup_" + MainActivity.versionDebug);
                        }

                        if ((listBack.get(i).getName().contains("backupClipboard_") && !listBack.get(i).getName().equalsIgnoreCase("backupClipboard_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backupClipboard")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backupClipboard_" + MainActivity.versionDebug);
                        }
                    }
                }*/







            /*ContentResolver cr = getActivity().getContentResolver();
            String[] selectionArgs = new String[]{String.valueOf("org.telegram.messenger")};
            // Read Contacts
            Cursor c = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[]{ContactsContract.Data.CONTACT_ID,ContactsContract.RawContacts._ID,ContactsContract.RawContacts.CONTACT_ID, ContactsContract.Data._ID, ContactsContract.Contacts._ID,  ContactsContract.Contacts.DISPLAY_NAME, ContactsContract.CommonDataKinds.Phone.NUMBER, ContactsContract.RawContacts.ACCOUNT_TYPE}, *//*ContactsContract.RawContacts.ACCOUNT_TYPE+" = ? "*//*null, *//*selectionArgsnull *//*null, null);
            if (c.getCount() <= 0) {
                Toast.makeText(getActivity(), "No Phone Contact Found..!", Toast.LENGTH_SHORT).show();
            } else {
                while (c.moveToNext()) {
                    String id = c.getString(c.getColumnIndex(ContactsContract.Data.CONTACT_ID));
                    String Phone_number = c.getString(c.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));          //Phone number
                    String name = c.getString(c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));                        //Name of contact
                    //System.out.println("ID = "+id+", Name: "+name+", phone = "+Phone_number);
                    System.out.println("Data.CONTACT_ID = "+c.getString(c.getColumnIndex(ContactsContract.Data.CONTACT_ID))+", RawContacts._ID = "+c.getString(c.getColumnIndex(ContactsContract.RawContacts._ID))+*//*", RawContacts.CONTACT_ID = "+c.getString(c.getColumnIndex(ContactsContract.RawContacts.CONTACT_ID))+", Data._ID = "+c.getString(c.getColumnIndex(ContactsContract.Data._ID))+*//*", Contacts._ID =  "+c.getString(c.getColumnIndex(ContactsContract.Contacts._ID)));//Name of contact
                }
            } //get phone by account*/

           /* String[] selectionArgs = new String[]{String.valueOf("com.google")};
           ContentResolver cr = getActivity().getContentResolver();
            Cursor c = cr.query(ContactsContract.RawContacts.CONTENT_URI, new String[]{ContactsContract.RawContacts.ACCOUNT_NAME}, ContactsContract.RawContacts.ACCOUNT_TYPE+" = ? AND "+ContactsContract.RawContacts.CONTACT_ID+" = ?", selectionArgs , null);

            while(c.moveToNext()){
                System.out.println("ACC NAME = "+c.getString(c.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_NAME)));
            }*/


            initViews();

            /*new Thread(new Runnable() {
                @Override
                public void run() {
                    ArrayList<Contact> mainListContacts = ContactCacheService.getContacts();
                    int n = 0;
                    for(int i = 0;i<mainListContacts.size();i++){
                        n++;

                        int finalN = n;
                        updateCountLoad(finalN, mainListContacts.size());


                        if(mainListContacts.get(i) != null && mainListContacts.get(i).getDateCreate() != null){
                            Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, mainListContacts.get(i).getIdContact());
                            String idSave = mainListContacts.get(i).getIdContact();
                            if (c == null || c.getCount() == 0) {
                                idSave = contactsService.getIdContactByName(mainListContacts.get(i).getName());
                                if(idSave == null){
                                    continue;
                                }
                            }

                            contactsService.addNoteToContact(idSave, mainListContacts.get(i).getDateCreate().toString(), mainListContacts.get(i).getName());

                        }
                    }
                }
            }).start();*/


            //RealmToJson();

            //System.out.println("SERVICE GO");


            //================
            /*Gson gson = new Gson();
            ArrayList<Contact> lsitMain = ContactCacheService.getAllContacts(null);
            String main = lsitMain.get(0).toString();
            System.out.println("TEXT JSON = "+main);\
            String main2 = gson.toJson(lsitMain.get(0).toString());
            GsonBuilder gsonBuilder;

            System.out.println("TEXT JSON@ = "+main2);
            ContactCacheService.getAllToJson();*/
            //=========================COPYBYREALM
            //ContactCacheService.getAllToJson();
            //Contact c = ContactCacheService.getMaxContactID();
            //System.out.println("MAX ID = " + c.getIdContact() + ", id = " + c.getId());

            toolbarC = ((Postman) getActivity()).getToolbar();

            prefKanbanTouch = mainView.getContext().getSharedPreferences("SortKanban", Context.MODE_PRIVATE);

            initListeners();
            setContacts();
            initAdapter(false);


            if (MainActivity.searchData != null) {

                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(MainActivity.searchData);
                getActivity().findViewById(R.id.plane_icon).callOnClick();
                MainActivity.searchData = null;
            }

            // contactAdapter.defaultListContacts();
            System.out.println("KNONOKJNKJ");

            initContactsBar();
            initRecyclerHashTags();
            initFavoritesPop();

            //if (startSynk)
            if (!ContactsService.checkLoad && !MainActivity.firstRun) {

                System.out.println("START SYNK NEW");

                Storage storage = new Storage(getActivity());
                String path = Environment.getExternalStorageDirectory().getAbsolutePath();
                List<File> listBack = storage.getFiles(path + "/Extime/ExtimeContacts/");
                if (listBack != null) {
                    for (int i = 0; i < listBack.size(); i++) {
                        if ((listBack.get(i).getName().contains("backup_") && !listBack.get(i).getName().equalsIgnoreCase("backup_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backup")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backup_" + MainActivity.versionDebug);
                        }

                        if ((listBack.get(i).getName().contains("backupClipboard_") && !listBack.get(i).getName().equalsIgnoreCase("backupClipboard_" + MainActivity.versionDebug)) || listBack.get(i).getName().equalsIgnoreCase("backupClipboard")) {
                            storage.copy(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/Old backup/" + listBack.get(i).getName());
                            storage.rename(path + "/Extime/ExtimeContacts/" + listBack.get(i).getName(), path + "/Extime/ExtimeContacts/backupClipboard_" + MainActivity.versionDebug);
                        }
                    }
                }


                synkNewContacts();
            }

        }
        setHasOptionsMenu(true);
        checkSelectPopup();

        initListeners();

        getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
        floatingActionMenu.setVisibility(View.VISIBLE);

        getActivity().findViewById(R.id.barFlipper).setVisibility(View.VISIBLE);
        ((MainActivity) mainView.getContext()).setContactsToContent();
        System.out.println("CREATEEEEE END");


        return mainView;
    }


    public void synkNewContacts() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                /*try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }*/

                /*SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
                String last = sharedPreferences.getString("lastOnline", "");
                Cursor cursor;
                try {
                    cursor = getActivity().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, new String[]{ContactsContract.Contacts._ID, ContactsContract.Contacts.DISPLAY_NAME, ContactsContract.Contacts.PHOTO_URI}, ContactsContract.Contacts.CONTACT_LAST_UPDATED_TIMESTAMP + ">=?", new String[]{last}, null);
                    getActivity().startManagingCursor(cursor);
                } catch (NullPointerException e) {
                    return;
                }*/

                //int c = 0;
                //ArrayList<Contact> contacts = new ArrayList<>();

                //SharedPreferences mSettings = getSharedPreferences("TIMES", Context.MODE_PRIVATE);
                //String last = sharedPreferences.getString("lastOnline", String.valueOf(new Timestamp(System.currentTimeMillis())));

                Cursor cursor = getContext().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, new String[]{ContactsContract.Contacts._ID, ContactsContract.Contacts.DISPLAY_NAME, ContactsContract.Contacts.LOOKUP_KEY}, null, null, null);
                //getActivity().startManagingCursor(cursor);
                //int c = 0;
                //ArrayList<Contact> contacts = new ArrayList<>();
            /*if (cursor.getCount() > 0)
            {

                while (cursor.moveToNext())
                {
                    System.out.println(c+" ID "+cursor.getString(0)+" NAME"+cursor.getString(1));
                    Contact contact = new Contact();
                    contact.setId(Long.parseLong(cursor.getString(0)));
                    contact.setName(cursor.getString(1));
                    //contact.addPhone(cursor.getString(2));
                    contacts.add(contact);
                    //c++;
                }
            }*/

                ArrayList<Long> listId = new ArrayList<>();

                if (cursor != null && cursor.getCount() > 0) {
                    int c = 0;


                    //Realm realm = Realm.getDefaultInstance(); //+

                    //ArrayList<Contact> listContacts = new ArrayList<Contact>(realm.where(Contact.class).isEmpty("listOfContacts").findAll());
                    /*String userName = ContactsService.getDisplayName(getContext(), "0");
                    if (userName != null && !userName.isEmpty()) {
                        System.out.println("USER NAME = " + userName);
                    }*/
                    //System.out.println("SIZE NEW = " + listContacts.size());
                    //ArrayList<String> listOfNames = new ArrayList<>();

                    System.out.println("Check New Start");
                    while (cursor.moveToNext()) {
                        c++;
                        Realm realm = Realm.getDefaultInstance(); //+
                        try {
                            //System.out.println("Contact number = " + c + ", id = " + cursor.getString(0) + ", name = " + cursor.getString(1) + ", key = " + cursor.getString(2));
                            boolean findContact = false;

                            /*for(Contact contact : listContacts){
                             *//*if(contact == null) System.out.println("Check New null");
                                if(contact.getIdContact() == null) System.out.println("Check New null 2");
                                if(cursor.getString(0) == null ) System.out.println("Check New null 3");*//*
                                if(contact.getIdContact() != null && contact.getIdContact().equals(cursor.getString(0))){
                                    findContact = true;
                                    break;
                                }
                            }*/

                            if (ContactCacheService.checkNewContact(cursor.getString(0), realm)) {
                                findContact = true;
                            }


                            if (!findContact /*!ContactCacheService.checkNewContact(cursor.getString(0))*/ /*&& (cursor.getString(1) != null && !ContactCacheService.checkNewContactByName(cursor.getString(1)))*/) {


                                ArrayList<String> listPhones = contactsService.getContactPhones(cursor.getString(0));
                                if (listPhones == null || listPhones.size() == 0) continue;

                                boolean checkP = false;
                                if (listPhones.size() == 1 && listPhones.get(0).equals("+000000000000")) {
                                    if (ContactCacheService.checkNewContactByName(cursor.getString(1).trim(), realm)) {
                                        checkP = true;
                                    }
                                } else {
                                    for (int i = 0; i < listPhones.size(); i++) {

                                        if (listPhones.get(i) != null && listPhones.get(i).length() > 0) {
                                            if (ContactCacheService.searchByPhoneNew(listPhones.get(i), realm)) {
                                                checkP = true;
                                                break;
                                            }
                                        }
                                    }

                                }
                                if (checkP) continue;

                                /*if(listPhones.size() == 1 && listPhones.get(0) != null && listPhones.get(0).equals(""))
                                for(int i = 0;i<listPhones.size();i++){

                                }*/

                                Contact contact = new Contact();
                                contact.setIdContact(cursor.getString(0));
                                contact.setName(cursor.getString(1));

                                //listOfNames.add(cursor.getString(1));

                                Date date = new Date();
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(date);
                                Time time = getRandomDate();
                                time.setHours(cal.get(Calendar.HOUR_OF_DAY));
                                time.setMinutes(cal.get(Calendar.MINUTE));
                                time.setSeconds(cal.get(Calendar.SECOND));
                                //contact.setDateCreate(date);
                                contact.time = time.toString();

                                contact.call2me = true;
                                contact.isNew = true;
                                contact.isCreate = false;

                                //contact.setPhotoURL(cursor.getString(2));

                                ContactCacheService.justInsertContactNewSynk(contact, realm);
                                contact = ContactCacheService.getContactByIdSynk(contact.getId(), realm);
                                Contact company = contact.fillData(getContext(), contactsService, FillDataEnums.NEW, contactAdapter);
                                if (company != null) {
                                    listId.add(company.getId());
                                }
                                //contact.listOfContacts = null;
                                listId.add(contact.getId());
                                System.out.println("ADD SUCCESS");

                            }
                            realm.close();
                            //c++;
                        } catch (IllegalStateException e) {
                            e.printStackTrace();
                        } catch (StaleDataException e1) {
                            e1.printStackTrace();
                        } catch (CursorIndexOutOfBoundsException e2) {
                            e2.printStackTrace();
                        } finally {
                            realm.close();
                        }
                    }

                    //realm.close();
                    System.out.println("Check New End");
                }
                //if(cursor != null) cursor.close();

                if (MainActivity.destroyApp) {
                    System.out.println("synk Compact = " + Realm.compactRealm(Realm.getDefaultConfiguration()));
                }

                if (listId.size() > 0) {
                    EventBus.getDefault().post(new AddContactsToList(listId));
                }

                if (MainActivity.destroyApp) {
                    System.out.println("synk 2 Compact = " + Realm.compactRealm(Realm.getDefaultConfiguration()));
                }

                //System.out.println("COUNT NEW = " + cursor.getCount());


            }
        }).start();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(AddContactsToList event) {
        listNewContacts = new ArrayList<>();
        listNewContacts.addAll(event.getList());

        contactAdapter.addContactNew(listNewContacts);

        initContactsBar();
        initRecyclerHashTags();
        initFavoritesPop();

        //EventBus.getDefault().post(new UpdateFile());
    }

    ;

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(NotifyAdapter event) {
        contactAdapter.notifyDataSetChanged();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(SynkNewC event) {
        MessageToLoad = 0;
        synkNewContacts();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(AddContact event) {
        contactAdapter.addContact(ContactCacheService.getContactById(event.getId()));

        initContactsBar();
        initRecyclerHashTags();
        initFavoritesPop();
    }

    ;

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(RemoveContact event) {
        contactAdapter.removeContactById(ContactCacheService.getContactById(event.getId()));
        contactAdapter.notifyDataSetChanged();
        initContactsBar();
        initRecyclerHashTags();
        initFavoritesPop();
    }

    ;

    public void RealmToJson() {
        JSONArray js = new JSONArray();
        System.out.println("START CONVERT JSON");

        Gson gson = new Gson();

        for (Contact contact : ContactCacheService.getAllContacts(null)) {

            try {
                JSONObject obj = new JSONObject();
                obj.put("id", contact.getId());
                obj.put("name", contact.getName());
                obj.put("company", contact.getCompany());
                obj.put("companyPossition", contact.getCompanyPossition());
                obj.put("adress", contact.getAdress());
                obj.put("webSite", contact.webSite);
                obj.put("hashtag", contact.hashtag);
                obj.put("call2me", contact.call2me);
                obj.put("isNew", contact.isNew);
                obj.put("isCreate", contact.isCreate);
                obj.put("time", contact.time);
                obj.put("idContact", contact.getIdContact());
                obj.put("photoURL", contact.photoURL);
                obj.put("color", contact.color);
                obj.put("hasViber", contact.hasViber);
                obj.put("hasTelegram", contact.hasTelegram);
                obj.put("hasFacebook", contact.hasFacebook);
                obj.put("hasWhatsapp", contact.hasWhatsapp);
                obj.put("hasSkype", contact.hasSkype);
                obj.put("hasLinked", contact.hasLinked);
                obj.put("hasInst", contact.hasInst);
                obj.put("hasVk", contact.hasVk);

                /*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss tt");
                Date parsedDate = sdf.parse(contact.getDateCreate().toString());
                obj.put("dateCreate",parsedDate);*/

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.ENGLISH);
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));

                //String mat = df.format(contact.getDateCreate());
                obj.put("dateCreate", dateFormat.format(contact.getDateCreate()));

                if (contact.listOfAdress != null && !contact.listOfAdress.isEmpty()) {
                    JSONArray arrayAddress = new JSONArray();
                    for (ListAdress listAdress : contact.listOfAdress) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("address", listAdress.getAddress());

                        arrayAddress.put(jsonObject);
                    }
                    obj.put("listOfAdress", arrayAddress);
                }

                if (contact.getSocialModel() != null) {
                    JSONObject jsonObject = new JSONObject();
                    jsonObject.put("facebookLink", contact.getSocialModel().getFacebookLink());
                    jsonObject.put("vkLink", contact.getSocialModel().getVkLink());
                    jsonObject.put("linkedInLink", contact.getSocialModel().getLinkedInLink());
                    jsonObject.put("instagramLink", contact.getSocialModel().getInstagramLink());
                    jsonObject.put("whatsappLink", contact.getSocialModel().getWhatsappLink());
                    jsonObject.put("viberLink", contact.getSocialModel().getViberLink());
                    jsonObject.put("telegramLink", contact.getSocialModel().getTelegramLink());
                    jsonObject.put("skypeLink", contact.getSocialModel().getSkypeLink());
                    obj.put("socialModel", jsonObject);
                }

                if (contact.listOfContactInfo != null && !contact.listOfContactInfo.isEmpty()) {
                    JSONArray arrayContactInfo = new JSONArray();
                    for (ContactInfo contactInfo : contact.listOfContactInfo) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("id", contactInfo.id);
                        jsonObject.put("type", contactInfo.type);
                        jsonObject.put("value", contactInfo.value);
                        jsonObject.put("carrier", null);
                        jsonObject.put("region", null);
                        jsonObject.put("newValue", contactInfo.getNewValue());
                        jsonObject.put("typeData", contactInfo.typeData);
                        jsonObject.put("isEmail", contactInfo.isEmail);
                        jsonObject.put("isPhone", contactInfo.isPhone);
                        jsonObject.put("isGeo", contactInfo.isGeo);
                        jsonObject.put("isNote", contactInfo.isNote);
                        jsonObject.put("isConfirmed", contactInfo.isConfirmed);
                        arrayContactInfo.put(jsonObject);
                    }
                    obj.put("listOfContactInfo", arrayContactInfo);
                }

                if (contact.accountTypes != null && !contact.accountTypes.isEmpty()) {
                    JSONArray arrayAccountType = new JSONArray();
                    for (ListAdress listAdress : contact.accountTypes) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("address", listAdress.getAddress());
                        arrayAccountType.put(jsonObject);
                    }
                    obj.put("accountTypes", arrayAccountType);
                }

                if (contact.getListOfHashtags() != null && !contact.getListOfHashtags().isEmpty()) {
                    JSONArray arrayHashtags = new JSONArray();
                    for (HashTag hashTag : contact.getListOfHashtags()) {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("hashTagValue", hashTag.getHashTagValue());
                        jsonObject.put("typeHashtag", hashTag.getTypeHashtag());
                        jsonObject.put("date", dateFormat.format(hashTag.getDate()));
                    }
                    obj.put("listOfHashtags", arrayHashtags);
                }

                if (contact.listOfContacts != null && !contact.listOfContacts.isEmpty()) {
                    JSONArray arrayContacts = new JSONArray();
                    for (Contact contact1 : contact.listOfContacts) {
                        JSONObject jsonObject = new JSONObject();

                        //==================================================================================================
                        jsonObject.put("id", contact1.getId());
                        jsonObject.put("name", contact1.getName());
                        jsonObject.put("company", contact1.getCompany());
                        jsonObject.put("companyPossition", contact1.getCompanyPossition());
                        jsonObject.put("adress", contact1.getAdress());
                        jsonObject.put("webSite", contact1.webSite);
                        jsonObject.put("hashtag", contact1.hashtag);
                        jsonObject.put("call2me", contact1.call2me);
                        jsonObject.put("isNew", contact1.isNew);
                        jsonObject.put("isCreate", contact1.isCreate);
                        jsonObject.put("time", contact1.time);
                        jsonObject.put("idContact", contact1.getIdContact());
                        jsonObject.put("photoURL", contact1.photoURL);
                        jsonObject.put("color", contact1.color);
                        jsonObject.put("hasViber", contact1.hasViber);
                        jsonObject.put("hasTelegram", contact1.hasTelegram);
                        jsonObject.put("hasFacebook", contact1.hasFacebook);
                        jsonObject.put("hasWhatsapp", contact1.hasWhatsapp);
                        jsonObject.put("hasSkype", contact1.hasSkype);
                        jsonObject.put("hasLinked", contact1.hasLinked);
                        jsonObject.put("hasInst", contact1.hasInst);
                        jsonObject.put("hasVk", contact1.hasVk);

                /*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss tt");
                Date parsedDate = sdf.parse(contact.getDateCreate().toString());
                obj.put("dateCreate",parsedDate);*/

                        /*SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'",Locale.ENGLISH);
                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));*/

                        //String mat = df.format(contact.getDateCreate());
                        jsonObject.put("dateCreate", dateFormat.format(contact1.getDateCreate()));

                        if (contact1.listOfAdress != null && !contact1.listOfAdress.isEmpty()) {
                            JSONArray arrayAddress = new JSONArray();
                            for (ListAdress listAdress : contact1.listOfAdress) {
                                JSONObject jsonObject2 = new JSONObject();
                                jsonObject2.put("address", listAdress.getAddress());

                                arrayAddress.put(jsonObject2);
                            }
                            jsonObject.put("listOfAdress", arrayAddress);
                        }

                        if (contact1.getSocialModel() != null) {
                            JSONObject jsonObject2 = new JSONObject();
                            jsonObject2.put("facebookLink", contact1.getSocialModel().getFacebookLink());
                            jsonObject2.put("vkLink", contact1.getSocialModel().getVkLink());
                            jsonObject2.put("linkedInLink", contact1.getSocialModel().getLinkedInLink());
                            jsonObject2.put("instagramLink", contact1.getSocialModel().getInstagramLink());
                            jsonObject2.put("whatsappLink", contact1.getSocialModel().getWhatsappLink());
                            jsonObject2.put("viberLink", contact1.getSocialModel().getViberLink());
                            jsonObject2.put("telegramLink", contact1.getSocialModel().getTelegramLink());
                            jsonObject2.put("skypeLink", contact1.getSocialModel().getSkypeLink());
                            obj.put("socialModel", jsonObject2);
                        }

                        if (contact1.listOfContactInfo != null && !contact1.listOfContactInfo.isEmpty()) {
                            JSONArray arrayContactInfo = new JSONArray();
                            for (ContactInfo contactInfo : contact.listOfContactInfo) {
                                JSONObject jsonObject2 = new JSONObject();
                                jsonObject2.put("id", contactInfo.id);
                                jsonObject2.put("type", contactInfo.type);
                                jsonObject2.put("value", contactInfo.value);
                                jsonObject2.put("carrier", null);
                                jsonObject2.put("region", null);
                                jsonObject2.put("newValue", contactInfo.getNewValue());
                                jsonObject2.put("typeData", contactInfo.typeData);
                                jsonObject2.put("isEmail", contactInfo.isEmail);
                                jsonObject2.put("isPhone", contactInfo.isPhone);
                                jsonObject2.put("isGeo", contactInfo.isGeo);
                                jsonObject2.put("isNote", contactInfo.isNote);
                                jsonObject2.put("isConfirmed", contactInfo.isConfirmed);
                                arrayContactInfo.put(jsonObject2);
                            }
                            jsonObject.put("listOfContactInfo", arrayContactInfo);
                        }

                        if (contact1.accountTypes != null && !contact1.accountTypes.isEmpty()) {
                            JSONArray arrayAccountType = new JSONArray();
                            for (ListAdress listAdress : contact1.accountTypes) {
                                JSONObject jsonObject2 = new JSONObject();
                                jsonObject2.put("address", listAdress.getAddress());
                                arrayAccountType.put(jsonObject2);
                            }
                            jsonObject.put("accountTypes", arrayAccountType);
                        }

                        if (contact1.getListOfHashtags() != null && !contact1.getListOfHashtags().isEmpty()) {
                            JSONArray arrayHashtags = new JSONArray();
                            for (HashTag hashTag : contact1.getListOfHashtags()) {
                                JSONObject jsonObject2 = new JSONObject();
                                jsonObject2.put("hashTagValue", hashTag.getHashTagValue());
                                jsonObject2.put("typeHashtag", hashTag.getTypeHashtag());
                                jsonObject2.put("date", dateFormat.format(hashTag.getDate()));
                            }
                            jsonObject.put("listOfHashtags", arrayHashtags);
                        }

                        jsonObject.put("listOfContacts", null);

                        //==================================================================================================
                        arrayContacts.put(jsonObject);
                    }
                    obj.put("listOfContacts", arrayContacts);
                }


                js.put(obj);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }


        System.out.println("END CONVERT JSON");

        String main = js.toString();
        System.out.println("JSON = " + main);


        try {
            JSONArray array = new JSONArray(main);
            Contact contact = gson.fromJson(array.get(0).toString(), Contact.class);
            ContactCacheService.updateContact(contact, null);
            System.out.println("CONTACT FROM JSON = " + contact.getDateCreate());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        System.out.println("END CONVERT JSON 2");

    }


    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions,
                                           int[] grantResults) {

        if (requestCode == PERMISSION_REQUEST_CALL_PHONE) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                callContact(selectedContactForCall);
            } else {
                Toast.makeText(mainView.getContext(), "РўСЂРµР±СѓРµС‚СЃСЏ РїРѕРґС‚РІРµСЂРґРёС‚СЊ СЂР°Р·СЂРµС€РµРЅРёРµ РґР»СЏ РґРѕСЃС‚СѓРїР° Рє РєРѕРЅС‚Р°РєС‚Р°Рј", Toast.LENGTH_SHORT).show();
            }
        }
        if (requestCode == PERMISSION_REQUEST_CONTACT_WRITE) {
            deleteSelectedContacts();
        } else {
            Toast.makeText(mainView.getContext(), "РўСЂРµР±СѓРµС‚СЃСЏ РїРѕРґС‚РІРµСЂРґРёС‚СЊ СЂР°Р·СЂРµС€РµРЅРёРµ РґР»СЏ РґРѕСЃС‚СѓРїР° Рє РєРѕРЅС‚Р°РєС‚Р°Рј", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRetainInstance(true);
    }

    private void setNewTagsForProfilePopup(RealmList<HashTag> listOfHashtags) {
        LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : listOfHashtags) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    System.out.println("HASH 44");
                    contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                }
            });
            //     text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
            containerHashTags.addView(text);
        }
    }

    boolean ccc = false;

    public void showProf(Contact contact) {
        //ccc = true;

        if (popupContactsCompany != null) popupContactsCompany.setVisibility(View.GONE);

        companyProfilePopup.setVisibility(View.GONE);

        showProfilePopUp(contact);

        //ccc = false;
    }

    public void openDialodDataProfile(ArrayList<ContactInfo> list, Contact selectedContact) {
        AlertDialog.Builder builder = new AlertDialog.Builder(mainView.getContext());

        View view = getLayoutInflater().inflate(R.layout.select_email_phone_popup, null);

        //final float scale = getResources().getDisplayMetrics().density;

        builder.setView(view);
        AlertDialog alertDialog = builder.create();

        RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.recycleUpdateData);
        //ViewGroup.LayoutParams params = recyclerView.getLayoutParams();

        //params.height = (int) ((int) 110 * scale);


        DialogDataContactSelect dialogAdapter = new DialogDataContactSelect(list, mainView.getContext(), view, recyclerView);

        //recyclerView.requestLayout();

        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {

                ArrayList<ContactInfo> listS = dialogAdapter.getSeleted();
                if (listS.size() == 0) {
                    Toast.makeText(mainView.getContext(), "Select data", Toast.LENGTH_SHORT).show();
                } else {


                    if (listS.get(0).isPhone) {

                        if (((CheckBox) view.findViewById(R.id.checkExtractInb)).isChecked() && !listS.get(0).isPrimary) {

                            contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                            for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                if (ci.isPhone && ci.isPrimary) {
                                    contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                    ContactCacheService.setPrimaryInfo(ci, false);
                                }
                            }

                            ContactCacheService.setPrimaryInfo(listS.get(0), true);
                            Toast.makeText(mainView.getContext(), "Set as default", Toast.LENGTH_SHORT).show();

                        } else if (!((CheckBox) view.findViewById(R.id.checkExtractInb)).isChecked() && listS.get(0).isPrimary) {

                            contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                            for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                if (ci.isPhone && ci.isPrimary) {
                                    contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                    ContactCacheService.setPrimaryInfo(ci, false);
                                }
                            }

                            Toast.makeText(mainView.getContext(), "Deleted from default", Toast.LENGTH_SHORT).show();
                        }

                        intentPhone(listS.get(0).value);
                    } else {

                        if (listS.size() == 1) {
                            if (((CheckBox) view.findViewById(R.id.checkExtractInb)).isChecked() && !listS.get(0).isPrimary) {

                                contactsService.setMailIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                                for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                    if (ci.isEmail && ci.isPrimary) {
                                        contactsService.setMailIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                        ContactCacheService.setPrimaryInfo(ci, false);
                                    }
                                }

                                ContactCacheService.setPrimaryInfo(listS.get(0), true);
                                Toast.makeText(mainView.getContext(), "Set as default", Toast.LENGTH_SHORT).show();

                            } else if (!((CheckBox) view.findViewById(R.id.checkExtractInb)).isChecked() && listS.get(0).isPrimary) {

                                contactsService.setMailIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                                for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                    if (ci.isEmail && ci.isPrimary) {
                                        contactsService.setMailIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                        ContactCacheService.setPrimaryInfo(ci, false);
                                    }
                                }

                                Toast.makeText(mainView.getContext(), "Deleted from default", Toast.LENGTH_SHORT).show();
                            }
                        }

                        SharedPreferences mSettings;
                        mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                        Set<String> set = mSettings.getStringSet("accounts", null);

                        String finalReplyFrom = null;

                        if (set != null && !set.isEmpty()) {

                            for (String s : set) {
                                finalReplyFrom = s;
                                break;
                            }

                        }

                        if (finalReplyFrom == null) {

                            ArrayList<String> sTo = new ArrayList<>();
                            ArrayList<String> sName = new ArrayList<>();

                            for (ContactInfo i : listS) {
                                sTo.add(i.value);
                                sName.add(selectedContact.getName());
                            }

                            ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                        } else {
                            ArrayList<String> sTo = new ArrayList<>();
                            ArrayList<String> sName = new ArrayList<>();

                            for (ContactInfo i : listS) {
                                sTo.add(i.value);
                                sName.add(selectedContact.getName());
                            }

                            ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                        }


                    }


                }


                //updateContactSwipe(clipboard);

            }
        });


        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {

            }
        });

        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 50, 0);
                negButton.setLayoutParams(params);

                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
                recyclerView.setLayoutManager(mLayoutManager);
                recyclerView.setAdapter(dialogAdapter);


                view.findViewById(R.id.checkExtractInb).setVisibility(View.GONE);


            }
        });

        alertDialog.show();

    }


    public void showProfilePopUp(final Contact contact) {
        System.out.println(" CLOSE 44");
        // closeOtherPopup();

        //if (!ccc)
        companyProfilePopup = null;

        profilePopUp = (FrameLayout) mainView.getRootView().findViewById(R.id.profile_popup);
        if (profilePopUp == null)
            profilePopUp = (FrameLayout) getActivity().findViewById(R.id.profile_popup);


        profilePopUp.findViewById(R.id.updateTextView).setVisibility(View.GONE);


        //================================= new


        try {
            Calendar current = Calendar.getInstance();
            Calendar contactDate = Calendar.getInstance();
            current.setTime(new Date());
            contactDate.setTime(contact.getDateCreate());
            String timeStr = "";
            if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && current.get(Calendar.MONTH) == contactDate.get(Calendar.MONTH) && current.get(Calendar.DAY_OF_MONTH) == contactDate.get(Calendar.DAY_OF_MONTH)) {

                timeStr = Time.valueOf(contact.time).getHours() + ":";
                if (Time.valueOf(contact.time).getMinutes() < 10) timeStr += "0";
                timeStr += Time.valueOf(contact.time).getMinutes();
            } else if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && (current.get(Calendar.MONTH) != contactDate.get(Calendar.MONTH) || current.get(Calendar.DAY_OF_MONTH) != contactDate.get(Calendar.DAY_OF_MONTH))) {
                //System.out.println(contactDate.get(Calendar.MO));

                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + contactDate.get(Calendar.DAY_OF_MONTH);
            } else {

                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + String.valueOf(contactDate.get(Calendar.YEAR))/*.substring(2)*/;
                //System.out.println("DATE NEW = "+timeStr);
            }


            ((TextView) profilePopUp.findViewById(R.id.cardTime)).setText(/*getUpdTime(contact.getDateCreate(), Time.valueOf(contact.time))*/ timeStr);
        } catch (Exception e) {
            System.out.println("ERROR TO GET TIME Contact Adapter");
        }


        //===


        int count_phone = 0;
        int count_email = 0;
        if (contact.getListOfContactInfo() != null) {
            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                if (contactInfo.isEmail) count_email++;
                else if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    count_phone++;
            }

            if (count_phone != 0) {
                profilePopUp.findViewById(R.id.card_phone_contact).setVisibility(View.VISIBLE);
                ((TextView) profilePopUp.findViewById(R.id.text_phone_card)).setText(String.valueOf(count_phone));
                profilePopUp.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                profilePopUp.findViewById(R.id.card_phone_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        int count_E = 0;

                        ArrayList<ContactInfo> listEmails = new ArrayList<>();

                        for (ContactInfo i : contact.getListOfContactInfo()) {
                            if (i.isPhone) {
                                count_E++;
                                listEmails.add(i);
                            }
                        }

                        if (count_E == 1) {
                            boolean findPrimary = false;
                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000") && contactInfo.isPrimary) {
                                    intentPhone(contactInfo.value);
                                    findPrimary = true;
                                    break;
                                }
                            }

                            if (!findPrimary) {
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000")) {
                                        intentPhone(contactInfo.value);
                                        break;
                                    }
                                }
                            }

                        } else {
                            openDialodDataProfile(listEmails, contact);
                        }
                    }
                });

            } else profilePopUp.findViewById(R.id.card_phone_contact).setVisibility(View.GONE);

            if (count_email != 0) {
                profilePopUp.findViewById(R.id.email_contact).setVisibility(View.VISIBLE);
                ((TextView) profilePopUp.findViewById(R.id.text_email_card)).setText(String.valueOf(count_email));
                profilePopUp.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                profilePopUp.findViewById(R.id.email_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        int count_E = 0;

                        ArrayList<ContactInfo> listEmails = new ArrayList<>();

                        for (ContactInfo i : contact.getListOfContactInfo()) {
                            if (i.isEmail) {
                                count_E++;
                                listEmails.add(i);
                            }
                        }

                        if (count_E == 1) {

                            boolean findPrimary = false;
                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                if (contactInfo.isEmail && contactInfo.isPrimary) {
                                    //intentEmail(contactInfo.value);

                                    SharedPreferences mSettings;
                                    mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                    Set<String> set = mSettings.getStringSet("accounts", null);

                                    String finalReplyFrom = null;

                                    if (set != null && !set.isEmpty()) {

                                        for (String s : set) {
                                            finalReplyFrom = s;
                                            break;
                                        }

                                    }

                                    if (finalReplyFrom == null) {

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add(contactInfo.value);
                                        sName.add(contact.getName());

                                        ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);
/*
                                    try {
                                        Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                    } catch (NullPointerException e) {
                                        e.printStackTrace();
                                    }

                                    return;*/
                                        break;
                                    }

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add(contactInfo.value);
                                    sName.add(contact.getName());

                                    ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                    findPrimary = true;
                                    break;
                                }
                            }

                            if (!findPrimary) {
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.isEmail) {
                                        //intentEmail(contactInfo.value);

                                        SharedPreferences mSettings;
                                        mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                        Set<String> set = mSettings.getStringSet("accounts", null);

                                        String finalReplyFrom = null;

                                        if (set != null && !set.isEmpty()) {

                                            for (String s : set) {
                                                finalReplyFrom = s;
                                                break;
                                            }

                                        }

                                        if (finalReplyFrom == null) {

                                            ArrayList<String> sTo = new ArrayList<>();
                                            ArrayList<String> sName = new ArrayList<>();

                                            sTo.add(contactInfo.value);
                                            sName.add(contact.getName());

                                            ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);
                                       /* try {
                                            Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                        } catch (NullPointerException e) {
                                            e.printStackTrace();
                                        }

                                        return;*/
                                            break;
                                        }

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add(contactInfo.value);
                                        sName.add(contact.getName());


                                        ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                        break;
                                    }
                                }
                            }

                        } else {
                            openDialodDataProfile(listEmails, contact);
                        }

                    }
                });

            } else profilePopUp.findViewById(R.id.email_contact).setVisibility(View.GONE);

        }


        //=============================

        try {
            profilePopUp.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    System.out.println("CLICK PROFILE POPUP   22");
                    if (popupUserHashtags != null)
                        if (popupUserHashtags.getVisibility() == View.VISIBLE) {
                            ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                            mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                            containerMost.setLayoutParams(mostParams);
                            ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                            assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                            containerAssistant.setLayoutParams(assistantParams);
                            popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                            popupUserHashtags.setVisibility(View.GONE);


                        }

                    profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                    if (socialPopup != null && socialPopup.getVisibility() == View.VISIBLE)
                        socialPopup.setVisibility(View.GONE);

                    if (popupProfileEditPreviewSocial != null)
                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                    getActivity().findViewById(R.id.popupEditMain).setVisibility(View.GONE);

                    if (companySelectPopup != null) {
                        if (companySelectPopup.getVisibility() == View.VISIBLE) {
                            companySelectPopup.setVisibility(View.GONE);
                        }
                    }

                    /*if (contact.getListOfHashtags().size() == 0) {
                        showProfilePopUp(contact);
                    }*/

                    final String idCo = contact.getIdContact();
                    final long idC = contact.getId();
                    ++number_of_clicks[0];
                    if (!thread_started[0]) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                thread_started[0] = true;
                                try {
                                    Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                    if (number_of_clicks[0] == 1) {
                                        //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                    } else if (number_of_clicks[0] == 2) {

                                        //
                                        getActivity().runOnUiThread(new Runnable() {
                                            @Override
                                            public void run() {
                                                if (profilePopUp.findViewById(R.id.starImg).getVisibility() == View.VISIBLE) {
                                                    profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                                                    if (contact.isFavorite) {

                                                        ContactCacheService.updateFavoriteContact(false, idC);
                                                        ContactsService.updateFaroviteContact(false, idCo, getContext());
                                                        updateFavoriteContactsCount();
                                                        Toast.makeText(getContext(), "Deleted from Favorites", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isImportant) {
                                                        ContactCacheService.updateImportantContact(false, idC);
                                                        updateImportantContactCount();
                                                        Toast.makeText(getContext(), "Deleted from Important", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isFinished) {
                                                        ContactCacheService.updateFinishedContact(false, idC);
                                                        updateFinishedContactCount();
                                                        Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isPause) {
                                                        ContactCacheService.updatePauseContact(false, idC);
                                                        updatePauseContactCount();
                                                        Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isCrown) {
                                                        ContactCacheService.updateCrownContact(false, idC);
                                                        updateCrownContactCount();
                                                        Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isVip) {
                                                        ContactCacheService.updateVipContact(false, idC);
                                                        updateVipContactCount();
                                                        Toast.makeText(getContext(), "Deleted from Vip", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isStartup) {
                                                        ContactCacheService.updateStartupContact(false, idC);
                                                        updateStartupContactCount();
                                                        Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();
                                                    } else if (contact.isInvestor) {
                                                        ContactCacheService.updateInvestorContact(false, idC);
                                                        updateInvestorContactCount();
                                                        Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();
                                                    }

                                                    contactAdapter.notifyDataSetChanged();


                                                } else {
                                                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                                                    profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);
                                                    ContactCacheService.updateFavoriteContact(true, idC);
                                                    ContactsService.updateFaroviteContact(true, idCo, getContext());
                                                    contactAdapter.notifyDataSetChanged();
                                                    updateFavoriteContactsCount();
                                                    Toast.makeText(getContext(), "Successfully added to Favorites", Toast.LENGTH_SHORT).show();

                                                    profilePopUp.findViewById(R.id.starImg).post(new Runnable() {
                                                        @Override
                                                        public void run() {
                                                            profilePopUp.findViewById(R.id.starImg).callOnClick();
                                                        }
                                                    });

                                                }

                                                initFavoritesPop();

                                                //EventBus.getDefault().post(new UpdateFile());

                                            }
                                        });


                                    }
                                    number_of_clicks[0] = 0;
                                    thread_started[0] = false;
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        }).start();
                    }


                }
            });


            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


            profilePopUp.findViewById(R.id.starImg).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int[] location = new int[2];
                    profilePopUp.findViewById(R.id.starImg).getLocationOnScreen(location);
                    System.out.println("X = " + location[0]);
                    System.out.println("Y = " + location[1]);

                    ViewGroup.MarginLayoutParams lp = (ViewGroup.MarginLayoutParams) profilePopUp.findViewById(R.id.popupStar).getLayoutParams();

                    lp.leftMargin = (int) (location[0] - 15.5 * getContext().getResources().getDisplayMetrics().density);


                    lp.topMargin = (int) (2 * getContext().getResources().getDisplayMetrics().density);


                    profilePopUp.findViewById(R.id.popupStar).requestLayout();


                    if (!contact.isFavorite) {
                        ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isImportant) {
                        ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isFinished) {
                        ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isPause) {
                        ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isCrown) {
                        ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isVip) {
                        ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isStartup) {
                        ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(null);
                    }

                    if (!contact.isInvestor) {
                        ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                    } else {
                        ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(null);
                    }


                    profilePopUp.findViewById(R.id.starFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isFavorite) {
                                contact.isFavorite = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                                ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                            } else {

                                ContactsService.updateFaroviteContact(true, contact.getIdContact(), getContext());

                                contact.isFavorite = true;
                                contact.isImportant = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });


                    profilePopUp.findViewById(R.id.impFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isImportant) {
                                contact.isImportant = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isImportant = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });

                    profilePopUp.findViewById(R.id.stopFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isFinished) {
                                contact.isFinished = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }

                                contact.isFinished = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isImportant = false;

                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Finished communication", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });

                    profilePopUp.findViewById(R.id.pauseFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isPause) {
                                contact.isPause = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isPause = true;
                                contact.isFavorite = false;
                                contact.isFinished = false;
                                contact.isImportant = false;

                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Paused communication", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });


                    profilePopUp.findViewById(R.id.crownFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isCrown) {
                                contact.isCrown = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();


                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isCrown = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isImportant = false;
                                contact.isVip = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as Crown", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });


                    profilePopUp.findViewById(R.id.vipFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isVip) {
                                contact.isVip = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from Vip", Toast.LENGTH_SHORT).show();


                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isVip = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isImportant = false;
                                contact.isCrown = false;
                                contact.isStartup = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as Vip", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });

                    profilePopUp.findViewById(R.id.startupFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isStartup) {
                                contact.isStartup = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();


                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isStartup = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isImportant = false;
                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isInvestor = false;

                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as Startup", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });


                    profilePopUp.findViewById(R.id.investorFrame).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Realm realm = Realm.getDefaultInstance(); //+
                            realm.beginTransaction();
                            if (contact.isInvestor) {
                                contact.isInvestor = false;
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();


                            } else {
                                if (contact.isFavorite) {
                                    ContactsService.updateFaroviteContact(false, contact.getIdContact(), getContext());
                                }
                                contact.isInvestor = true;
                                contact.isFavorite = false;
                                contact.isPause = false;
                                contact.isFinished = false;

                                contact.isImportant = false;
                                contact.isCrown = false;
                                contact.isVip = false;
                                contact.isStartup = false;

                                ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(null);

                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                                ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                                ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                                contactAdapter.notifyDataSetChanged();
                                Toast.makeText(getContext(), "Set as Startup", Toast.LENGTH_SHORT).show();
                            }
                            realm.commitTransaction();
                            realm.close();

                            //EventBus.getDefault().post(new UpdateFile());

                            initFavoritesPop();
                        }
                    });

                    profilePopUp.findViewById(R.id.popupStar).setVisibility(View.VISIBLE);

                    profilePopUp.findViewById(R.id.popupStar).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                        }
                    });

                }
            });

            ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
//        ((ImageView) profilePopUp.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web);
            profilePopUp.findViewById(R.id.emailImg).setOnClickListener(v -> {
            });
      /*  profilePopUp.findViewById(R.id.webImg).setOnClickListener(v -> {
        });*/


            LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);
            if (containerHashTags.getChildCount() > 0)
                containerHashTags.removeAllViews();
            for (HashTag hashTag : contact.getListOfHashtags()) {
                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                text.setText(hashTag.getHashTagValue() + " ");
                text.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        System.out.println("HASH 55");


                        contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                        HASHTAG_ADAPTER.setMainHashTag(hashTag.getHashTagValue());

                        if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                            listForSelect = new ArrayList<>();
                            listForSelect.addAll(contactAdapter.getListOfContacts());
                        }

                    }
                });

                text.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View view) {
                        deleteHashTagsFromUser(hashTag.getHashTagValue(), contact);
                        return false;
                    }
                });


                //     text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                containerHashTags.addView(text);
            }

            if (contact.isFavorite || contact.isPause || contact.isFinished || contact.isImportant || contact.isCrown || contact.isVip || contact.isStartup || contact.isInvestor) {
                if (contact.isFavorite) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                } else if (contact.isImportant) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                } else if (contact.isFinished) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                } else if (contact.isPause) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                } else if (contact.isCrown) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                } else if (contact.isVip) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                } else if (contact.isStartup) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                } else if (contact.isInvestor) {
                    ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                }

                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);
            } else {
                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
            }

            if (contact.getListOfHashtags().size() == 0) {
                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.gray));
                text.setText("hashtags");
                text.setOnClickListener(v -> {
                    containerHashTags.removeAllViews();
                    showPopupUserHashtags(contact);
                });
                containerHashTags.addView(text);
            }

            HorizontalScrollView scrollView = (HorizontalScrollView) profilePopUp.findViewById(R.id.scrollHorizontal);
            if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
            scrollView.addView(containerHashTags);
            scrollView.setSmoothScrollingEnabled(false);
            scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
            scrollView.setSmoothScrollingEnabled(true);


            profilePopUp.findViewById(R.id.arrowShowHashtags).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (socialPopup != null) {
                        if (socialPopup.getVisibility() == View.VISIBLE)
                            return;
                        showPopupUserHashtags(contact);
                    } else
                        showPopupUserHashtags(contact);
                }
            });

            if (contact.getSocialModel() != null) {

                SocialModel socialModel = contact.getSocialModel();


                if (socialModel.getFacebookLink() != null) {
                    profilePopUp.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (socialModel.getFacebookLink() != null) {
                                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://facebook.com/" + socialModel.getFacebookLink()));
                                startActivity(intent);
                            }
                        }
                    });
                }

                if (socialModel.getVkLink() != null) {
                    profilePopUp.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (socialModel.getVkLink() != null) {
                                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/" + socialModel.getVkLink()));
                                startActivity(intent);
                            }
                        }
                    });
                }

                if (socialModel.getLinkedInLink() != null) {
                    profilePopUp.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent telegramIntent;
                            try {
                                telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("http://linkedin.com/in/" + socialModel.getLinkedInLink()));
                                startActivity(telegramIntent);
                            } catch (Exception e) {
                            }
                        }
                    });
                }

                if (socialModel.getInstagramLink() != null) {
                    profilePopUp.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent telegramIntent;
                            try {
                                telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("http://instagram.com/" + socialModel.getInstagramLink()));
                                startActivity(telegramIntent);
                            } catch (Exception e) {
                            }
                        }
                    });
                }

                //   if (socialModel.getTelegramLink() != null) {
                getActivity().findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        System.out.println("TTTTTTTTTTTGGGGGGGGGGGGGGGG click");
                        Intent telegramIntent;
                        try {
                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse("http://telegram.me/" + socialModel.getTelegramLink()));
                            startActivity(telegramIntent);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
                //      }

                if (socialModel.getSkypeLink() != null) {
                    profilePopUp.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            try {
                                Intent sky = new Intent("android.intent.action.VIEW");
                                sky.setData(Uri.parse("skype:" + socialModel.getSkypeLink()));
                                startActivity(sky);
                            } catch (Exception e) {
                                Toast.makeText(mainView.getContext(), "Please install skype app", Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                }

                if (socialModel.getViberLink() != null) {
                    profilePopUp.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Uri uri = Uri.parse("tel:" + Uri.encode(socialModel.getViberLink()));
                            Intent intent = new Intent("android.intent.action.VIEW");
                            intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                            intent.setData(uri);
                            startActivity(intent);
                        }
                    });
                }

                if (socialModel.getWhatsappLink() != null) {
                    profilePopUp.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            PackageManager pm = getActivity().getPackageManager();
                            try {
                                PackageInfo info = pm.getPackageInfo("com.whatsapp", PackageManager.GET_META_DATA);
                                Intent waIntent = new Intent(Intent.ACTION_SEND);
                                waIntent.setType("text/plain");
                                waIntent.setPackage("com.whatsapp");
                                waIntent.putExtra(Intent.EXTRA_TEXT, "YOUR TEXT");
                                getActivity().startActivity(Intent.createChooser(waIntent, "Open with..."));
                                //startActivity(waIntent);
                            } catch (PackageManager.NameNotFoundException e) {
                                Toast.makeText(mainView.getContext(), "Please install whatsapp app", Toast.LENGTH_SHORT)
                                        .show();
                            }
                            ;
                        }
                    });
                }

            } else {
                socialModel = new SocialModel();
            }

            profilePopUp.findViewById(R.id.socialsArrowDown).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    showSocialPopup(contact);
                }
            });


            //======================================
/*

            ArrayList<String> list = contactsService.getContactPhones(contact.getIdContact());
            boolean check_phone = false;
            String phoneF = null;
            if (list != null && contact.getListOfContactInfo() != null) {
                for (ContactInfo p2 : contact.getListOfContactInfo()) {
                    if (p2.type.equalsIgnoreCase("phone") || (p2.typeData != null && p2.typeData.equalsIgnoreCase("phone"))) {

                        String str = p2.value;
                        if (phoneF == null || phoneF.equals("+000000000000"))
                            phoneF = str;

                        str = str.replaceAll("[\\s\\-\\+\\(\\)]", "");
                        for (String p : list) {

                            String str2 = p;
                            str2 = str2.replaceAll("[\\s\\-\\+\\(\\)]", "");
                            if (str.equalsIgnoreCase(str2)) {
                                check_phone = true;
                                break;
                            }
                        }
                    }
                    if (check_phone) break;
                }
            }

            if (check_phone) {

                RealmConfiguration contextRealm = new RealmConfiguration.
                        Builder().
                        deleteRealmIfMigrationNeeded().
                        build();
                Realm realm = Realm.getInstance(contextRealm);


                Cursor accountCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ACCOUNT_TYPE, contact.getIdContact());
                if (accountCursor != null && accountCursor.getCount() > 0) {
                    while (accountCursor.moveToNext()) {
                        int accountTypeI = accountCursor.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_TYPE);
                        if (accountTypeI != -1) {
                            String accountType = accountCursor.getString(accountTypeI);
                            //System.out.println("ACC TYPE = "+accountType);
                           */
/* System.out.println("ACC TYPE = "+ accountCursor.getString(1));
                            System.out.println("ACC TYPE = "+ accountCursor.getString(2));*//*

                            if (accountType != null && accountType.contains("telegram") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getTelegramLink() == null || contact.getSocialModel().getTelegramLink().isEmpty())))) {
                                realm.beginTransaction();
                                contact.hasTelegram = true;
                                contact.addAccountType(accountType);
                                if (contact.getSocialModel() == null) {
                                    SocialModel sc = realm.createObject(SocialModel.class);
                                    sc.setTelegramLink(phoneF);
                                    contact.setSocialModel(sc);
                                } else contact.getSocialModel().setTelegramLink(phoneF);

                                realm.commitTransaction();
                            }

                            if (accountType != null) {

                                */
/*try {
                                    if (accountType.contains("viber") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getViberLink() == null || contact.getSocialModel().getViberLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                        realm.beginTransaction();
                                        contact.hasViber = true;
                                        contact.addAccountType(accountType);
                                        if (contact.getSocialModel() == null) {
                                            SocialModel sc = realm.createObject(SocialModel.class);
                                            sc.setViberLink(phoneF);
                                            contact.setSocialModel(sc);
                                        } else contact.getSocialModel().setViberLink(phoneF);

                                        realm.commitTransaction();
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }*//*


                                try {
                                    if (accountType.contains("whatsapp") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getWhatsappLink() == null || contact.getSocialModel().getWhatsappLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                        realm.beginTransaction();
                                        contact.hasWhatsapp = true;
                                        contact.addAccountType(accountType);
                                        if (contact.getSocialModel() == null) {
                                            SocialModel sc = realm.createObject(SocialModel.class);
                                            sc.setWhatsappLink(phoneF);
                                            contact.setSocialModel(sc);
                                        } else contact.getSocialModel().setWhatsappLink(phoneF);

                                        realm.commitTransaction();
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            }
                        }
                    }
                    accountCursor.close();
                }

                realm.close();
            }
*/


            //======================================

            selectedContactPopup = contact;
            lastOpenedProfileId = contact;
            initIconColor(contact, profilePopUp);
            fillProfileData(contact, profilePopUp);
            profilePopUp.setVisibility(View.VISIBLE);
            profilePopUp.setFocusable(true);
            profilePopUp.setClickable(true);
            profilePopUp.requestFocus();

            //================new

            final long idThread = contact.getId();
            new Thread(new Runnable() {
                @Override
                public void run() {
                    Realm realm2 = Realm.getDefaultInstance();
                    Contact selectedContact = ContactCacheService.getContactByIdSynk(idThread, realm2);
                    ArrayList<String> conatctPhones = new ArrayList<>();

                    if (selectedContact.listOfContactInfo != null && !selectedContact.listOfContactInfo.isEmpty()) {
                        for (ContactInfo info : selectedContact.listOfContactInfo) {
                            if ((info.type.equalsIgnoreCase("phone") || (info.typeData != null && info.typeData.equalsIgnoreCase("phone"))) && !info.value.equals("+000000000000")) {
                                conatctPhones.add(info.value);
                            }
                        }
                    }

                    SocialModel scContact = null;
                    if (selectedContact.getSocialModel() != null)
                        scContact = selectedContact.getSocialModel();

                    if (!contactsService.getContactById(selectedContact.getIdContact(), selectedContact.getId(), conatctPhones, scContact)) {
                        System.out.println("ADD NEW CONTACT");

                        long newId = contactsService.saveContact(selectedContact);


                        Realm realm = Realm.getDefaultInstance(); //+

                        realm.beginTransaction();
                        selectedContact.setIdContact(String.valueOf(newId));
                        realm.commitTransaction();

                        realm.close();


                    } else System.out.println(" DON't ADD NEW CONTACT");

                    realm2.close();

                    EventBus.getDefault().post(new UpdateMessengersPreview(contact));

                }
            }).start();

            //===============

            if (openedViews != null) openedViews.add(profilePopUp);

           /* new Thread(new Runnable() {
                @Override
                public void run() {
                    contact.fillData(getContext(), contactsService, FillDataEnums.PREVIEW);
                    showProfilePopUp(contact);
                }
            }).start();*/

            /*Runnable runnable = new Runnable() {
                @Override
                public void run() {

                }
            };

            threadSynkPreview = new Thread(runnable);
            threadSynkPreview.start();*/

        } catch (
                NullPointerException e) {
            e.printStackTrace();
        }
        System.out.println("OPEN PREVIEW END");
    }

    Thread threadSynkPreview;


    public boolean checkClick_facebookEdit = true;

    public void updateMessengers(Contact contact) {

        ArrayList<String> list = contactsService.getContactPhones(contact.getIdContact());
        boolean check_phone = false;
        String phoneF = null;
        if (list != null && contact.getListOfContactInfo() != null) {
            for (ContactInfo p2 : contact.getListOfContactInfo()) {
                if (p2.type.equalsIgnoreCase("phone") || (p2.typeData != null && p2.typeData.equalsIgnoreCase("phone"))) {

                    String str = p2.value;
                    if (phoneF == null || phoneF.equals("+000000000000"))
                        phoneF = str;

                    str = str.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                    for (String p : list) {

                        String str2 = p;
                        str2 = str2.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                        if (str.equalsIgnoreCase(str2)) {
                            check_phone = true;
                            break;
                        }
                    }
                }
                if (check_phone) break;
            }
        }

        if (check_phone) {


            Realm realm = Realm.getDefaultInstance(); //+
            boolean check2 = false;

            Cursor accountCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ACCOUNT_TYPE, contact.getIdContact());
            if (accountCursor != null && accountCursor.getCount() > 0) {
                while (accountCursor.moveToNext()) {
                    int accountTypeI = accountCursor.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_TYPE);
                    if (accountTypeI != -1) {
                        String accountType = accountCursor.getString(accountTypeI);
                        System.out.println("ACC = " + accountType);
                        //System.out.println("ACC TYPE = "+accountType);
                           /* System.out.println("ACC TYPE = "+ accountCursor.getString(1));
                            System.out.println("ACC TYPE = "+ accountCursor.getString(2));*/
                        if (accountType != null && accountType.contains("telegram") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getTelegramLink() == null || contact.getSocialModel().getTelegramLink().isEmpty())))) {
                            realm.beginTransaction();
                            contact.hasTelegram = true;
                            contact.addAccountType(accountType);
                            if (contact.getSocialModel() == null) {
                                SocialModel sc = realm.createObject(SocialModel.class);
                                sc.setTelegramLink(phoneF);
                                contact.setSocialModel(sc);
                            } else contact.getSocialModel().setTelegramLink(phoneF);

                            check2 = true;
                            realm.commitTransaction();
                        }

                        if (accountType != null) {

                                /*try {
                                    if (accountType.contains("viber") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getViberLink() == null || contact.getSocialModel().getViberLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                        realm.beginTransaction();
                                        contact.hasViber = true;
                                        contact.addAccountType(accountType);
                                        if (contact.getSocialModel() == null) {
                                            SocialModel sc = realm.createObject(SocialModel.class);
                                            sc.setViberLink(phoneF);
                                            contact.setSocialModel(sc);
                                        } else contact.getSocialModel().setViberLink(phoneF);

                                        realm.commitTransaction();
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }*/

                            try {
                                if (accountType.contains("whatsapp") && (contact.getSocialModel() == null || (contact.getSocialModel() != null && (contact.getSocialModel().getWhatsappLink() == null || contact.getSocialModel().getWhatsappLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                    realm.beginTransaction();
                                    contact.hasWhatsapp = true;
                                    contact.addAccountType(accountType);
                                    if (contact.getSocialModel() == null) {
                                        SocialModel sc = realm.createObject(SocialModel.class);
                                        sc.setWhatsappLink(phoneF);
                                        contact.setSocialModel(sc);
                                    } else contact.getSocialModel().setWhatsappLink(phoneF);

                                    check2 = true;
                                    realm.commitTransaction();
                                }

                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }
                }
                accountCursor.close();
            }

            realm.close();


            if (check2) initIconColor(contact, profilePopUp);
        }

    }


    public void showSocialPopup(Contact contact) {

        socialPopup = (FrameLayout) getActivity().findViewById(R.id.popupSocial);

        ((ScrollView) socialPopup.findViewById(R.id.scroll)).scrollTo(0, 0);

        socialPopup.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });
        FrameLayout editFrame = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
        editFrame.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
        ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");

        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
        ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);

        // ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or link");

        Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
        LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
        ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);

        //  ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
        ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add username or link");

        //  ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
        Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
        LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
        ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);

        ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add username or link");
        Drawable color412 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image412 = getResources().getDrawable(R.drawable.ic_twitter_white);
        LayerDrawable ld412 = new LayerDrawable(new Drawable[]{color412, image412});
        ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld412);

        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");

        Drawable color413 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image413 = getResources().getDrawable(R.drawable.ic_youtube_white);
        LayerDrawable ld413 = new LayerDrawable(new Drawable[]{color413, image413});
        ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld413);

        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");


        Drawable color4132 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image4132 = getResources().getDrawable(R.drawable.medium_white);
        LayerDrawable ld4132 = new LayerDrawable(new Drawable[]{color4132, image4132});
        ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld4132);
        ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");


        Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
        LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
        ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
        //   ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
        ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add link");

        Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
        LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
        ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

        //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
        ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add link");

        //   ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
        Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
        LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
        ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

        ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add link");

        //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
        Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
        LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
        ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);

        ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add link");


        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
            // ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
            Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
            Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
            LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

        }

        if (contact.getSocialModel() != null) {
            socialModel = contact.getSocialModel();

            if (socialModel.getFacebookLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);

                String link = socialModel.getFacebookLink();
                boolean checkich = false;
                try {
                    String checkFacebook = link.substring(0, 37);
                    if (checkFacebook.equals("https://www.facebook.com/profile.php?")) {
                        link = link.substring(37, link.length());
                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                        checkich = true;
                    }
                } catch (Exception e) {

                    e.printStackTrace();
                }
                if (!checkich) {
                    try {
                        //String checkFacebook = link.substring(0, 21);
                        String checkFacebook2 = link.substring(0, 25);
                        if (link.contains("https://facebook.com/")) {
                            link = link.substring(21, link.length());
                            if (link.contains("profile.php")) {
                                link = link.substring(link.indexOf(".php") + 5, link.length());
                            }
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        } else if (link.contains("https://m.facebook.com/")) {
                            link = link.substring(23, link.length());
                            if (link.contains("profile.php")) {
                                link = link.substring(link.indexOf(".php") + 5, link.length());
                            }
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        } else if (checkFacebook2.equals("https://www.facebook.com/")) {
                            link = link.substring(25, link.length());
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        } else if (link.contains("php?")) {
                            int index = link.indexOf("php?");
                            link = link.substring(index + 4, link.length());
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                //   System.out.println(checkFacebook+", "+link);
                if (!checkich)
                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(contact.getSocialModel().getFacebookLink());
            }
            if (socialModel.getVkLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                try {
                    String link = socialModel.getVkLink();
                    String checkVK = link.substring(0, 8);
                    if (link.contains("https://vk.com/")) {
                        System.out.println("TRUE VK LINK");
                        link = link.substring(15, link.length());
                        System.out.println("TRUE VK LINK2 = " + link);
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("https://m.vk.com/")) {
                        link = link.substring(17, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                    } else if (link.contains("m.vk.com/")) {
                        link = link.substring(9, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("vk.com/")) {
                        link = link.substring(7, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("https://www.vk.com/")) {
                        link = link.substring(19, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                    } else
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                } catch (Exception e) {
                    e.printStackTrace();
                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(contact.getSocialModel().getVkLink());
                }
            }
            if (socialModel.getLinkedInLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});
                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);

                try {
                    String link = socialModel.getLinkedInLink();
                    if (link.contains("/in/")) {
                        String sub = link.substring(link.indexOf("/in/") + 4, link.length());
                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                    } else {
                        String sub = link.substring(link.length() - 20, link.length());
                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(contact.getSocialModel().getLinkedInLink());
                }

            }
            if (socialModel.getInstagramLink() != null) {
                // ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);


                String inst = contact.getSocialModel().getInstagramLink();

                if (inst.contains(".com/")) {
                    int ind = inst.indexOf(".com/");
                    String outLink = inst.substring(ind + 5, inst.length());

                    if (outLink.contains("?")) {
                        int in = outLink.indexOf("?");
                        outLink = outLink.substring(0, in);
                    }

                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                } else
                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

            }

            if (socialModel.getTwitterLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colori = new ColorDrawable(Color.parseColor("#2ca7e0"));
                Drawable imagei = getResources().getDrawable(R.drawable.ic_twitter_white);
                LayerDrawable ldi2 = new LayerDrawable(new Drawable[]{colori, imagei});

                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ldi2);

                try {
                    /*String link = socialModel.getLinkedInLink();
                    String sub = link.substring(link.length() - 20, link.length());*/
                    if (socialModel.getTwitterLink().contains(".com/")) {
                        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                    } else
                        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                } catch (Exception e) {
                    e.printStackTrace();
                    //((TextView) socialPopup.findViewById(R.id.link_text)).setText(contact.getSocialModel().getLinkedInLink());
                }
            }

            if (socialModel.getYoutubeLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colori = new ColorDrawable(Color.parseColor("#ed2524"));
                Drawable imagei = getResources().getDrawable(R.drawable.ic_youtube_white);
                LayerDrawable ldi2 = new LayerDrawable(new Drawable[]{colori, imagei});
                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ldi2);

                try {
                    /*String link = socialModel.getLinkedInLink();
                    String sub = link.substring(link.length() - 20, link.length());*/
                    if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                        if (socialModel.getYoutubeLink().contains("user/")) {
                            String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                        } else if (socialModel.getYoutubeLink().contains("channel/")) {
                            String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                        }
                    } else
                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                } catch (Exception e) {
                    e.printStackTrace();
                    //((TextView) socialPopup.findViewById(R.id.link_text)).setText(contact.getSocialModel().getLinkedInLink());
                }
            }

            if (socialModel.getMediumLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colori = new ColorDrawable(Color.parseColor("#000000"));
                Drawable imagei = getResources().getDrawable(R.drawable.medium_white);
                LayerDrawable ldi2 = new LayerDrawable(new Drawable[]{colori, imagei});
                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldi2);

                String inst = contact.getSocialModel().getMediumLink();

                if (inst.contains(".com/")) {
                    int ind = inst.indexOf(".com/");
                    String outLink = inst.substring(ind + 5, inst.length());

                    if (outLink.contains("?")) {
                        int in = outLink.indexOf("?");
                        outLink = outLink.substring(0, in);
                    }

                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(outLink);
                } else
                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(contact.getSocialModel().getMediumLink());
            }


            if (socialModel.getViberLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);

                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(contact.getSocialModel().getViberLink());
            }
            if (socialModel.getWhatsappLink() != null) {
                // ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(contact.getSocialModel().getWhatsappLink());
            }

            if (socialModel.getTelegramLink() != null) {
                String tel = contact.getSocialModel().getTelegramLink();
                if (tel.contains(".me/")) {
                    int indexx = tel.indexOf(".me/");
                    String outLink = tel.substring(indexx + 4, tel.length());
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                } else if (tel.contains("?p=")) {
                    int indexx = tel.indexOf("?p=");
                    String outLink = tel.substring(indexx + 3, tel.length());
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                } else
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());


            }


            if (socialModel.getSkypeLink() != null) {
                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);

                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(contact.getSocialModel().getSkypeLink());
            }
        }


        socialPopup.findViewById(R.id.facebook_social).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getFacebookLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getFacebookLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.FACEBOOK);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);


                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getActivity().getResources().getDrawable(R.drawable.icn_social_facebook2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);


                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.FACEBOOK)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.FACEBOOK)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("facebook");
                //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter link");
                //  ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //   if (contact.getSocialModel() != null)
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.facebook.com/" + f;
                            }

                            if (ClipboardType.isFacebook(f)) {
                                socialModel.setFacebookLink(f);
                            } else {
                                socialModel.setFacebookLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //   ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            //   ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                            Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                            ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ldf);

                            try {
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            } catch (Exception e) {

                            }
                            try {
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            } catch (Exception e) {

                            }

                            try {
                                ((ImageView) fastEditPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            } catch (Exception e) {

                            }
                            //    if (contact.getSocialModel() != null)

                            String link = socialModel.getFacebookLink();
                            boolean checkich = false;
                            try {
                                if (link.contains("http") && !link.contains("https"))
                                    link = link.replace("http", "https");
                                String checkFacebook = link.substring(0, 21);
                                String checkFacebook2 = link.substring(0, 23);
                                String checkFacebook3 = link.substring(0, 25);
                                if (checkFacebook.equals("https://facebook.com/")) {
                                    link = link.substring(21, link.length());
                                    if (link.contains("profile.php")) {
                                        link = link.substring(link.indexOf(".php") + 5, link.length());
                                    }
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                    checkich = true;
                                } else if (checkFacebook2.equals("https://m.facebook.com/")) {
                                    link = link.substring(23, link.length());
                                    if (link.contains("profile.php")) {
                                        link = link.substring(link.indexOf(".php") + 5, link.length());
                                    }
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                    checkich = true;
                                } else if (checkFacebook3.equals("https://www.facebook.com/") || checkFacebook3.equals("https://web.facebook.com/")) {
                                    link = link.substring(25, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                    checkich = true;
                                }
                            } catch (Exception e) {

                                e.printStackTrace();
                            }
                            if (!checkich) {
                                try {
                                    String checkFacebook = link.substring(0, 25);
                                    if (checkFacebook.equals("https://www.facebook.com/")) {
                                        link = link.substring(25, link.length());
                                        if (link.contains("profile.php")) {
                                            link = link.substring(link.indexOf(".php") + 5, link.length());
                                        }
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    } else if (link.contains("php?")) {
                                        int index = link.indexOf("php?");
                                        link = link.substring(index + 4, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            //   System.out.println(checkFacebook+", "+link);
                            if (!checkich)
                                ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());


                            //((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());
                            contact.hasFacebook = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getFacebookLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                            //    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }
                            socialModel.setFacebookLink(null);
                            //    ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                            //        ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);

                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                            contact.hasFacebook = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();
                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });

        socialPopup.findViewById(R.id.vk_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getVkLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getVkLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getVkLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.VK);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));

                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.VK)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.VK)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("vkontakte");
                //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter link");
                //   ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //        if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }


                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://vk.com/" + f;
                            }

                            if (ClipboardType.isVk(f)) {
                                socialModel.setVkLink(f);
                            } else {
                                socialModel.setVkLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setVkLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //  ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);


                            try {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } catch (Exception e) {

                            }

                            try {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } catch (Exception e) {

                            }

                            try {
                                ((ImageView) fastEditPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } catch (Exception e) {

                            }

                            //   if (contact.getSocialModel() != null)
                            try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {
                                ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            }
                            contact.hasVk = true;
                            contact.setSocialModel(socialModel);

                            realm.commitTransaction();
                            //       System.out.println("SOCIAL VK LINK = "+contact.getSocialModel().getVkLink()+", bool = "+contact.hasVk);
                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getVkLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                            try {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            } catch (Exception e) {

                            }
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }
                            socialModel.setVkLink(null);
                            //  ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or link");
                            contact.hasVk = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.linkedLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getLinkedInLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getLinkedInLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.LINKEDIN);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));

                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");

                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.LINKEDIN)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.LINKEDIN)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });

                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }

                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }

                            //    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("LinkedIn");
                //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter link");
                //    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //       if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }


                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.linkedin.com/in/" + f.trim();
                            }
                            System.out.println("LINKEd = " + f);

                            if (ClipboardType.isLinkedIn(f)) {
                                System.out.println("is LINKEd = " + f);
                                socialModel.setLinkedInLink(f);
                            } else {
                                System.out.println("is no LINKEd = " + f);
                                socialModel.setLinkedInLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setLinkedInLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //        ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                            Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                            Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                            LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});
                            ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            //   ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            try {
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            } catch (Exception e) {

                            }
                            try {
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            } catch (Exception e) {

                            }

                            try {
                                ((ImageView) fastEditPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            } catch (Exception e) {

                            }
                            //   if (contact.getSocialModel() != null)
                            try {
                                String link = socialModel.getLinkedInLink();
                                if (link.contains("/in/")) {
                                    String sub = link.substring(link.indexOf("/in/") + 4, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                                } else {
                                    String sub = link.substring(link.length() - 20, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                            }

                            contact.hasLinked = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getLinkedInLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }
                            socialModel.setLinkedInLink(null);
                            //    ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                            //    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                            Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                            LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                            ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add username or link");
                            contact.hasLinked = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        //========================


        socialPopup.findViewById(R.id.twitter_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getTwitterLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTwitterLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.TWITTER);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_48));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.TWITTER)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.TWITTER)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        if (name == null || name.trim().isEmpty()) return;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        if (name == null || name.trim().isEmpty()) return;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("twitter");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://twitter.com/" + f;
                            }

                            if (ClipboardType.isTwitter(f)) {
                                socialModel.setTwitterLink(f);
                            } else {
                                socialModel.setTwitterLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setTwitterLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#2ca7e0"));
                            Drawable imagev = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ldv);

                            //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } /*else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }*/


                            /*try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {*/
                            if (socialModel.getTwitterLink().contains(".com/")) {
                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                            } else
                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                            //}

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasTwitter = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTwitterLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                            }
                            contact.getSocialModel().setTwitterLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);

                            //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } /*else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }*/


                            ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or");
                            contact.hasTwitter = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });

        socialPopup.findViewById(R.id.youtube_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getYoutubeLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getYoutubeLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getYoutubeLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.YOUTUBE);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.YOUTUBE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.YOUTUBE)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Youtube");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.youtube.com/channel/" + f;
                            }

                            if (ClipboardType.isYoutube(f)) {
                                socialModel.setYoutubeLink(f);
                            } else {
                                socialModel.setYoutubeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setYoutubeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            /*Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});*/
                            ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_youtube_48));

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                           /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }*/


                            /*try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {*/
                            if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                                if (socialModel.getYoutubeLink().contains("user/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                } else if (socialModel.getYoutubeLink().contains("channel/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                }
                            } else
                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                            //}

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasYoutube = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getYoutubeLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                            }
                            contact.getSocialModel().setYoutubeLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                          /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }*/


                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");
                            contact.hasYoutube = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.medium_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getMediumLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getMediumLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getMediumLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.MEDIUM);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }


                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.MEDIUM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.MEDIUM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Medium");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                if (!f.contains("@"))
                                    f = "https://medium.com/@" + f;
                                else
                                    f = "https://medium.com/" + f;
                            }

                            if (ClipboardType.isMedium(f)) {
                                socialModel.setMediumLink(f);
                            } else {
                                socialModel.setMediumLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setMediumLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            /*Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});*/
                            //((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_youtube_48));

                            Drawable colorv = new ColorDrawable(Color.parseColor("#000000"));
                            Drawable imagev = getResources().getDrawable(R.drawable.medium_white);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                           /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }*/


                            /*try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {*/
                           /* if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                                if (socialModel.getYoutubeLink().contains("user/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                } else if (socialModel.getYoutubeLink().contains("channel/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                }
                            } else
                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());*/


                            try {
                                String link = socialModel.getMediumLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("com/@")) {
                                    //System.out.println("TRUE VK LINK");
                                    link = link.substring(link.indexOf("com/") + 4, link.length());
                                    //System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(link);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(socialModel.getMediumLink());
                            } catch (Exception e) {
                                ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(socialModel.getMediumLink());
                            }


                            //}

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasMedium = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getMediumLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                            }
                            contact.getSocialModel().setMediumLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.medium_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                          /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }*/


                            ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");
                            contact.hasMedium = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.instagramLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getInstagramLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getInstagramLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.INSTAGRAM);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));

                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.VISIBLE);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocialInsta)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.INSTAGRAM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.INSTAGRAM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocialInsta).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocialInsta).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocialInsta));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Instagram");
                //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter username");
                //      ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //      if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }

                            String username = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (username.contains("?utm")) {
                                int ind = username.indexOf('?');
                                if (ind != -1)
                                    username = username.substring(0, ind);

                            }

                            if (username.charAt(username.length() - 1) == '/') {
                                username = username.substring(0, username.length() - 1);
                            }

                            if (!username.toLowerCase().contains("instagram.com")) {
                                username = "https://instagram.com/" + username;
                            }

                            socialModel.setInstagramLink(username);
                            //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                            Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                            Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                            LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                            ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);
                            //      ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try {
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            } catch (Exception e) {

                            }
                            try {
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            } catch (Exception e) {

                            }

                            try {
                                ((ImageView) fastEditPopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            } catch (Exception e) {

                            }
                            //    if (contact.getSocialModel() != null)
                            String inst = socialModel.getInstagramLink();


                            contact.hasInst = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            if (inst.contains(".com/")) {
                                int ind = inst.indexOf(".com/");
                                String outLink = inst.substring(ind + 5, inst.length());

                                if (outLink.contains("?")) {
                                    int in = outLink.indexOf("?");
                                    outLink = outLink.substring(0, in);
                                }

                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                            } else
                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getInstagramLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }
                            socialModel.setInstagramLink(null);
                            // ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                            // ((ImageView) getActivity().findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                            Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                            LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                            ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                            ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add username or link");
                            contact.hasInst = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                    }
                });
            }
        });

        socialPopup.findViewById(R.id.viberLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getViberLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getViberLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.VIBER);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));

                    //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.VIBER) || cl2.getType().equals(ClipboardEnum.PHONE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.VIBER)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);

                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Viber");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter mobile number");
                //      ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //   if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }

                            socialModel.setViberLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //     ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                            Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                            Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                            LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                            ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            //     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);

                            try {
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            } catch (Exception e) {

                            }
                            try {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) fastEditPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            } catch (Exception e) {

                            }
                            //      if (contact.getSocialModel() != null)
                            ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(socialModel.getViberLink());
                            contact.hasViber = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getViberLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }
                            socialModel.setViberLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                            //    ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                            Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                            ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add link");
                            contact.hasViber = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.whatsapp_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getWhatsappLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getWhatsappLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.WHATSAPP);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));

                    //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.WHATSAPP)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.WHATSAPP)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);

                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Whatsapp");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter mobile number");
                //      ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //       if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }

                            socialModel.setWhatsappLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                            Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                            Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                            LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                            ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            //    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                            try {
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            } catch (Exception e) {

                            }
                            try {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) fastEditPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            } catch (Exception e) {

                            }
                            //   if (contact.getSocialModel() != null)
                            ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(socialModel.getWhatsappLink());
                            contact.hasWhatsapp = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getWhatsappLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }
                            socialModel.setWhatsappLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                            //  ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                            Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                            LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                            ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add link");
                            contact.hasWhatsapp = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                    }
                });
            }
        });

        socialPopup.findViewById(R.id.telegramLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getTelegramLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTelegramLink());
                //  ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTelegramLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.TELEGRAM);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));

                    //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.TELEGRAM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.TELEGRAM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);

                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Telegram");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter username or mibile number");
                //       ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //    if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }

                            String username = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();
                            char firstSymbol = username.charAt(0);
                            String regex = "[0-9]+";
                            username = username.replaceAll("[-() ]", "");
                            if (((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) && !username.contains("t.me/")) {
                                username = "t.me/" + username;
                            }

                            socialModel.setTelegramLink(username);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                            Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
                            Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
                            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            //      ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                            try {
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) fastEditPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            } catch (Exception e) {

                            }
                            //   if (contact.getSocialModel() != null)


                            contact.hasTelegram = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();


                            String tel = contact.getSocialModel().getTelegramLink();
                            if (tel.contains(".me/")) {
                                int indexx = tel.indexOf(".me/");
                                String outLink = tel.substring(indexx + 4, tel.length());
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                            } else if (tel.contains("?p=")) {
                                int indexx = tel.indexOf("?p=");
                                String outLink = tel.substring(indexx + 3, tel.length());
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                            } else
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTelegramLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }
                            socialModel.setTelegramLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //   ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                            //   ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                            Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add link");
                            contact.hasTelegram = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                    }
                });
            }
        });


        socialPopup.findViewById(R.id.skypeLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //editFrame.setVisibility(View.VISIBLE);

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getSkypeLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getSkypeLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.SKYPE);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));

                    //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";

                        /*for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.SKYPE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.SKYPE)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }*/
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(FabNotificationService.clipboard.get(0).getValueCopy());

                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Skype");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter username");
                //      ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //    if (contact.getSocialModel() != null)

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }

                            socialModel.setSkypeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //     ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                            Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                            Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                            LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                            ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            //    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);

                            try {
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            } catch (Exception e) {

                            }

                            try {
                                ((CircleImageView) fastEditPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            } catch (Exception e) {

                            }
                            //    if (contact.getSocialModel() != null)
                            ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(socialModel.getSkypeLink());
                            contact.hasSkype = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(contact.getIdContact(), "Skype: " + contact.getSocialModel().getSkypeLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }
                            socialModel.setSkypeLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //   ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                            //   ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                            Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                            ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                            contact.hasSkype = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();
                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                    }
                });
            }
        });

        editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editFrame.setVisibility(View.GONE);
            }
        });

        socialPopup.findViewById(R.id.closeArrowSocial).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println(" CLOSE 4");
                boolean checkVisibilityEx = false;
                if (getActivity().findViewById(R.id.framePopupSocial).getVisibility() == View.VISIBLE)
                    checkVisibilityEx = true;
                closeOtherPopup();
                if (checkVisibilityEx)
                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                    showProfilePopUp(contact);
                else
                    showCompanyPopup(contact);
            }
        });
        socialPopup.setVisibility(View.VISIBLE);
        openedViews.add(socialPopup);
    }

    public void addHashtagsToSelectedContacts(String hashtag) {

        Realm realm = Realm.getDefaultInstance(); //-

        for (Contact contact : contactAdapter.getSelectedContacts()) {
            if (!contact.getListOfHashtags().contains(new HashTag(hashtag))) {
                realm.beginTransaction();
                contact.getListOfHashtags().add(new HashTag(hashtag.trim()));
                realm.commitTransaction();
                ContactCacheService.updateContact(contact, mainView.getContext());
                MainActivity.nameToUpd.add(contact.getName());
                if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                    MainActivity.nameToUpdTypeContact.add(true);
                else
                    MainActivity.nameToUpdTypeContact.add(false);
            }
        }

        realm.close();

        MainActivity.typeUpdate = "EDIT";
        //EventBus.getDefault().post(new UpdateFile());
        mergedContacts = false;
        initRecyclerHashTags();
        mergedContacts = true;
        Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();

    }


    public void hideHashtagSearch() {


        hideViewsHashtag();
    }

    public void hideViewsHashtag() {
        hashTagPopup.findViewById(R.id.searchHashtagEditText).setVisibility(View.GONE);
        hashTagPopup.findViewById(R.id.radio_group_hashtag).setVisibility(View.VISIBLE);

        //hashTagPopup.findViewById(R.id.hash_f).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.allContactsHashtag).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.NoTagsLayout).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.allContactWithHashtag).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.allhashtasgsHyper).setVisibility(View.VISIBLE);

        //hashTagPopup.findViewById(R.id.line_hash_1).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.line_hash_2).setVisibility(View.VISIBLE);


        hashTagPopup.findViewById(R.id.containerHashTag).setVisibility(View.VISIBLE);

        hashTagPopup.findViewById(R.id.containerHashTagSearch).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.text_search_count).setVisibility(View.GONE);

    }

    public void showHashtagSearch() {

        showViewsHashtag();

        ((EditText) hashTagPopup.findViewById(R.id.searchHashtagEditText)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.length() > 0) {
                    HASHTAG_SEARCH_ADAPTER.updateList(HASHTAG_ADAPTER.getListOfHashtags());
                    HASHTAG_SEARCH_ADAPTER.updateList(s.toString());
                } else {

                    SharedPreferences mPref = getContext().getSharedPreferences("HashtagSearch", Context.MODE_PRIVATE);
                    //SharedPreferences.Editor editor = mPref.edit();

                    //Set <String> listHash = new LinkedHashSet<>();
                    ArrayList<HashSearchModel> listHash = new ArrayList<>();

                    Gson gson = new Gson();

                    String str = mPref.getString("HashtagS", "");

                    if (!str.isEmpty()) {
                        listHash.addAll(gson.fromJson(str, new TypeToken<ArrayList<HashSearchModel>>() {
                        }.getType()));
                    }

                    ArrayList<HashTagQuantity> listOfHashTagQuantitySearch = new ArrayList<>();

                    //for(String t : listHash) System.out.println("# "+t);

                    if (listHash != null) {
                        for (HashSearchModel h : listHash) {
                            for (HashTagQuantity hashTagQuantity : HASHTAG_ADAPTER.getListOfHashtags()) {
                                if (h.getHash().equalsIgnoreCase(hashTagQuantity.getHashTag().getHashTagValue())) {
                                    listOfHashTagQuantitySearch.add(hashTagQuantity);
                                }
                            }
                        }
                    }

                   /* for(HashTagQuantity hashTagQuantity : HASHTAG_ADAPTER.getListOfHashtags()){
                        if(listHash.contains(hashTagQuantity.getHashTag().getHashTagValue())){
                            listOfHashTagQuantitySearch.add(hashTagQuantity);
                        }
                    }*/

                    HASHTAG_SEARCH_ADAPTER.updateListNotify(listOfHashTagQuantitySearch);

                }
            }
        });

        if (HASHTAG_SEARCH_ADAPTER != null)
            HASHTAG_SEARCH_ADAPTER.notifyDataSetChanged();
    }

    public void showViewsHashtag() {
        hashTagPopup.findViewById(R.id.searchHashtagEditText).setVisibility(View.VISIBLE);
        hashTagPopup.findViewById(R.id.radio_group_hashtag).setVisibility(View.GONE);

        //hashTagPopup.findViewById(R.id.hash_f).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.allContactsHashtag).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.NoTagsLayout).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.allContactWithHashtag).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.allhashtasgsHyper).setVisibility(View.GONE);

        //hashTagPopup.findViewById(R.id.line_hash_1).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.line_hash_2).setVisibility(View.GONE);


        hashTagPopup.findViewById(R.id.containerHashTag).setVisibility(View.GONE);

        hashTagPopup.findViewById(R.id.containerHashTagSearch).setVisibility(View.VISIBLE);


        hashTagPopup.findViewById(R.id.text_search_count).setVisibility(View.VISIBLE);

        ((TextView) hashTagPopup.findViewById(R.id.text_search_count)).setText("previous search");
    }

    public int sortHash = 1;

    public boolean checkChangeHash = false;

    public void showHashTagPopUp() {

        System.out.println(" CLOSE 5");
        closeOtherPopup();
        hashTagPopup = (FrameLayout) mainView.getRootView().findViewById(R.id.hashtag_popup);

        hashTagPopup.findViewById(R.id.popup_menu_hashtag).setVisibility(View.GONE);


        hashTagPopup.findViewById(R.id.icn_search_hashtag).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                getActivity().findViewById(R.id.popup_menu_hashtag).setVisibility(View.GONE);

                if (hashTagPopup.findViewById(R.id.searchHashtagEditText).getVisibility() == View.VISIBLE) {
                    hideHashtagSearch();
                } else {
                    showHashtagSearch();
                }
            }
        });

        /*if(sortHash == 1){
            ((ImageView) hashTagPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) hashTagPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) hashTagPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        }else if(sortHash == 2){
            ((ImageView) hashTagPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) hashTagPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((TextView) hashTagPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
        }else{
            ((ImageView) hashTagPopup.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((ImageView) hashTagPopup.findViewById(R.id.populTag)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) hashTagPopup.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
        }*/


        ((RadioButton) hashTagPopup.findViewById(R.id.radioOR)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    ((RadioButton) hashTagPopup.findViewById(R.id.radioOR)).setTextColor(getResources().getColor(R.color.primary));
                    Toast.makeText(getContext(), "Selected tags separated", Toast.LENGTH_SHORT).show();


                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

                    ContactAdapter.selectionModeEnabled = false;
                    listForSelect = new ArrayList<>();
                    contactAdapter.selectedContacts = new ArrayList<>();
                    contactAdapter.listOfSaveContact = new ArrayList<>();

                    if (!((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                    } else {
                        contactAdapter.defaultListContacts();
                        ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + "");
                    }

                    //getActivity().findViewById(R.id.allContactsLL).callOnClick();

                    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
                    checkChangeHash = true;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                    checkChangeHash = false;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);


                    HASHTAG_ADAPTER.setAllHashtagsCheck(true);
                    HASHTAG_ADAPTER.allHashtagsCheck = true;
                    HASHTAG_ADAPTER.hyperHashtag = "";
                    HASHTAG_ADAPTER.notifyDataSetChanged();


                } else {
                    ((RadioButton) hashTagPopup.findViewById(R.id.radioOR)).setTextColor(Color.parseColor("#414141"));
                }


            }
        });


        ((RadioButton) hashTagPopup.findViewById(R.id.radioAND)).setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    ((RadioButton) hashTagPopup.findViewById(R.id.radioAND)).setTextColor(getResources().getColor(R.color.primary));
                    Toast.makeText(getContext(), "Selected tags same time", Toast.LENGTH_SHORT).show();

                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

                    ContactAdapter.selectionModeEnabled = false;
                    listForSelect = new ArrayList<>();
                    contactAdapter.selectedContacts = new ArrayList<>();
                    contactAdapter.listOfSaveContact = new ArrayList<>();

                    if (!((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
                    } else {
                        contactAdapter.defaultListContacts();
                        ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + "");
                    }

                    //getActivity().findViewById(R.id.allContactsLL).callOnClick();

                    ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
                    checkChangeHash = true;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
                    checkChangeHash = false;
                    ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(false);


                    HASHTAG_ADAPTER.setAllHashtagsCheck(false);
                    HASHTAG_ADAPTER.allHashtagsCheck = false;
                    HASHTAG_ADAPTER.hyperHashtag = "";
                    HASHTAG_ADAPTER.notifyDataSetChanged();


                } else {
                    ((RadioButton) hashTagPopup.findViewById(R.id.radioAND)).setTextColor(Color.parseColor("#414141"));
                }
            }
        });


        openedContactsPopup = false;
        openedFavoritePopup = false;
        hashTagPopup.findViewById(R.id.container_tagging_mode).setVisibility(View.VISIBLE);
        hashTagPopup.findViewById(R.id.line228).setVisibility(View.VISIBLE);

        getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);

        if (ContactAdapter.selectionModeEnabled && hashTagPopup.findViewById(R.id.searchHashtagEditText).getVisibility() == View.GONE) {


            String[] suggest = {"#timesoftware", "#another", "#goodboy", "#smile"};
            List<String> suggestTags = Arrays.asList(suggest);

            HashtagMasstaggingAdapter suggestTagsAdapter = new HashtagMasstaggingAdapter(suggestTags, this, false, null);
            RecyclerView containerSuggest = (RecyclerView) getActivity().findViewById(R.id.container_suggest_tags);
            RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
            containerSuggest.setLayoutManager(mLayoutManager);
            containerSuggest.setItemAnimator(new DefaultItemAnimator());
            containerSuggest.setAdapter(suggestTagsAdapter);


            String[] most = {"#pr", "#investor", "#VC", "#Media", "#PR"};
            //  List<String> mostUsed = Arrays.asList(most);

            //MostUsedTagsAdapter mostTagAdapter2 = new MostUsedTagsAdapter(HASHTAG_ADAPTER.getListOfHashtags(),this,true,null);
            ArrayList<HashTagQuantity> listH = new ArrayList<>();
            listH.addAll(HASHTAG_ADAPTER.getListOfHashtags());
            Collections.sort(listH, new Comparator<HashTagQuantity>() {
                @Override
                public int compare(HashTagQuantity first, HashTagQuantity second) {
                    return second.getQuantity() - first.getQuantity();
                }
            });

            List<String> mostUsed = new ArrayList<>();

            for (HashTagQuantity hashTagQuantity : listH) {
                mostUsed.add(hashTagQuantity.getHashTag().toString());
            }

            HashtagMasstaggingAdapter mostTagAdapter = new HashtagMasstaggingAdapter(mostUsed, this, false, null);
            RecyclerView containerMost = (RecyclerView) getActivity().findViewById(R.id.container_most_used);
            RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
            containerMost.setLayoutManager(mostLayoutManager);
            containerMost.setItemAnimator(new DefaultItemAnimator());
            containerMost.setAdapter(mostTagAdapter);
        } else {
            // if(hashTagPopup.findViewById(R.id.searchHashtagEditText).getVisibility() == View.GONE) {
            hashTagPopup.findViewById(R.id.container_tagging_mode).setVisibility(View.GONE);
            hashTagPopup.findViewById(R.id.line228).setVisibility(View.GONE);
            // }

        }

        hashTagPopup.findViewById(R.id.sortElements).setOnClickListener(v -> {
            ((TextView) hashTagPopup.findViewById(R.id.sortTextH)).setTextColor(getResources().getColor(R.color.primary));
            ((ImageView) hashTagPopup.findViewById(R.id.timeSortH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) hashTagPopup.findViewById(R.id.populTagH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            HASHTAG_ADAPTER.sortList();
            HASHTAG_SEARCH_ADAPTER.sortList();
            if (HASHTAG_ADAPTER.sortAsc) {
                ((TextView) hashTagPopup.findViewById(R.id.hashtag_popup).findViewById(R.id.sortTextH)).setText("A-Z");
            } else {
                ((TextView) hashTagPopup.findViewById(R.id.hashtag_popup).findViewById(R.id.sortTextH)).setText("Z-A");
            }
            sortHash = 1;
        });
        hashTagPopup.findViewById(R.id.populHashTag).setOnClickListener(v -> {
            ((ImageView) hashTagPopup.findViewById(R.id.populTagH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((TextView) hashTagPopup.findViewById(R.id.sortTextH)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) hashTagPopup.findViewById(R.id.timeSortH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            HASHTAG_ADAPTER.sortListByPopul();
            HASHTAG_SEARCH_ADAPTER.sortListByPopul();
            sortHash = 2;
        });
        hashTagPopup.findViewById(R.id.sortByTime).setOnClickListener(v -> {
            ((ImageView) hashTagPopup.findViewById(R.id.populTagH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) hashTagPopup.findViewById(R.id.sortTextH)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) hashTagPopup.findViewById(R.id.timeSortH)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            HASHTAG_ADAPTER.sortListByTime();
            HASHTAG_SEARCH_ADAPTER.sortListByTime();
            sortHash = 3;
        });
        if (hashTagPopup.getVisibility() == View.VISIBLE) {
            hideHashtagSearch();
            hashTagPopup.setVisibility(View.GONE);
            return;
        }
        hashTagPopup.setVisibility(View.VISIBLE);
        hashTagPopup.setFocusable(true);
        hashTagPopup.setClickable(true);
        hashTagPopup.requestFocus();
        if (openedViews != null) openedViews.add(hashTagPopup);
        openedHashTag = true;
    }

    @Override
    public void showAllContactsPopup() {
        allContactsPopup = (FrameLayout) mainView.getRootView().findViewById(R.id.popup_contacts);
        openedFavoritePopup = false;
        openedHashTag = false;
        if (allContactsPopup.getVisibility() == View.VISIBLE) {
            getActivity().findViewById(R.id.allContactsBlock).setBackgroundColor(0);
            allContactsPopup.setVisibility(View.GONE);
            return;
        }
        System.out.println(" CLOSE 6");
        if (getActivity().findViewById(R.id.framePopupSocial).getVisibility() == View.VISIBLE) {
            closeOtherPopup();
            getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
        } else
            closeOtherPopup();

        allContactsPopup.setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.allContactsBlock).setBackgroundColor(Color.parseColor("#e9e9e9"));
        allContactsPopup.setFocusable(true);
        allContactsPopup.setClickable(true);
        allContactsPopup.requestFocus();
        if (openedViews != null) openedViews.add(allContactsPopup);
        openedContactsPopup = true;
    }

    @Override
    public void showRemindPopup(Contact contact) {
        System.out.println(" CLOSE 7");
        closeOtherPopup();
        remindPopup = (FrameLayout) getActivity().findViewById(R.id.remindPopup);
        ((TextView) remindPopup.findViewById(R.id.name)).setText(selectedContactPopup.getName());

        //((TextView) remindPopup.findViewById(R.id.company_title)).setText(selectedContactPopup.getCompany());

        //==================


        remindPopup.findViewById(R.id.company).setVisibility(View.GONE);
        remindPopup.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
        // System.out.println("INFO = "+contact.getCompany());
        if (contact.getCompany() != null && !contact.getCompany().isEmpty()) {

            /*remindPopup.findViewById(R.id.company_title).setOnClickListener(v -> {
                        System.out.println("CCCCCCC 111111111111111");
                        for (Contact searchCompany : listOfContacts) {
                            if (searchCompany.getName().toLowerCase().compareTo(contact.getCompany().toLowerCase()) == 0) {

                                //contactAdapter.setSelectContactID(searchCompany.getName());
                                showCompanyPopup(searchCompany);
                            }
                        }
                    }
            );*/

            ((TextView) remindPopup.findViewById(R.id.company_title)).setText(contact.getCompany());
            ((TextView) remindPopup.findViewById(R.id.company_title)).setHint("");

            /*remindPopup.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    contactAdapter.searchByCompany(contact.getCompany());
                    return true;
                }
            });*/
//            profilePopUp.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
//                @Override
//                public boolean onLongClick(View v) {
//                    contactAdapter.searchByCompany(contact.getCompany());
//                    return true;
//                }
//            });
        } else {
            ((TextView) remindPopup.findViewById(R.id.company_title)).setText("");

            ((TextView) remindPopup.findViewById(R.id.company_title)).setHint("Company");

            /*remindPopup.findViewById(R.id.company_title).setOnClickListener(v -> {
                        System.out.println("CCCCCCCCCCCC 222222222222");
                        if (((TextView) profilePopUp.findViewById(R.id.company_title)).getText() == "")
                            showCompanyAddPopup(contact, null, false);
                    }
            );*/
        }


        if (contact.getCompanyPossition() != null) {
            remindPopup.findViewById(R.id.company).setVisibility(View.VISIBLE);
            ((TextView) remindPopup.findViewById(R.id.company)).setText(contact.getCompanyPossition());

           /* getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //contactAdapter.findByPossition(selectedPossition);
                }
            });*/

           /* profilePopUp.findViewById(R.id.company).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    System.out.println(" CLICK CCC");


                    getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v1 -> {
                        //contactAdapter.defaultListContacts();


                        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                        getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);

                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);


                        initRecyclerHashTags();

                        System.out.println("Close position select");
                        contactAdapter.defaultListContacts();
                        contactAdapter.stopNEWSelection();

                        //contactAdapter.setListOfContacts(listForSelect);
                        listForSelect = new ArrayList<>();
                    });
                    stopSelectionMode();

                    int countContacts = contactAdapter.findByPossition(contact.getCompanyPossition());

                    if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                        listForSelect = new ArrayList<>();
                        listForSelect.addAll(contactAdapter.getListOfContacts());
                        System.out.println("listFor select = " + listForSelect.size());
                    }


                    closeOtherPopup();
                    getActivity().findViewById(R.id.contactsText).setVisibility(View.GONE);


                    SpannableStringBuilder str = new SpannableStringBuilder(contact.getCompanyPossition());
                    str.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), 0, contact.getCompanyPossition().length() - 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

                    ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).setText(countContacts + " Contacts selected by position " + str);
                    selectedPossition = contact.getCompanyPossition();


                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
                    getActivity().findViewById(R.id.typeHash).setVisibility(View.GONE);
                }
            });*/
        } else {
            ((TextView) remindPopup.findViewById(R.id.company_title)).setHint("Company");
            ((TextView) remindPopup.findViewById(R.id.company)).setVisibility(View.VISIBLE);
            ((TextView) remindPopup.findViewById(R.id.company)).setText("");
            ((TextView) remindPopup.findViewById(R.id.company)).setHint("  Position");
            /*remindPopup.findViewById(R.id.company).setOnClickListener(v -> {
                        showPositionAddPopup(contact, null, false);
                    }
            );*/
        }

        //==========

        initIconColor(contact, remindPopup);

        LinearLayout containerHashTags = (LinearLayout) remindPopup.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());

            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            containerHashTags.addView(text);
        }

        if (contact.isFavorite || contact.isPause || contact.isFinished || contact.isImportant || contact.isCrown || contact.isVip || contact.isStartup || contact.isInvestor) {
            if (contact.isFavorite) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
            } else if (contact.isImportant) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
            } else if (contact.isFinished) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
            } else if (contact.isPause) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
            } else if (contact.isCrown) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
            } else if (contact.isVip) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
            } else if (contact.isStartup) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
            } else if (contact.isInvestor) {
                ((ImageView) remindPopup.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
            }
            remindPopup.findViewById(R.id.starImg).setVisibility(View.VISIBLE);
        } else {
            remindPopup.findViewById(R.id.starImg).setVisibility(View.GONE);
        }

        if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            remindPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) remindPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            remindPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) remindPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            remindPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) remindPopup.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
        }

        remindPopup.findViewById(R.id.remind_cancel).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                remindPopup.setVisibility(View.GONE);
                showProfilePopUp(contact);
            }
        });

        remindPopup.setVisibility(View.VISIBLE);
        remindPopup.setFocusable(true);
        remindPopup.setClickable(true);
        remindPopup.requestFocus();
        openedViews.add(remindPopup);
    }

    @Override
    public void showFavoriteContactsPopup() {

        favoriteContactsPopup = (FrameLayout) mainView.getRootView().findViewById(R.id.favoriteContacts);

        if (favoriteContactsPopup.getVisibility() == View.VISIBLE) {
            getActivity().findViewById(R.id.barFavorite).setBackgroundColor(0);
            favoriteContactsPopup.setVisibility(View.GONE);
            return;
        }
        System.out.println(" CLOSE 8");
        if (getActivity().findViewById(R.id.framePopupSocial).getVisibility() == View.VISIBLE) {
            closeOtherPopup();
            getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
        } else
            closeOtherPopup();


        favoriteContactsPopup.setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.barFavorite).setBackgroundColor(Color.parseColor("#e9e9e9"));
        favoriteContactsPopup.setFocusable(true);
        favoriteContactsPopup.setClickable(true);
        favoriteContactsPopup.requestFocus();
        if (openedViews != null) openedViews.add(favoriteContactsPopup);
        openedFavoritePopup = true;
    }

    public ArrayList<Contact> sortCompanybyAsc(ArrayList<Contact> list) {
        try {
            Collections.sort(list, (contactFirst, contactSecond) -> contactFirst.getName().toString().trim().compareToIgnoreCase(contactSecond.getName().toString().trim()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public ArrayList<String> sortPosByAsc(ArrayList<String> list) {
        try {
            Collections.sort(list, (contactFirst, contactSecond) -> contactFirst.compareToIgnoreCase(contactSecond));
        } catch (Exception e) {
        }
        return list;
    }

    CompanySelectInterface comp = this;

    public String sortPopupComp = "sortByAsc";

    public CompanyEditAdapter selectCompanyAdapter;

    public PositionEditAdapter selectPositionAdapter;

    public boolean sortTimePopup = false;

    public boolean sortPopulPopup = false;

    public void shopHelpPopupcompanyPosition() {

        if (listPosition.isEmpty()) {
            listPosition = ContactCacheService.getPossitionContacts();
        }

        if (popupHelpCompanyposition.getVisibility() == View.GONE) {


            SharedPreferences mSettings;
            mSettings = getActivity().getSharedPreferences("SortEditPopup", Context.MODE_PRIVATE);
            sortPopupComp = mSettings.getString("Sort", "sortByDescPopul");
            //sortPopupComp = "sortByDescTime";


            RecyclerView recyclerCompany = (RecyclerView) getActivity().findViewById(R.id.recycleCompanyPopup);
            RecyclerView recyclerPosition = (RecyclerView) getActivity().findViewById(R.id.recyclePositionPopup);

            RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
            recyclerCompany.setLayoutManager(mostLayoutManager);
            recyclerCompany.setItemAnimator(new DefaultItemAnimator());

            RecyclerView.LayoutManager mostLayoutManager2 = new LinearLayoutManager(mainView.getContext());
            recyclerPosition.setLayoutManager(mostLayoutManager2);
            recyclerPosition.setItemAnimator(new DefaultItemAnimator());

            ArrayList<Contact> listCompanies = contactAdapter.getListOfCompanies();

            ArrayList<String> listOfPositions = new ArrayList<>(listPosition);

            ArrayList<Contact> listCompaniesClone = new ArrayList<>(listCompanies);
            ArrayList<String> listOfPositionsClone = new ArrayList<>(listOfPositions);

            selectCompanyAdapter = new CompanyEditAdapter(listCompanies, comp, getActivity());
            selectPositionAdapter = new PositionEditAdapter(listOfPositions, comp, getActivity());


            if (sortPopupComp.equals("sortByAsc")) {
                selectCompanyAdapter.sortCompanybyAsc();
                selectPositionAdapter.sortPosByAsc();
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
                sortTimePopup = false;
            } else if (sortPopupComp.equals("sortByDesc")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
                selectCompanyAdapter.sortCompanybyDesc();
                selectPositionAdapter.sortPosByDesc();
            } else if (sortPopupComp.equals("sortByAscTime")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                selectCompanyAdapter.sortByAscTime();

                sortPopupComp = "sortByAscTime";
                sortTimePopup = true;
            } else if (sortPopupComp.equals("sortByDescTime")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                selectCompanyAdapter.sortByDescTime();
                sortPopupComp = "sortByDescTime";
                sortTimePopup = false;
            } else if (sortPopupComp.equals("sortByAscPopul")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                selectCompanyAdapter.sortByAscPopul();
                selectPositionAdapter.sortByPopupAsc();
                sortPopupComp = "sortByAscPopul";
                sortPopulPopup = true;
            } else if (sortPopupComp.equals("sortByDescPopul")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                selectCompanyAdapter.sortByDescPopul();
                selectPositionAdapter.sortByPopupDesc();
                sortPopupComp = "sortByDescPopul";
                sortPopulPopup = false;
            }


            recyclerCompany.setAdapter(selectCompanyAdapter);


            recyclerPosition.setAdapter(selectPositionAdapter);

            popupHelpCompanyposition.setVisibility(View.VISIBLE);

            openedViews.add(popupHelpCompanyposition);


            popupHelpCompanyposition.findViewById(R.id.sortElementsPopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).getText().toString().equals("A-Z")) {

                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
                        selectCompanyAdapter.sortCompanybyDesc();
                        selectPositionAdapter.sortPosByDesc();
                        sortPopupComp = "sortByDesc";

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDesc");
                        editor.commit();

                        //sortTimePopup = false;

                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
                        selectCompanyAdapter.sortCompanybyAsc();
                        selectPositionAdapter.sortPosByAsc();
                        sortPopupComp = "sortByAsc";

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAsc");
                        editor.commit();
                        //sortTimePopup = false;
                    }
                }
            });

            popupHelpCompanyposition.findViewById(R.id.sortByTimePopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (!sortTimePopup) {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        selectCompanyAdapter.sortByAscTime();
                        sortPopupComp = "sortByAscTime";
                        sortTimePopup = true;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAscTime");
                        editor.commit();
                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        selectCompanyAdapter.sortByDescTime();
                        sortPopupComp = "sortByDescTime";
                        sortTimePopup = false;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDescTime");
                        editor.commit();
                    }
                }
            });

            popupHelpCompanyposition.findViewById(R.id.sortByPopupPopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (!sortPopulPopup) {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));

                        ArrayList<Contact> listCompanies = new ArrayList<>(listCompaniesClone);

                        ArrayList<String> listOfPositions = new ArrayList<>(listOfPositionsClone);

                        selectCompanyAdapter.updateList(listCompanies);
                        selectPositionAdapter.updateList(listOfPositions);

                        selectCompanyAdapter.sortByAscPopul();
                        selectPositionAdapter.sortByPopupAsc();
                        sortPopupComp = "sortByAscPopul";
                        sortPopulPopup = true;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAscPopul");
                        editor.commit();
                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));

                        ArrayList<Contact> listCompanies = new ArrayList<>(listCompaniesClone);

                        ArrayList<String> listOfPositions = new ArrayList<>(listOfPositionsClone);

                        selectCompanyAdapter.updateList(listCompanies);
                        selectPositionAdapter.updateList(listOfPositions);

                        selectCompanyAdapter.sortByDescPopul();
                        selectPositionAdapter.sortByPopupDesc();
                        sortPopupComp = "sortByDescPopul";
                        sortPopulPopup = false;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDescPopul");
                        editor.commit();

                    }
                }
            });


        }
    }


    public ArrayList<Contact> listCompanyForKeyDown;

    public ArrayList<String> listPosition;

    @Override
    public void showFastEditPopup(Contact contact) {
        System.out.println(" CLOSE 9");
        closeOtherPopup();

       /* if(popupCompaniesEdit != null) popupCompaniesEdit.setVisibility(View.GONE);
        popupCompaniesEdit = null;
        if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);
        popupPositionEdit = null;*/
        if (popupHelpCompanyposition != null) popupHelpCompanyposition.setVisibility(View.GONE);

        listCompanyForKeyDown = contactAdapter.getListOfCompanies();


        fastEditPopup = (FrameLayout) getActivity().findViewById(R.id.fastEditPopup);

        listPosition = new ArrayList<>();


        // ((EditText) fastEditPopup.findViewById(R.id.nameContact)).getBackground().mutate().setColorFilter(getResources().getColor(R.color.md_red_A100), PorterDuff.Mode.SRC_ATOP);


        ((EditText) fastEditPopup.findViewById(R.id.nameContact)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) fastEditPopup.findViewById(R.id.lineNamePreview)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);

                } else {
                    ((View) fastEditPopup.findViewById(R.id.lineNamePreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                }
            }
        });

        CompanySelectInterface comp = this;

        ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    System.out.println("POSITION FOCUS");
                    ((View) fastEditPopup.findViewById(R.id.positionVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));

                    /*ArrayList<String> listOfPositions2 = new ArrayList<>(Arrays.asList("CEO","COO","Co-founder","CTO","Director","Engineer","Manager","Marketing"));

                    boolean find = false;
                    String text = ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString().trim();
                    for(int i = 0;i<listOfPositions2.size();i++){
                        if(listOfPositions2.get(i).equals(text)){
                            find = true;
                            break;
                        }
                    }

                    if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);

                    if(!find && ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString().length() == 0) {
                        ArrayList<String> listOfPositions = new ArrayList<>(Arrays.asList("CEO", "COO", "Co-founder", "CTO", "Director", "Engineer", "Manager", "Marketing"));


                        System.out.println("CLICK Pos");
                        popupPositionEdit = (FrameLayout) getActivity().findViewById(R.id.companyAddPopupEdit);

                        popupPositionEdit.setVisibility(View.VISIBLE);

                        PositionEditAdapter selectCompanyAdapter = new PositionEditAdapter(listOfPositions, comp, getActivity());

                        RecyclerView containerCompanies = (RecyclerView) popupPositionEdit.findViewById(R.id.companiesContainer_edit);
                        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 2);
                        containerCompanies.setLayoutManager(mostLayoutManager);
                        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
                        containerCompanies.setItemAnimator(new DefaultItemAnimator());
                        containerCompanies.setAdapter(selectCompanyAdapter);
                        openedViews.add(popupPositionEdit);
                    }else if(((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString().length() > 0 && !find) afterTextChangePosition(comp);*/


                    shopHelpPopupcompanyPosition();

                } else {
                    ((View) fastEditPopup.findViewById(R.id.positionVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                    if (popupPositionEdit != null)
                        popupPositionEdit.setVisibility(View.GONE);

                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);
                }
            }
        });

        ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                System.out.println("TEXT POS");
                if (((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).isFocused()) {
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.VISIBLE);
                    else
                        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);
                }
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                //if(((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).isFocused())
                afterTextChangePosition(comp);
            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.companyText)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) fastEditPopup.findViewById(R.id.companyVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));

                    ArrayList<Contact> listOfCompanies2 = contactAdapter.getListOfCompanies();
                    boolean find = false;
                    String text = ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().trim();
                    for (int i = 0; i < listOfCompanies2.size(); i++) {
                        if (listOfCompanies2.get(i).getName().toString().trim().equals(text)) {
                            System.out.println("TRUE COMPANY");
                            find = true;
                            break;
                        }
                    }

                    System.out.println("CLICK company");
                    ArrayList<Contact> listComp = new ArrayList<>();
                    listComp.addAll(contactAdapter.getListOfCompanies());
                    if (listComp.size() > 0 && ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().length() == 0) {
                        //popupCompaniesEdit = (FrameLayout) getActivity().findViewById(R.id.companyAddPopupEdit);

                        //popupCompaniesEdit.setVisibility(View.VISIBLE);

                        CompanyEditAdapter selectCompanyAdapter = new CompanyEditAdapter(contactAdapter.getListOfCompanies(), comp, getActivity());

                        RecyclerView containerCompanies = (RecyclerView) getActivity().findViewById(R.id.companiesContainer_edit);
                        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 1);
                        containerCompanies.setLayoutManager(mostLayoutManager);
                        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
                        containerCompanies.setItemAnimator(new DefaultItemAnimator());
                        containerCompanies.setAdapter(selectCompanyAdapter);
                        openedViews.add(popupHelpCompanyposition);


                        //if(popupCompaniesEdit != null && find) popupCompaniesEdit.setVisibility(View.GONE);
                    } else if (((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().length() > 0 && !find)
                        afterTextChangeCompany(comp);

                    shopHelpPopupcompanyPosition();


                } else {
                    ((View) fastEditPopup.findViewById(R.id.companyVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                    //if(popupCompaniesEdit != null)
                    //popupCompaniesEdit.setVisibility(View.GONE);

                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);
                }
            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.companyText)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                if (((EditText) fastEditPopup.findViewById(R.id.companyText)).isFocused()) {
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.VISIBLE);
                    else
                        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);
                }
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                //if(((EditText) fastEditPopup.findViewById(R.id.companyText)).isFocused())
                afterTextChangeCompany(comp);

            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) fastEditPopup.findViewById(R.id.lineHashtahPreview)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    if (popupCompaniesEdit != null) popupCompaniesEdit.setVisibility(View.GONE);
                } else {
                    ((View) fastEditPopup.findViewById(R.id.lineHashtahPreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                }
            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ArrayList<String> listOfPositions = ContactCacheService.getPossitionContacts();
                boolean find = false;
                String text = ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString().trim();
                for (int i = 0; i < listOfPositions.size(); i++) {
                    if (listOfPositions.get(i).equals(text)) {
                        find = true;
                        break;
                    }
                }
                if (popupPositionEdit != null && !find)
                    popupPositionEdit.setVisibility(View.VISIBLE);


            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.companyText)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                System.out.println("CLICER");
                ArrayList<Contact> listOfCompanies = contactAdapter.getListOfCompanies();
                boolean find = false;
                String text = ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().trim();
                for (int i = 0; i < listOfCompanies.size(); i++) {
                    if (listOfCompanies.get(i).getName().toString().trim().equals(text)) {
                        System.out.println("TRUE COMPANY");
                        find = true;
                        break;
                    }
                }

                if (popupHelpCompanyposition != null && !find)
                    popupHelpCompanyposition.setVisibility(View.VISIBLE);


            }
        });

        fastEditPopup.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (popupHelpCompanyposition != null)
                    popupHelpCompanyposition.setVisibility(View.GONE);
                /*if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);*/
            }
        });


        ((EditText) fastEditPopup.findViewById(R.id.nameContact)).setText(contact.getName());

        fastEditPopup.findViewById(R.id.hashtagsList).setVisibility(View.GONE);

        ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);

        if (contact.getListOfHashtags().size() >= 0) {
            String hashTagsStr = "";
            for (HashTag hashTag : contact.getListOfHashtags()) {
                hashTagsStr += hashTag.getHashTagValue() + " ";
            }
            fastEditPopup.findViewById(R.id.hashtagsList).setVisibility(View.VISIBLE);
            ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setText(hashTagsStr.trim());
        }

        ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).addTextChangedListener(new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

                if (s.subSequence(start, start + count).toString().compareTo(" ") == 0) {
                    ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setText(s.toString() + "#");
                    ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setSelection(((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).getText().length());
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        if (contact.getCompany() != null) {
            ((EditText) fastEditPopup.findViewById(R.id.companyText)).setText(contact.getCompany());
            fastEditPopup.findViewById(R.id.companyText).setVisibility(View.VISIBLE);
        } else {
            ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().clear();
        }

        if (contact.getCompanyPossition() != null) {
            ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setText(contact.getCompanyPossition());
            fastEditPopup.findViewById(R.id.companyPossitionText).setVisibility(View.VISIBLE);
        } else {
            ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().clear();
        }


        initIconColor(contact, fastEditPopup);
      /*  if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            fastEditPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) fastEditPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
        }*/

        try {
           /* holder.initials.setVisibility(View.GONE);
            holder.companyImage.setVisibility(View.GONE);
            holder.contactImage.setVisibility(View.VISIBLE);
            holder.contactImage.setImageURI(Uri.parse(contact.getPhotoURL()));*/

            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));

            if (((BitmapDrawable) ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                circle.setColor(contact.color);
                fastEditPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                String initials = "";
                String names[] = contact.getName().split("\\s+");

                for (String namePart : names)
                    initials += namePart.charAt(0);

                fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                ((TextView) fastEditPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
            }
        } catch (Exception e) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            fastEditPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) fastEditPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        }


        fastEditPopup.findViewById(R.id.updateContacts).setOnClickListener(v -> {
            System.out.println("Click save 2");
            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                    getActivity());
            alertDialogBuilder.setTitle("Do you want to edit a contact?");
            alertDialogBuilder
                    .setCancelable(false)
                    .setPositiveButton("Yes", (dialog, id) -> {
                        System.out.println("Start");
                        contactAdapter.setSelectContactID("");

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();

                        String oldNameContact = contact.getName();
                        //  String IdContact = contactsService.getIdContactByName(contact.getName());

                        if (contact.getListOfHashtags() != null)
                            for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                                contactsService.deleteNoteContact(contact.getIdContact(), contact.getListOfHashtags().get(i).getHashTagValue());
                            }


                        if (((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).getText().length() > 1) {
                            RealmList<HashTag> listOfHashTag = new RealmList<HashTag>();
                            ArrayList<String> hashtags = new ArrayList<>(Arrays.asList(((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).getText().toString().split(" ")));
                            for (String hashTag : hashtags) {
                                HashTag hashTag1 = realm.createObject(HashTag.class);
                                hashTag1.setHashTagValue(hashTag.toLowerCase());
                                hashTag1.setDate(new Date());

                                if (!listOfHashTag.contains(hashTag1)) {
                                    listOfHashTag.add(hashTag1);

                                    contactsService.addNoteToContact(contact.getIdContact(), hashTag1.getHashTagValue(), contact.getName());
                                }
                            }
                            contact.setListOfHashtags(listOfHashTag);
                        } else {
                            contact.setListOfHashtags(new RealmList<>());


                        }

                        int possition = contactAdapter.indexElement(contact);
                        String nameContact = contact.getName();
                        contact.setName(((EditText) fastEditPopup.findViewById(R.id.nameContact)).getText().toString().trim());
                        contactsService.updateName(contact.getIdContact(), nameContact, contact.getName());
                        realm.commitTransaction();

                        String newPosition = ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString();
                        String oldPosition = contact.getCompanyPossition();


                        String mainCompany = contact.getCompany();
                        String oldComp = contact.getCompany();

                        if (((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().trim().length() > 0) {

                            realm.beginTransaction();
                            contact.setCompany(((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().trim());
                            realm.commitTransaction();

                            System.out.println("Start 1");
                            int nameHash = ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().hashCode();

                            String companyName = ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().trim();


                            boolean found = false;
                            ArrayList<Contact> listCompanies = ContactCacheService.getCompanies();
                            for (Contact company : listCompanies) {
                                if (company.getName().equalsIgnoreCase(companyName) && ((oldComp != null && !companyName.equalsIgnoreCase(oldComp)) || oldComp == null)) {
                                    System.out.println("ADD To EXIST COMPANY");
                                    realm.beginTransaction();
                                    company.listOfContacts.add(contact);
                                    realm.commitTransaction();
                                    found = true;
                                    if (oldComp != null) {
                                        Contact oldCompany = ContactCacheService.getCompany(oldComp);
                                        if (oldCompany != null) {
                                            //    contactsService.updateCompany(IdContact, contact.getCompany(), company.getName());
                                            if (oldCompany.listOfContacts.size() == 1) {
                                                removeContactById(oldCompany);
                                                contactAdapter.removeContactById(oldCompany);
                                            }
                                            String oldC = oldCompany.getName();
                                            boolean checkDel = ContactCacheService.removeContactFromCompany(oldCompany, contact);


                                        }
                                    }


                                    break;
                                } else if (oldComp != null && oldComp.equals(companyName)) {
                                    System.out.println("OLD COMPANY");
                                    for (int i = 0; i < company.listOfContacts.size(); i++) {
                                        if (company.listOfContacts.get(i).getId() == contact.getId()) {
                                            realm.beginTransaction();
                                            company.listOfContacts.set(i, contact);
                                            realm.commitTransaction();

                                            found = true;
                                            break;
                                        }
                                    }
                                }
                                if (found) break;
                            }
                            if (!found) {
                                System.out.println("CREATE NEW COMPANY");
                                Date date = new Date();
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(date);
                                Time time = getRandomDate();
                                time.setHours(cal.get(Calendar.HOUR_OF_DAY));
                                time.setMinutes(cal.get(Calendar.MINUTE));
                                time.setSeconds(cal.get(Calendar.SECOND));

                                Contact companyContact = new Contact(date);
                                companyContact.setName(companyName.trim());
                                companyContact.time = time.toString();
                                companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                                companyContact.listOfContacts = new RealmList<Contact>();
                                companyContact.listOfContacts.add(contact);
                                ContactCacheService.updateCompany(companyContact);
                                Contact com = ContactCacheService.getCompany(companyContact.getName());
                                listOfContacts.add(companyContact);

                                contactAdapter.addToList(com);
                                contactAdapter.addContactToSaved2(com);
                                contactAdapter.sortContacts();

                                //  contactsService.addCompanyToContact(IdContact, companyContact.getName());

                                if (oldComp != null) {
                                    Contact oldCompany = ContactCacheService.getCompany(oldComp);
                                    if (oldCompany != null) {
                                        if (oldCompany.listOfContacts.size() == 1) {
                                            removeContactById(oldCompany);
                                            contactAdapter.removeContactById(oldCompany);

                                        }
                                        ContactCacheService.removeContactFromCompany(oldCompany, contact);
                                    }
                                }


                            }
                            //=================================================NEW END
                            //  contactsService.updateCompany(contact.getIdContact(),"",companyName);
                           /* if(oldComp != null)
                                contactsService.addCompanybyCompany(contact.getIdContact(), oldComp, companyName);
                            else if(oldComp == null && oldPosition != null)
                                contactsService.addCompanybyPosition(contact.getIdContact(), oldPosition, companyName);
                            else
                                contactsService.addCompanyToContact(contact.getIdContact(), companyName);*/
                            mainCompany = companyName;
                        } else {


                            if (contact.getCompany() != null) {
                                Contact companies = ContactCacheService.getCompany(contact.getCompany());
                                if (companies != null) {
                                    if (companies.listOfContacts.size() == 1) {
                                        removeContactById(companies);
                                        contactAdapter.removeContactById(companies);

                                    }
                                    ContactCacheService.removeContactFromCompany(companies, contact);
                                }

                            }
                            realm.beginTransaction();
                            contact.setCompany(null);
                            realm.commitTransaction();
                            // contactsService.updateCompany(contact.getIdContact(),"",null);
                            /*if(oldComp != null)
                                contactsService.addCompanybyCompany(contact.getIdContact(), oldComp, null);
                            else if(oldComp == null && oldPosition != null)
                                contactsService.addCompanybyPosition(contact.getIdContact(), oldPosition, null);
                            else
                                contactsService.addCompanyToContact(contact.getIdContact(), null);*/
                            mainCompany = null;
                        }


                        if ((contact.getCompanyPossition() == null && newPosition.length() != 0) || (contact.getCompanyPossition() != null && !contact.getCompanyPossition().equals(newPosition))) {
                            System.out.println("SET POSITION");
                            Contact contact1 = ContactCacheService.getContactById(contact.getId());
                            realm.beginTransaction();
                            if (newPosition.length() == 0) {
                                //   if(contact.getCompanyPossition() != null && newPosition.length() != 0){
                                // contactsService.deleteLocationContact(IdContact, contact.getCompanyPossition());
                                //    }
                                contact1.setCompanyPossition(null);
                                contact.setCompanyPossition(null);

                               /* if(mainCompany != null && mainCompany != "")
                                    contactsService.addComp(contact.getIdContact(),null, mainCompany );
                                else if((mainCompany == null || mainCompany == "") && oldPosition != null)
                                    contactsService.addPostionByPosition(contact.getIdContact(), oldPosition, null);
                                else
                                    contactsService.insertPosition(contact.getIdContact(), null);*/

                            } else {
                                //   contactsService.updateLocation(IdContact, contact.getCompanyPossition(), newPosition);
                              /*  if(contact.getCompanyPossition() == null && newPosition.length() != 0){
                                  //  contactsService.addCompanyPossitionToContact(IdContact, newPosition);
                                }else
                                contactsService.updateLocation(IdContact, contact.getCompanyPossition(), newPosition);*/

                                contact1.setCompanyPossition(newPosition.trim());
                                contact.setCompanyPossition(newPosition.trim());
                                //    contactsService.addCompanyPossitionToContact();
                               /* if(mainCompany != null && mainCompany != "")
                                    contactsService.addComp(contact.getIdContact(),newPosition, mainCompany );
                                else if((mainCompany == null || mainCompany == "") && oldPosition != null)
                                    contactsService.addPostionByPosition(contact.getIdContact(), oldPosition, newPosition);
                                else
                                contactsService.insertPosition(contact.getIdContact(), newPosition);*/


                            }
                            realm.commitTransaction();
                        }

                        realm.close();


                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {

                            contactsService.deleteCompany_Possition(contact.getIdContact());
                            if (contact.getCompany() != null && !contact.getCompany().isEmpty())
                                contactsService.insertCompany(contact.getIdContact(), contact.getCompany(), contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() != null && !contact.getCompany().isEmpty()))
                                contactsService.addComp(contact.getIdContact(), contact.getCompanyPossition(), contact.getCompany());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty() && (contact.getCompany() == null || contact.getCompany().isEmpty()))
                                contactsService.insertPosition(contact.getIdContact(), contact.getCompanyPossition(), contact.getName());


                        }


                        int companyCount = ContactCacheService.getOnlyCompanySize();
                        ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + companyCount + ")");
                        int contactCount = ContactCacheService.getOnlyContacts();
                        int allCount = contactCount + companyCount;
                        ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + allCount + "");
                        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + allCount + "");
                        ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + allCount + "");

                        System.out.println("Start 3");


                        //  contactsService.fastUpdateContactBiId(contact, IdContact);

                        System.out.println(".");
                        //    ContactCacheService.insertOneContact(contact);
                        System.out.println("..");


                        contactAdapter.savedContacts = ContactCacheService.getAllContacts(null);
                        System.out.println("...");
                        // contactAdapter.defaultListContacts();
                        System.out.println("....");
                        contactAdapter.notifyDataSetChanged();

                        MainActivity.listToManyUpdateFile.add("EDIT OLD");
                        MainActivity.oldNameToUpdate = oldNameContact;


                        //EventBus.getDefault().post(new UpdateFile());
                        System.out.println(" CLOSE 10");
                        closeOtherPopup();
                        System.out.println("::::::::::::::::;s");
                        initContactsBar();

                        initRecyclerHashTags();
                        // contactsService.fastUpdateContact(contact);


                        System.out.println("Start 4");
                    })
                    .setNegativeButton("No", (dialog, id) -> dialog.cancel());

            AlertDialog alertDialog = alertDialogBuilder.create();
            alertDialog.show();
        });
        fastEditPopup.findViewById(R.id.cancelFastEdit).setOnClickListener(v -> {
                    System.out.println(" CLOSE 11");
                    closeOtherPopup();
                    showProfilePopUp(contact);
                    if (popupPositionEdit != null) {
                        //popupPositionEdit.setVisibility(View.GONE);
                        popupPositionEdit = null;
                    }
                    if (popupCompaniesEdit != null) {
                        //popupCompaniesEdit.setVisibility(View.GONE);
                        popupCompaniesEdit = null;
                    }
                    contactAdapter.notifyDataSetChanged();
                }
        );
        ((ImageView) fastEditPopup.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
        for (ContactInfo contactInfo : contact.listOfContactInfo) {
            if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                System.out.println("TRUE EMAIL = " + contactInfo.value);
                ((ImageView) fastEditPopup.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                fastEditPopup.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                "mailto", contactInfo.value, null));
                        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                        emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                        startActivity(Intent.createChooser(emailIntent, "Send email"));
                    }
                });
            }
        }

        fastEditPopup.setVisibility(View.VISIBLE);
        openedViews.add(fastEditPopup);
        System.out.println("END");
    }

    public void addOpewViews(View view) {
        openedViews.add(view);
    }

    public void afterTextChangeCompany(CompanySelectInterface comp) {


       /* if(!((EditText) fastEditPopup.findViewById(R.id.companyText)).isFocused() ) {
            popupCompaniesEdit.setVisibility(View.GONE);
            System.out.println("No FOCUS");
            return;
        }*/


        String ss = ((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString().toLowerCase().trim();
        RealmList<Contact> listCompanies = new RealmList<>();
        ArrayList<Contact> listC = new ArrayList<>();
        listC.addAll(listCompanyForKeyDown);
        for (int i = 0; i < listC.size(); i++) {
            if (listC.get(i).getName().toLowerCase().contains(ss)) {
                listCompanies.add(listC.get(i));
            }
        }




       /* if(listCompanies.size() == 0){
            popupHelpCompanyposition.setVisibility(View.GONE);
        }else {


            popupHelpCompanyposition.setVisibility(View.VISIBLE);*/
        selectCompanyAdapter = new CompanyEditAdapter(listCompanies, comp, ss, getActivity());

        if (sortPopupComp.equals("sortByAsc")) {
            selectCompanyAdapter.sortCompanybyAsc();
            //selectPositionAdapter.sortPosByAsc();
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByDesc")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
            selectCompanyAdapter.sortCompanybyDesc();
            //selectPositionAdapter.sortPosByDesc();
        } else if (sortPopupComp.equals("sortByAscTime")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            selectCompanyAdapter.sortByAscTime();
            sortPopupComp = "sortByAscTime";
            sortTimePopup = true;
        } else if (sortPopupComp.equals("sortByDescTime")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            selectCompanyAdapter.sortByDescTime();
            sortPopupComp = "sortByDescTime";
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByAscPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectCompanyAdapter.sortByAscPopul();
            selectPositionAdapter.sortByPopupAsc();
            sortPopupComp = "sortByAscPopul";
            sortPopulPopup = true;
        } else if (sortPopupComp.equals("sortByDescPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectCompanyAdapter.sortByDescPopul();
            selectPositionAdapter.sortByPopupDesc();
            sortPopupComp = "sortByDescPopul";
            sortPopulPopup = false;
        }

        RecyclerView containerCompanies = (RecyclerView) popupHelpCompanyposition.findViewById(R.id.recycleCompanyPopup);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerCompanies.setLayoutManager(mLayoutManager);
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectCompanyAdapter);

        //openedViews.add(popupCompaniesEdit);


        //  }
    }

    public void afterTextChangePosition(CompanySelectInterface comp) {
        String ss = ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString().toLowerCase();
        //ArrayList<String> listOfPositions = new ArrayList<>(Arrays.asList("CEO","COO","Co-founder","CTO","Director","Engineer","Manager","Marketing"));
        ArrayList<String> listOfPositions = new ArrayList<>(listPosition);
        ArrayList<String> listC = new ArrayList<>();
        //listC.addAll(listOfPositions);
        for (int i = 0; i < listOfPositions.size(); i++) {
            if (listOfPositions.get(i).toString().toLowerCase().contains(ss)) {
                listC.add(listOfPositions.get(i));
            }
        }
        /*if(listC.size() == 0){
            popupHelpCompanyposition.setVisibility(View.GONE);
        }else {
            popupHelpCompanyposition.setVisibility(View.VISIBLE);*/
        selectPositionAdapter = new PositionEditAdapter(listC, comp, ss, getActivity());

        if (sortPopupComp.equals("sortByAsc")) {
            //selectCompanyAdapter.sortCompanybyAsc();
            selectPositionAdapter.sortPosByAsc();
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByDesc")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
            //selectCompanyAdapter.sortCompanybyDesc();
            selectPositionAdapter.sortPosByDesc();
        } else if (sortPopupComp.equals("sortByAscPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectPositionAdapter.sortByPopupAsc();
            sortPopupComp = "sortByAscPopul";
            sortPopulPopup = true;
        } else if (sortPopupComp.equals("sortByDescPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectPositionAdapter.sortByPopupDesc();
            sortPopupComp = "sortByDescPopul";
            sortPopulPopup = false;
        }

        RecyclerView containerCompanies = (RecyclerView) popupHelpCompanyposition.findViewById(R.id.recyclePositionPopup);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerCompanies.setLayoutManager(mLayoutManager);
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectPositionAdapter);


        //openedViews.add(popupPositionEdit);

           /* if(!((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).isFocused() ) {
                popupPositionEdit.setVisibility(View.GONE);
                System.out.println("No FOCUS");
            }*/
        //   }
    }

    public static int getQuantityOpenedViews() {
        return openedViews.size();
    }


    @Override
    public void closeOtherPopup() {
        try {
            //getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
        } catch (Exception e) {


        }
        if (hashTagPopup != null && hashTagPopup.getVisibility() == View.VISIBLE) {
            System.out.println("HIDE 111");
            hideHashtagSearch();
        }
        if (openedViews != null) {
            unsetBarBg();
            for (View view : openedViews) {
                view.setVisibility(View.GONE);
            }
            openedViews.clear();
        }
    }

    private void unsetBarBg() {
        try {
            getActivity().findViewById(R.id.allContactsBlock).setBackgroundColor(0);
            getActivity().findViewById(R.id.barFavorite).setBackgroundColor(0);
        }catch (NullPointerException e){
            e.printStackTrace();
        }
    }

    FrameLayout popupContactsCompany;

    public void showCompanyPopup(final Contact contact) {
        //  closeOtherPopup();
       /* if(profilePopUp != null)
            profilePopUp.setVisibility(View.GONE);
        profilePopUp = null;*/

        companyProfilePopup = (FrameLayout) mainView.getRootView().findViewById(R.id.company_popup);

        if (companyProfilePopup == null)
            companyProfilePopup = (FrameLayout) getActivity().findViewById(R.id.company_popup);

        //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.GONE);
        popupContactsCompany = getActivity().findViewById(R.id.popupContactsCompany);

        popupContactsCompany.setVisibility(View.GONE);

        //companyProfilePopup.findViewById(R.id.buttons_company_preview).setVisibility(View.VISIBLE);

        companyProfilePopup.findViewById(R.id.webImg).setOnClickListener(v -> {
        });

        try {


            companyProfilePopup.setOnClickListener(v -> {
                System.out.println("CLICK Company POPUP");
                if (popupUserHashtags != null)
                    if (popupUserHashtags.getVisibility() == View.VISIBLE) {
                        ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                        mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                        containerMost.setLayoutParams(mostParams);
                        ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                        assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                        containerAssistant.setLayoutParams(assistantParams);
                        popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                        popupUserHashtags.setVisibility(View.GONE);
                    }

                if (socialPopup != null && socialPopup.getVisibility() == View.VISIBLE) {
                    socialPopup.setVisibility(View.GONE);
                }

                if (contact.getListOfHashtags().size() == 0) {
                    showCompanyPopup(contact);
                }

                if (editFrameWeb != null && editFrameWeb.getVisibility() == View.VISIBLE) {
                    editFrameWeb.setVisibility(View.GONE);
                }

                if (popupContactsCompany != null && popupContactsCompany.getVisibility() == View.VISIBLE) {
                    popupContactsCompany.setVisibility(View.GONE);
                }

            });

            companyProfilePopup.findViewById(R.id.webImg).setVisibility(View.GONE);
            companyProfilePopup.findViewById(R.id.emailImg).setVisibility(View.GONE);

            if (!contact.isValid()) {
                companyProfilePopup.setVisibility(View.GONE);
                return;
            }

            if (contact.webSite != null && !contact.webSite.isEmpty()) {
                //System.out.println("WEB ICIT");
                ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                String web_c = contact.webSite;

                if (web_c.contains("www.")) {
                    web_c = web_c.replace("www.", "");
                }
                if (web_c.contains("https://")) {
                    web_c = web_c.replace("https://", "");
                }
                if (web_c.contains("http://")) {
                    web_c = web_c.replace("http://", "");
                }

                ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText(web_c);
                ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                            String uri = contact.webSite;
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));

                            if (getActivity() != null)
                                getActivity().startActivity(i);
                            /*else
                                MainActivity.activityProfile.startActivity(i);
*/
                        } catch (Exception e) {

                        }
                    }
                });

                companyProfilePopup.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                            String uri = contact.webSite;
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));

                            if (getActivity() != null)
                                getActivity().startActivity(i);
                            /*else
                                MainActivity.activityProfile.startActivity(i);*/

                        } catch (Exception e) {

                        }
                    }
                });
            } else {
                ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web);
                //companyProfilePopup.findViewById(R.id.web_title).setVisibility(View.GONE);
                ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText("add web");
                ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.gray));


                companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            editFrameWeb = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
                            ((TextView) editFrameWeb.findViewById(R.id.typeField)).setText("Web");

                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setVisibility(View.VISIBLE);
                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocialInsta)).setVisibility(View.GONE);
                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_web));
                            ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                            editFrameWeb.findViewById(R.id.ok_social).setVisibility(View.GONE);

                            editFrameWeb.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                            ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setHint("Add name or address");
                            ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);


                            editFrameWeb.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                    editFrameWeb.setVisibility(View.GONE);
                                }
                            });

                            editFrameWeb.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().length() > 0) {


                                        Realm realm = Realm.getDefaultInstance(); //+
                                        realm.beginTransaction();
                                        contact.webSite = ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();
                                        realm.commitTransaction();
                                        realm.close();


                                        ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                                        ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                                        String web_c = contact.webSite;

                                        if (web_c.contains("www.")) {
                                            web_c = web_c.replace("www.", "");
                                        }
                                        if (web_c.contains("https://")) {
                                            web_c = web_c.replace("https://", "");
                                        }
                                        if (web_c.contains("http://")) {
                                            web_c = web_c.replace("http://", "");
                                        }

                                        ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText(web_c);
                                        ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                                        companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                try {

                                                    //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                    String uri = contact.webSite;
                                                    if (!uri.contains("https://") && !uri.contains("http://"))
                                                        uri = "https://" + uri;

                                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                                    i.setData(Uri.parse(uri));

                                                    if (getActivity() != null)
                                                        getActivity().startActivity(i);
                                                    /*else
                                                        MainActivity.activityProfile.startActivity(i);*/

                                                } catch (Exception e) {

                                                }
                                            }
                                        });

                                        companyProfilePopup.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                try {

                                                    //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                    String uri = contact.webSite;
                                                    if (!uri.contains("https://") && !uri.contains("http://"))
                                                        uri = "https://" + uri;

                                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                                    i.setData(Uri.parse(uri));

                                                    if (getActivity() != null)
                                                        getActivity().startActivity(i);
                                                    /*else
                                                        MainActivity.activityProfile.startActivity(i);*/

                                                } catch (Exception e) {

                                                }
                                            }
                                        });
                                    }
                                    editFrameWeb.setVisibility(View.GONE);
                                }
                            });


                            editFrameWeb.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    String socialLinkClip = "";
                                    for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                                        if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                            boolean checkFind = false;
                                            for (Clipboard cl2 : cl.getListClipboards()) {
                                                if (cl2.getType().equals(ClipboardEnum.WEB)) {
                                                    socialLinkClip = cl2.getValueCopy();
                                                    checkFind = true;
                                                    break;
                                                }
                                            }
                                            if (checkFind) break;
                                        } else {
                                            if (cl.getType().equals(ClipboardEnum.WEB)) {
                                                socialLinkClip = cl.getValueCopy();
                                                break;
                                            }
                                        }
                                    }
                                    ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                                }
                            });


                            editFrameWeb.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    try {
                                        if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                            String uri = contact.webSite;
                                            if (!uri.contains("https://") && !uri.contains("http://"))
                                                uri = "https://" + uri;

                                            Intent i = new Intent(Intent.ACTION_VIEW);
                                            i.setData(Uri.parse(uri));

                                            if (getActivity() != null)
                                                getActivity().startActivity(i);
                                            /*else
                                                MainActivity.activityProfile.startActivity(i);*/
                                        }

                                    } catch (Exception e) {

                                    }
                                }
                            });

                            editFrameWeb.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                                @Override
                                public boolean onTouch(View v, MotionEvent event) {
                                    return false;
                                }
                            });

                            editFrameWeb.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    try {

                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                        if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                            String uri = ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();

                                           /* if(ClipboardType.isWeb(uri)) {
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                            }else {*/
                                            Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                                            intent.putExtra(SearchManager.QUERY, ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString());
                                            if (getActivity() != null)
                                                getActivity().startActivity(intent);
                                            //    }

                                        }

                                    } catch (Exception e) {

                                    }
                                }
                            });


                            editFrameWeb.setVisibility(View.VISIBLE);


                            openedViews.add(editFrameWeb);
                        } catch (Exception e) {

                        }
                    }
                });


            }

            LinearLayout containerHashTags = (LinearLayout) companyProfilePopup.findViewById(R.id.containerHashTags);

            if (containerHashTags.getChildCount() > 0)
                containerHashTags.removeAllViews();

            for (HashTag hashTag : contact.getListOfHashtags()) {
                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                text.setText(hashTag.getHashTagValue() + " ");
                text.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        System.out.println("HASSH 88");
                        contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                    }
                });
                //    text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                text.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View view) {

                        deleteHashTagsFromUser(hashTag.getHashTagValue(), contact);
                        return false;
                    }
                });
                containerHashTags.addView(text);
            }

            if (contact.getListOfHashtags().size() == 0) {
                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.gray));
                text.setText("hashtags");
                text.setOnClickListener(v -> {
                    containerHashTags.removeAllViews();
                    showPopupUserHashtags(contact);
                });
                containerHashTags.addView(text);
            }


            HorizontalScrollView scrollView = (HorizontalScrollView) companyProfilePopup.findViewById(R.id.scrollHorizontal);
            if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
            scrollView.addView(containerHashTags);
            scrollView.setSmoothScrollingEnabled(false);
            scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
            scrollView.setSmoothScrollingEnabled(true);


            companyProfilePopup.findViewById(R.id.arrowShowHashtags).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (socialPopup != null) {
                        if (socialPopup.getVisibility() == View.VISIBLE)
                            return;
                        showPopupUserHashtags(contact);
                    } else
                        showPopupUserHashtags(contact);
                }
            });


            //=========================
            ((TextView) companyProfilePopup.findViewById(R.id.name)).setText(contact.getName());

            ((TextView) companyProfilePopup.findViewById(R.id.companyNumb)).setText(String.valueOf(contact.listOfContacts.size()));
            ((TextView) popupContactsCompany.findViewById(R.id.companyNumb)).setText(String.valueOf(contact.listOfContacts.size()));


            companyProfilePopup.findViewById(R.id.company_profile_block).setOnClickListener(v -> {

                if (ContactAdapter.checkMerge) {
                    System.out.println("QQQ WWW");
                    ContactAdapter.checkFoActionIconProfile = true;
                    ContactAdapter.checkFoActionIconProfileCompany = true;
                    ContactAdapter.checkMerge = false;
                }

                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(contact, false)).addToBackStack("company").commit();

                companyProfilePopup.setVisibility(View.INVISIBLE);

                System.out.println("INVSIBLE");
            });

            companyProfilePopup.findViewById(R.id.company_profile_block).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK COMPANYs");
                    if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE)
                        profilePopUp.setVisibility(View.GONE);

                    TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.companyTextPreviev));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            OnUpTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            OnCalcelTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            OnMoveTouchMethod(textView, motionEvent, frameLayout);
                            break;
                        }
                    }

                    return false;
                }
            });

            companyProfilePopup.findViewById(R.id.user_edit_block).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK COMPANY");
                    TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.EditCompanyPreview));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_edit_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            OnUpTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            OnCalcelTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            OnMoveTouchMethod(textView, motionEvent, frameLayout);
                            break;
                        }
                    }

                    return false;
                }
            });


            companyProfilePopup.findViewById(R.id.user_call_block).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK COMPANY");
                    TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.CompanyCallPreview));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_call_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            OnUpTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            OnCalcelTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            OnMoveTouchMethod(textView, motionEvent, frameLayout);
                            break;
                        }
                    }

                    return false;
                }
            });

            companyProfilePopup.findViewById(R.id.user_remind_block).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK COMPANY");
                    TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.remindCompanyPreview));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_remind_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            OnUpTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            OnCalcelTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            OnMoveTouchMethod(textView, motionEvent, frameLayout);
                            break;
                        }
                    }

                    return false;
                }
            });

            companyProfilePopup.findViewById(R.id.user_share_block).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK COMPANY");
                    TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.shareCompanyPreview));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_share_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            OnUpTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            OnCalcelTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            OnMoveTouchMethod(textView, motionEvent, frameLayout);
                            break;
                        }
                    }

                    return false;
                }
            });


            companyProfilePopup.findViewById(R.id.user_edit_block).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                }
            });

            companyProfilePopup.findViewById(R.id.user_call_block).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                }
            });

            companyProfilePopup.findViewById(R.id.user_remind_block).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                }
            });

            companyProfilePopup.findViewById(R.id.user_share_block).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                }
            });

            /*if (contact.getSocialModel() != null) {

                SocialModel socialModel = contact.getSocialModel();


                if (socialModel.getFacebookLink() != null) {
                    companyProfilePopup.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (socialModel.getFacebookLink() != null) {
                                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://facebook.com/" + socialModel.getFacebookLink()));
                                startActivity(intent);
                            }
                        }
                    });
                }

                if (socialModel.getVkLink() != null) {
                    companyProfilePopup.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (socialModel.getVkLink() != null) {
                                final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/" + socialModel.getVkLink()));
                                startActivity(intent);
                            }
                        }
                    });
                }

                if (socialModel.getLinkedInLink() != null) {
                    companyProfilePopup.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent telegramIntent;
                            try {
                                telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("http://linkedin.com/in/" + socialModel.getLinkedInLink()));
                                startActivity(telegramIntent);
                            } catch (Exception e) {
                            }
                        }
                    });
                }

                if (socialModel.getInstagramLink() != null) {
                    companyProfilePopup.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent telegramIntent;
                            try {
                                telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse(socialModel.getInstagramLink()));
                                startActivity(telegramIntent);
                            } catch (Exception e) {
                            }
                        }
                    });
                }

                if (socialModel.getTelegramLink() != null) {
                    companyProfilePopup.findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            Intent telegramIntent;
                            try {
                                telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("http://telegram.me/" + socialModel.getTelegramLink()));
                                startActivity(telegramIntent);
                            } catch (Exception e) {
                            }
                        }
                    });
                }

                if (socialModel.getSkypeLink() != null) {
                    companyProfilePopup.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            try {
                                Intent sky = new Intent("android.intent.action.VIEW");
                                sky.setData(Uri.parse("skype:" + socialModel.getSkypeLink()));
                                startActivity(sky);
                            } catch (Exception e) {
                                Toast.makeText(mainView.getContext(), "Please install skype app", Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                }

                if (socialModel.getViberLink() != null) {
                    companyProfilePopup.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            try {
                                Uri uri = Uri.parse("tel:" + Uri.encode(socialModel.getViberLink()));
                                Intent intent = new Intent("android.intent.action.VIEW");
                                intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                                intent.setData(uri);
                                startActivity(intent);
                            } catch (Exception e) {
                                Toast.makeText(mainView.getContext(), "Please install viber app", Toast.LENGTH_SHORT)
                                        .show();
                            }
                        }
                    });
                }

                if (socialModel.getWhatsappLink() != null) {
                    companyProfilePopup.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            PackageManager pm = getActivity().getPackageManager();
                            try {
                                PackageInfo info = pm.getPackageInfo("com.whatsapp", PackageManager.GET_META_DATA);
                                Intent waIntent = new Intent(Intent.ACTION_SEND);
                                waIntent.setType("text/plain");
                                waIntent.setPackage("com.whatsapp");
                                waIntent.putExtra(Intent.EXTRA_TEXT, "YOUR TEXT");
                                startActivity(waIntent);
                            } catch (PackageManager.NameNotFoundException e) {
                                Toast.makeText(mainView.getContext(), "Please install whatsapp app", Toast.LENGTH_SHORT)
                                        .show();
                            }
                            ;
                        }
                    });
                }
            }*/


            companyProfilePopup.findViewById(R.id.socialsArrowDown).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //showSocialPopup(contact);
                }
            });


            if (contact.getPhotoURL() == null) {
                companyProfilePopup.findViewById(R.id.companyPopupAvatar).setBackgroundColor(contact.color);

                String initials = "";
                String names[] = contact.getName().split("\\s+");

                for (String namePart : names)
                    initials += namePart.charAt(0);

                companyProfilePopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                ((TextView) companyProfilePopup.findViewById(R.id.profilePopupInitials)).setText(initials);
            }

            selectedContactPopup = contact;
            //      lastOpenedProfileId = String.valueOf(contact.getId());


            //=================check Socials


            Realm realm = Realm.getDefaultInstance(); //+
            realm.beginTransaction();

            if (contact.getSocialModel() != null) {
                for (Contact contactC : contact.listOfContacts) {
                    if (contactC.getSocialModel() != null) {
                        if (contactC.getSocialModel().getFacebookLink() != null && contact.getSocialModel().getFacebookLink() != null && SocialEq.checkStrSocials(contact.getSocialModel().getFacebookLink(), contactC.getSocialModel().getFacebookLink())) {
                            contact.getSocialModel().setFacebookLink(null);
                            contact.hasFacebook = false;
                        }

                        if (contactC.getSocialModel().getVkLink() != null && contact.getSocialModel().getVkLink() != null && contact.getSocialModel().getVkLink().equalsIgnoreCase(contactC.getSocialModel().getVkLink())) {
                            contact.getSocialModel().setVkLink(null);
                            contact.hasVk = false;
                        }

                        if (contactC.getSocialModel().getInstagramLink() != null && contact.getSocialModel().getInstagramLink() != null && contact.getSocialModel().getInstagramLink().equalsIgnoreCase(contactC.getSocialModel().getInstagramLink())) {
                            contact.getSocialModel().setInstagramLink(null);
                            contact.hasInst = false;
                        }

                        if (contactC.getSocialModel().getLinkedInLink() != null && contact.getSocialModel().getLinkedInLink() != null && contact.getSocialModel().getLinkedInLink().equalsIgnoreCase(contactC.getSocialModel().getLinkedInLink())) {
                            contact.getSocialModel().setLinkedInLink(null);
                            contact.hasLinked = false;
                        }

                        if (contactC.getSocialModel().getTwitterLink() != null && contact.getSocialModel().getTwitterLink() != null && contact.getSocialModel().getTwitterLink().equalsIgnoreCase(contactC.getSocialModel().getTwitterLink())) {
                            contact.getSocialModel().setTwitterLink(null);
                            contact.hasTwitter = false;
                        }

                        if (contactC.getSocialModel().getYoutubeLink() != null && contact.getSocialModel().getYoutubeLink() != null && contact.getSocialModel().getYoutubeLink().equalsIgnoreCase(contactC.getSocialModel().getYoutubeLink())) {
                            contact.getSocialModel().setYoutubeLink(null);
                            contact.hasYoutube = false;
                        }
                    }
                }
            }

            realm.commitTransaction();
            realm.close();


            //=========================


            initIconColor(contact, companyProfilePopup);

            initContact_companyPopup(contact, companyProfilePopup);


            companyProfilePopup.findViewById(R.id.popup_company_open_socialPopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    showSocialPopup(contact);
                }
            });


            companyProfilePopup.findViewById(R.id.contactsArrowDown).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {




                   /* if(contact.listOfContacts.size() == 1){
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText("1 contact");
                    }else
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText(String.valueOf(contact.listOfContacts.size())+" contacts");*/


                    RecyclerView recyclerViewContacts = popupContactsCompany.findViewById(R.id.recycler_company_preview_contacts);

                    RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(getContext(), 2);

                    recyclerViewContacts.setLayoutManager(new LinearLayoutManager(getActivity()));

                    Contacts_company_preview_adapter contacts_company_preview_adapter = new Contacts_company_preview_adapter(contact.listOfContacts, getContext(), ContactsFragment.this);

                    recyclerViewContacts.setAdapter(contacts_company_preview_adapter);

                    initAdapterCompanyContacts(contacts_company_preview_adapter);

                    //popupContactsCompany.findViewById(R.id.buttons_company_preview).setVisibility(View.GONE);

                    //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.VISIBLE);

                    popupContactsCompany.setVisibility(View.VISIBLE);

                    popupContactsCompany.findViewById(R.id.closeArrowSocial).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            popupContactsCompany.setVisibility(View.GONE);
                        }
                    });

                    openedViews.add(popupContactsCompany);


                    popupContactsCompany.findViewById(R.id.cancelEditField).setOnClickListener(v1 -> {
                        //companyProfilePopup.findViewById(R.id.buttons_company_preview).setVisibility(View.VISIBLE);

                        //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.GONE);
                        popupContactsCompany.setVisibility(View.GONE);
                    });


                    popupContactsCompany.findViewById(R.id.sortElements).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            sortListCompany(contacts_company_preview_adapter);

                            initContact_companyPopup(contact, companyProfilePopup);
                        }
                    });

                    popupContactsCompany.findViewById(R.id.populHashTag).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                        }
                    });

                    popupContactsCompany.findViewById(R.id.sortByTime).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                            sortByTimeCompany(contacts_company_preview_adapter);

                            initContact_companyPopup(contact, companyProfilePopup);
                        }
                    });
                }
            });

            companyProfilePopup.setVisibility(View.VISIBLE);
            companyProfilePopup.setFocusable(true);
            companyProfilePopup.setClickable(true);
            companyProfilePopup.requestFocus();
            if (openedViews != null) openedViews.add(companyProfilePopup);

        } catch (NullPointerException e) {
            e.printStackTrace();
        }

    }

    public void initAdapterCompanyContacts(Contacts_company_preview_adapter adapter) {
        mPrefCompany = getContext().getSharedPreferences("Sort", Context.MODE_PRIVATE);
        String sort = mPrefCompany.getString("typeSortCompany", "sortByAsc");

        if (sort.equals("sortByAsc")) {
            adapter.sortByAsc();
            sortedDescCompany = false;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setText("A-Z");
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        } else if (sort.equals("sortByDesc")) {
            adapter.sortByDesc();
            sortedDescCompany = true;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setText("Z-A");
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        } else if (sort.equals("sortByTimeAsc")) {
            adapter.sortByTimeAsc();
            sortTimeAscCompany = false;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
        } else if (sort.equals("sortByTimeDesc")) {
            adapter.sortByTimeDesc();
            sortTimeAscCompany = true;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
        }
    }

    public void sortByTimeCompany(Contacts_company_preview_adapter adapter) {

        if (!sortTimeAscCompany) {
            sortByTimeDescCompany(adapter);

            sortTimeAscCompany = true;
        } else {
            sortByTimeAscCompany(adapter);
            sortTimeAscCompany = false;
        }
        //companyAdapter.notifyDataSetChanged();
    }

    public void sortByTimeAscCompany(Contacts_company_preview_adapter adapter) {
        sortTimeAscCompany = false;
        adapter.sortByTimeAsc();
    }

    public void sortByTimeDescCompany(Contacts_company_preview_adapter adapter) {
        sortTimeAscCompany = true;
        adapter.sortByTimeDesc();
    }

    public void sortListCompany(Contacts_company_preview_adapter adapter) {
        if (sortedDesc) {
            sortArrayByAscCompany(adapter);
            sortedDesc = false;
            return;
        }
        sortArrayByDescCompany(adapter);
        sortedDesc = true;
    }

    private void sortArrayByDescCompany(Contacts_company_preview_adapter adapter) {
        ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        adapter.sortByDesc();
        TextView sortText = (TextView) popupContactsCompany.findViewById(R.id.sortText);
        sortText.setText("Z-A");
    }

    private void sortArrayByAscCompany(Contacts_company_preview_adapter adapter) {
        ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        adapter.sortByAsc();
        TextView sortText = (TextView) popupContactsCompany.findViewById(R.id.sortText);
        sortText.setText("A-Z");
    }


    private String getInitials(Contact contact) {
        String initials = "";
        if (contact.getName() != null && !contact.getName().isEmpty()) {
            String names[] = contact.getName().split("\\s+");
            for (String namePart : names) {
                if (namePart != null && namePart.length() > 0)
                    initials += namePart.charAt(0);
            }
        }
        return initials.toUpperCase();
    }

    public void initContact_companyPopup(Contact company, View view) {
        view.findViewById(R.id.first_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.second_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.third_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.four_contact_company_preview_frame).setVisibility(View.GONE);

        int count_C_comp = 0;

        for (Contact contact : company.listOfContacts) {

            if (count_C_comp == 0) {
                ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.first_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 1) {
                ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.second_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 2) {
                ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.third_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 3) {
                ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.four_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }


            count_C_comp++;

            if (count_C_comp == 4) break;

        }

        ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProf(company.listOfContacts.get(0));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProf(company.listOfContacts.get(1));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProf(company.listOfContacts.get(2));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProf(company.listOfContacts.get(3));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    public boolean chekcCkick = false;

    private void fillProfileData(final Contact contact, final View profilePopUp) {
        ((TextView) profilePopUp.findViewById(R.id.name)).setText(contact.getName());


        profilePopUp.findViewById(R.id.company).setVisibility(View.GONE);
        profilePopUp.findViewById(R.id.company_title).setVisibility(View.VISIBLE);

        if (contact.getCompany() != null && !contact.getCompany().isEmpty()) {

            profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                        System.out.println("CCCCCCC 111111111111111");
                        for (Contact searchCompany : listOfContacts) {
                            if (searchCompany.isValid() && searchCompany.getName().toLowerCase().compareTo(contact.getCompany().toLowerCase()) == 0) {

                                //contactAdapter.setSelectContactID(searchCompany.getName());
                                showCompanyPopup(searchCompany);
                            }
                        }
                    }
            );

            ((TextView) profilePopUp.findViewById(R.id.company_title)).setText(contact.getCompany());
            ((TextView) profilePopUp.findViewById(R.id.company_title)).setHint("");

            profilePopUp.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    contactAdapter.searchByCompany(contact.getCompany());
                    return true;
                }
            });
//            profilePopUp.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
//                @Override
//                public boolean onLongClick(View v) {
//                    contactAdapter.searchByCompany(contact.getCompany());
//                    return true;
//                }
//            });
        } else {
            ((TextView) profilePopUp.findViewById(R.id.company_title)).setText("");

            ((TextView) profilePopUp.findViewById(R.id.company_title)).setHint("Company");

            profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                        System.out.println("CCCCCCCCCCCC 222222222222");
                        if (((TextView) profilePopUp.findViewById(R.id.company_title)).getText() == "")
                            showCompanyAddPopup(contact, null, false);
                    }
            );
        }


        if (contact.getCompanyPossition() != null) {
            profilePopUp.findViewById(R.id.company).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.company)).setText(contact.getCompanyPossition());
            getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    //contactAdapter.findByPossition(selectedPossition);
                }
            });
            profilePopUp.findViewById(R.id.company).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    System.out.println(" CLICK CCC");


                    getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v1 -> {
                        //contactAdapter.defaultListContacts();


                        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                        ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                        getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);

                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);


                        initRecyclerHashTags();

                        System.out.println("Close position select");
                        contactAdapter.defaultListContacts();
                        contactAdapter.stopNEWSelection();

                        //contactAdapter.setListOfContacts(listForSelect);
                        listForSelect = new ArrayList<>();
                    });
                    stopSelectionMode();

                    int countContacts = contactAdapter.findByPossition(contact.getCompanyPossition());

                    if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                        listForSelect = new ArrayList<>();
                        listForSelect.addAll(contactAdapter.getListOfContacts());
                        System.out.println("listFor select = " + listForSelect.size());
                    }


                    closeOtherPopup();
                    getActivity().findViewById(R.id.contactsText).setVisibility(View.GONE);


                    SpannableStringBuilder str = new SpannableStringBuilder(contact.getCompanyPossition());
                    str.setSpan(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD), 0, contact.getCompanyPossition().length() - 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

                    ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).setText(countContacts + " Contacts selected by position " + str);
                    selectedPossition = contact.getCompanyPossition();


                    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
                    getActivity().findViewById(R.id.typeHash).setVisibility(View.GONE);
                }
            });
        } else {
            ((TextView) profilePopUp.findViewById(R.id.company_title)).setHint("Company");
            ((TextView) profilePopUp.findViewById(R.id.company)).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.company)).setText("");
            ((TextView) profilePopUp.findViewById(R.id.company)).setHint("  Position");
            profilePopUp.findViewById(R.id.company).setOnClickListener(v -> {
                        showPositionAddPopup(contact, null, false);
                    }
            );
        }


        try {
            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackgroundColor(Color.TRANSPARENT);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
            if (((BitmapDrawable) ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                circle.setColor(contact.color);
                profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                String initials = "";
                String names[] = contact.getName().split("\\s+");

                for (String namePart : names)
                    initials += namePart.charAt(0);

                profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
            }
        } catch (Exception e) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
        }


        //=======================================================================================


        long id = contact.getId();

       /* Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
        if (true) {
*/

        new Thread(new Runnable() {
            @Override
            public void run() {

                /*RealmConfiguration contextRealm = new RealmConfiguration.
                        Builder().
                        deleteRealmIfMigrationNeeded().
                        build();
                Realm realm = Realm.getInstance(contextRealm);*/

                Contact contact = ContactCacheService.getContactByIdAndWithoutRealm(id);

                /*Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
                if (c == null || c.getCount() == 0) {
                    String idN = contactsService.getIdContactByName(contact.getName());
                    if (idN == null) {
                        return;
                    } else {
                        //realm.beginTransaction();
                        contact.setIdContact(idN);
                        //realm.commitTransaction();
                    }
                }*/

                Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
                if (c == null || c.getCount() == 0) {
                        /*System.out.println("SEARCH NULL CONTACT");
                        String idN = contactsService.getIdContactByName(contact.getName());
                        if (idN == null) {
                            return;
                        } else {
                            //realm.beginTransaction();
                            contact.setIdContact(idN);
                            //realm.commitTransaction();
                        }*/
                    return;
                } else {
                    /*boolean checkName = false;
                    while (c.moveToNext()) {
                        //System.out.println("Cursor name = "+c.getString(0));
                        if (contact.getName().equalsIgnoreCase(c.getString(0))) {
                            checkName = true;
                            break;
                        }
                    }
                    if (!checkName) {
                        return;
                    }*/
                }

                ArrayList<DataUpdate> listUpdatingData;
                listUpdatingData = new ArrayList<>();
                Cursor organizationCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ORGANIZATION, contact.getIdContact());

                Realm realm2 = Realm.getDefaultInstance();

                ArrayList<Contact> listOFCompanies = ContactCacheService.getCompaniesRealm(realm2);

                boolean showUpdate = false;

                String companyOfContact = null;
                if (contact.getCompany() != null)
                    companyOfContact = contact.getCompany();

                String positionContact = null;

                if (contact.getCompanyPossition() != null)
                    positionContact = contact.getCompanyPossition();

                //realm.beginTransaction();
                contact.setCompanyPossition(null);
                //realm.commitTransaction();

                int nameHash = contact.getName().hashCode();

                boolean found = false;

                while (organizationCursor != null && organizationCursor.moveToNext()) {
                    String orgName = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA));
                    String companyPossition = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.TITLE));

                    //System.out.println("COMPANY3 = " + orgName + ", name = " + getName() + ", id = " + getId());

                    //realm.beginTransaction();
                    contact.setCompanyPossition(companyPossition);

                    //realm.commitTransaction();

                    if (orgName != null && !orgName.isEmpty()) {

                        //System.out.println("COMPANY2 = " + orgName + ", name = " + getName() + ", id = " + getId());

                        String oldCompany = null;
                        if (contact.getCompany() != null && !contact.getCompany().isEmpty() && !contact.getCompany().trim().equalsIgnoreCase(orgName.trim()))
                            oldCompany = contact.getCompany();

                        //realm.beginTransaction();
                        contact.setCompany(orgName.trim());
                        //realm.commitTransaction();

                        /*for (Contact searchCompanyContact : listOFCompanies) {
                            if (searchCompanyContact.isValid() && searchCompanyContact.getName().equalsIgnoreCase(orgName.trim())) {
                                if (oldCompany != null) {
                                    for (Contact comp : listOFCompanies) {
                                        if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {
                                            if (comp.listOfContacts.size() == 1) {
                                                EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                            }
                                            ContactCacheService.removeContactFromCompany(comp, contact);
                                            break;
                                        }
                                    }
                                }

                                if (!searchCompanyContact.listOfContacts.contains(contact)) {
                                    if (searchCompanyContact.getName().equals("1337")) {
                                        //System.out.println("name = " + getName());
                                    }
                                    //System.out.println("COM{A, name = " + getName() + ", com = " + searchCompanyContact.getName());
                                    realm.beginTransaction();
                                    searchCompanyContact.listOfContacts.add(contact);
                                    realm.commitTransaction();
                                }
                                found = true;
                            }
                        }*/

                        /*if (!found) {
                            Date date1 = contact.getDateCreate();
                            Calendar cal1 = Calendar.getInstance();
                            cal1.setTime(date1);
                            Time time1 = contactsService.getRandomDate();
                            time1.setHours(cal1.get(Calendar.HOUR_OF_DAY));
                            time1.setMinutes(cal1.get(Calendar.MINUTE));
                            time1.setSeconds(cal1.get(Calendar.SECOND));
                            Contact companyContact = new Contact(0, orgName.trim(), null, false, true, true, time1.toString(), null, date1);
                            companyContact.time = contact.time.toString();
                            companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                            if (oldCompany != null) {
                                for (Contact comp : listOFCompanies) {
                                    if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {

                                        if (comp.listOfContacts.size() == 1) {
                                            *//*ContactAdapter cont = ContactAdapter.contactAd;
                                            cont.removeContactById(comp);*//*
                         *//* getActivity().runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    contactAdapter.removeContactById(comp);
                                                    contactAdapter.notifyDataSetChanged();
                                                }
                                            });*//*
                                            //ContactsFragment.UPD_ALL = true;
                                            EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                        }
                                        ContactCacheService.removeContactFromCompany(comp, contact);
                                        break;
                                    }
                                }
                            }
                            companyContact.listOfContacts.add(contact);
                            ContactCacheService.updateCompany(companyContact);
                            listOFCompanies.add(ContactCacheService.getCompany(companyContact.getName()));
                            //ContactAdapter cont = ContactAdapter.contactAd;
                            //cont.addContact(companyContact);
                            //if(typeEnum.equals(FillDataEnums.PROFILE) || typeEnum.equals(FillDataEnums.PREVIEW)) {
                            EventBus.getDefault().post(new AddContact(companyContact.getId()));
                            ContactsFragment.UPD_ALL = true;
                           *//* }else if(typeEnum.equals(FillDataEnums.NEW)){
                                companyNewReturn = companyContact;
                            }*//*
                        }*/
                    }
                }
                boolean checkNull = false;
                if (organizationCursor != null && organizationCursor.getCount() > 0) {
                    organizationCursor.moveToFirst();
                    do {
                        if (organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)) != null && !organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)).equals("")) {
                            checkNull = true;
                            break;
                        }
                    } while (organizationCursor.moveToNext());

                }

                if (!checkNull) {
                    if (contact.getCompany() != null) {

                        for (Contact comp : listOFCompanies) {
                            if (comp.isValid() && comp.getName().equalsIgnoreCase(contact.getCompany())) {

                                /*if (comp.listOfContacts.size() == 1) {
                                    //ContactAdapter cont = ContactAdapter.contactAd;
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            contactAdapter.removeContactById(comp);
                                            contactAdapter.notifyDataSetChanged();
                                        }
                                    });
                                    EventBus.getDefault().post(new RemoveContact(comp.getId()));


                                    //cont.notifyDataSetChanged();
                                    //ContactsFragment.UPD_ALL = true;
                                }*/

                                //ContactCacheService.removeContactFromCompany(comp, contact);
                                //realm.beginTransaction();
                                contact.setCompany(null);
                                //realm.commitTransaction();
                                break;
                            }
                        }
                    }
                }

                realm2.close();


                if ((companyOfContact == null && contact.getCompany() != null) || (companyOfContact != null && contact.getCompany() == null) || (companyOfContact != null && contact.getCompany() != null && !companyOfContact.equals(contact.getCompany()))) {
                    showUpdate = true;
                    if (contact.getCompany() != null) {
                        String nameC = contact.getCompany();
                        listUpdatingData.add(new DataUpdate(nameC, ClipboardEnum.COMPANY));
                        /*getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setText(nameC);


                                profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                                            System.out.println("CCCCCCC 111111111111111");
                                            //Contact compa = ContactCacheService.getCompany(nameC);
                                            for (Contact searchCompany : ContactCacheService.getCompanies()) {
                                                if (searchCompany.getName().equalsIgnoreCase(nameC)) {

                                                    //contactAdapter.setSelectContactID(searchCompany.getName());
                                                    showCompanyPopup(searchCompany);
                                                }
                                            }
                                        }
                                );

                                profilePopUp.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
                                    @Override
                                    public boolean onLongClick(View v) {
                                        contactAdapter.searchByCompany(nameC);
                                        return true;
                                    }
                                });

                            }
                        });*/

                    } else {
                        /*getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setText("");

                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setHint("Company");

                                profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                                            System.out.println("CCCCCCCCCCCC 222222222222");
                                            if (((TextView) profilePopUp.findViewById(R.id.company_title)).getText() == "")
                                                showCompanyAddPopup(ContactCacheService.getContactById(id), null, false);
                                        }
                                );
                            }
                        });*/
                    }
                }

                if ((positionContact == null && contact.getCompanyPossition() != null) || (positionContact != null && contact.getCompanyPossition() == null) || (positionContact != null && contact.getCompanyPossition() != null && !positionContact.equals(contact.getCompanyPossition()))) {
                    //contact.setCompanyPossition(positionContact);
                    showUpdate = true;
                    if (contact.getCompanyPossition() != null) {
                        String pos = contact.getCompanyPossition();
                        listUpdatingData.add(new DataUpdate(pos, ClipboardEnum.POSITION));

                        /*getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {


                                profilePopUp.findViewById(R.id.company).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.company)).setText(pos);
                                getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        //contactAdapter.findByPossition(selectedPossition);
                                    }
                                });
                                profilePopUp.findViewById(R.id.company).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        System.out.println(" CLICK CCC");


                                        getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v1 -> {
                                            //contactAdapter.defaultListContacts();


                                            getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                                            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                                            getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);

                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);


                                            initRecyclerHashTags();

                                            System.out.println("Close position select");
                                            contactAdapter.defaultListContacts();
                                            contactAdapter.stopNEWSelection();

                                            //contactAdapter.setListOfContacts(listForSelect);
                                            listForSelect = new ArrayList<>();
                                        });
                                        stopSelectionMode();

                                        int countContacts = contactAdapter.findByPossition(pos);

                                        if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                                            listForSelect = new ArrayList<>();
                                            listForSelect.addAll(contactAdapter.getListOfContacts());
                                            System.out.println("listFor select = " + listForSelect.size());
                                        }


                                        closeOtherPopup();
                                        getActivity().findViewById(R.id.contactsText).setVisibility(View.GONE);


                                        SpannableStringBuilder str = new SpannableStringBuilder(pos);
                                        str.setSpan(new StyleSpan(Typeface.BOLD), 0, pos.length() - 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

                                        ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).setText(countContacts + " Contacts selected by position " + str);
                                        selectedPossition = ContactCacheService.getContactById(id).getCompanyPossition();


                                        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
                                    }
                                });


                            }
                        });*/
                    } else {


                       /* getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company)).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.company)).setText("");
                                ((TextView) profilePopUp.findViewById(R.id.company)).setHint("Position");
                                profilePopUp.findViewById(R.id.company).setOnClickListener(v -> {
                                            showPositionAddPopup(ContactCacheService.getContactById(id), null, false);
                                        }
                                );
                            }
                        });*/


                    }
                }


                String contactName = ContactsService.getDisplayName(getContext(), contact.getIdContact());
                if (contactName == null || contactName.equals("")) {

                } else if (!contact.getName().equals(contactName)) {
                    //realm.beginTransaction();
                    contact.setName(contactName);
                    //realm.commitTransaction();
                    showUpdate = true;
                    listUpdatingData.add(new DataUpdate(contactName, ClipboardEnum.NAME));

                    /*getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            ((TextView) profilePopUp.findViewById(R.id.name)).setText(contactName);
                        }
                    });*/
                }


                //phones


                ArrayList<String> listPhones = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                        listPhones.add(contact.getListOfContactInfo().get(i).value);
                    }
                }


                ArrayList<String> phone = contactsService.getContactPhones(contact.getIdContact());
                //System.out.println("ID FILL = "+idContact);
                //realm.beginTransaction();
                if (phone != null && phone.size() > 0) {
                    for (int i = 0; i < phone.size(); i++) {

                        String phonee = phone.get(i).trim();
                        phonee = phonee.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");

                        boolean phoneFind = false;
                        for (int j = 0; j < listPhones.size(); j++) {
                            String phone1 = listPhones.get(j);
                            phone1 = phone1.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                            if (phone1.equals(phonee)) {
                                phoneFind = true;
                                //listPhones.remove(j);
                                break;
                            }
                        }

                        if (!phoneFind) {
                            if (!phone.get(i).equals("+000000000000")) {
                                showUpdate = true;
                                listUpdatingData.add(new DataUpdate(phone.get(i), ClipboardEnum.PHONE));
                                contact.addPhone(phone.get(i));
                            }
                        }
                    }
                } else if (listPhones.isEmpty()) {
                    //contact.addPhone("+000000000000");
                    //contactsService.addPhoneToContact(contact.getIdContact(), "+000000000000", contact.getName());
                    //setName(contactName.trim());
                }

                if (listPhones != null && listPhones.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listPhones) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;
                                break;
                            }
                        }
                    }
                }


                //email
                //realm.beginTransaction();
                ArrayList<String> listEmail = new ArrayList<>();
                if (contact.getListOfContactInfo() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("email")) {
                            listEmail.add(contact.getListOfContactInfo().get(i).value);
                        }
                    }
                }

                ArrayList<String> addr = contactsService.getContactEmails(contact.getIdContact());
                for (String str : addr) {
                    boolean emailfind = false;
                    for (int i = 0; i < listEmail.size(); i++) {
                        if (str.equalsIgnoreCase(listEmail.get(i))) {
                            emailfind = true;
                            listEmail.remove(i);
                            break;
                        }
                    }
                    if (!emailfind) {
                        showUpdate = true;
                        listUpdatingData.add(new DataUpdate(str, ClipboardEnum.EMAIL));
                        contact.addEmail(str);
                    }
                }

                if (listEmail != null && listEmail.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listEmail) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }

                //realm.commitTransaction();
                //


                //address


                //realm.beginTransaction();


                ArrayList<String> listAddress = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("address")) {
                        listAddress.add(contact.getListOfContactInfo().get(i).value);
                    }
                }

                Cursor adressCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_ADRESS, contact.getIdContact());
                while (adressCursor != null && adressCursor.moveToNext()) {
                    String adress = adressCursor.getString(adressCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                    boolean findAddress = false;
                    for (String str : listAddress) {
                        if (str.equalsIgnoreCase(adress)) {
                            findAddress = true;
                            listAddress.remove(str);
                            break;
                        }
                    }
                    if (!findAddress) {
                        showUpdate = true;
                        listUpdatingData.add(new DataUpdate(adress, ClipboardEnum.ADDRESS));
                        contact.addAddress(adress);
                    }

                }

                if (listAddress != null && listAddress.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listAddress) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }


                //hash
                ArrayList<String> listOfHash = new ArrayList<>();
                RealmList<HashTag> hashList = new RealmList<>();

                ArrayList<HashTag> listHashOfContacts = new ArrayList<>();
                if (contact.getListOfHashtags() != null)
                    listHashOfContacts.addAll(contact.getListOfHashtags());

                Cursor noteCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                //realm.beginTransaction();
                //SocialModel socialModel = realm.createObject(SocialModel.class);
                SocialModel socialModel = new SocialModel();
                //realm.commitTransaction();
                boolean hasFacebook = false;
                boolean hasInst = false;
                boolean hasLinked = false;
                boolean hasVk = false;
                boolean hasSkype = false;
                boolean hasTelegram = contact.hasTelegram;
                boolean hasViber = contact.hasViber;
                boolean hasWhatsapp = contact.hasWhatsapp;
                boolean hasYoutube = false;
                boolean hasTwitter = false;
                boolean hasMedium = false;
                //realm.beginTransaction();
                if (noteCursor != null && noteCursor.getCount() > 0) {
                    while (noteCursor.moveToNext()) {
                        String note = noteCursor.getString(noteCursor.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        if (note != null && note.length() > 0) {
                            if (note.charAt(0) == '#') {
                                if (!listOfHash.contains(note.toLowerCase().trim())) {
                                    HashTag hashtag = new HashTag();
                                    hashtag.setDate(new Date());
                                    hashtag.setHashTagValue(note.toLowerCase().trim());
                                    hashList.add(hashtag);
                                    listOfHash.add(note.toLowerCase().trim());
                                }


                            } else if (/*(note.length() > 26 && note.toString().substring(0, 26).equalsIgnoreCase("https://www.instagram.com/")) || (note.length() > 18 && note.toString().substring(0, 18).equalsIgnoreCase("www.instagram.com/") ||
                                    (note.length() > 14 && note.toString().substring(0, 14).equalsIgnoreCase("instagram.com/")) || (note.length() > 22 && note.toString().substring(0, 22).equalsIgnoreCase("https://instagram.com/")))*/ ClipboardType.isInsta(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                String username = note;
                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);


                                    //contactsService.updateNote(contact.getIdContact(), note, username);
                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                    //contactsService.updateNote(contact.getIdContact(), note, username);
                                }


                                if (socialModel != null) {
                                    if (socialModel.getInstagramLink() == null || socialModel.getInstagramLink().isEmpty()) {
                                        socialModel.setInstagramLink(username);
                                        hasInst = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isVk(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getVkLink() == null || socialModel.getVkLink().isEmpty()) {
                                        socialModel.setVkLink(note);
                                        hasVk = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isFacebook(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getFacebookLink() == null || socialModel.getFacebookLink().isEmpty()) {
                                        socialModel.setFacebookLink(note);
                                        hasFacebook = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isLinkedIn(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getLinkedInLink() == null || socialModel.getLinkedInLink().isEmpty()) {
                                        socialModel.setLinkedInLink(note);
                                        hasLinked = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (note.contains("viber.com") || note.contains("https://www.viber.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasViber = true;

                                socialModel.setViberLink(note);

                            } else if (note.toString().contains("whatsapp.com") || note.toString().contains("https://www.whatsapp.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasWhatsapp = true;

                                socialModel.setWhatsappLink(note);

                            } else if (ClipboardType.isTelegram(note)) {
                                //SocialModel socialModel = contact.getSocialModel();
                                //hasTelegram = true;

                                //socialModel.setTelegramLink(note);

                                if (contact.getListOfContactInfo() == null) {
                                    contact.addNote(note);
                                } else {
                                    boolean checkS = false;
                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                            checkS = true;
                                            break;
                                        }
                                    }
                                    if (!checkS)
                                        contact.addNote(note);

                                }

                            } else if (note.toString().contains("skype.com") || note.toString().contains("https://www.skype.com") || note.contains("Skype: ")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                if (note.contains("Skype: ")) {
                                    hasSkype = true;
                                    String username = note.substring(7, note.length());

                                    socialModel.setSkypeLink(username);
                                } else {
                                    hasSkype = true;
                                    String username = note.substring(note.indexOf(".com") + 5, note.length());
                                    if (username.charAt(username.length() - 1) == '/')
                                        username = username.substring(0, username.length() - 1);

                                    socialModel.setSkypeLink(username);
                                }

                            } else if (ClipboardType.isYoutube(note)) {


                                if (note.contains("user") || note.contains("channel")) {
                                    if (socialModel != null) {
                                        if (socialModel.getYoutubeLink() == null || socialModel.getYoutubeLink().isEmpty()) {
                                            socialModel.setYoutubeLink(note);
                                            hasYoutube = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    } else if (note.contains("?")) {

                                                        int ind = note.indexOf('?');
                                                        if (ind != -1) {

                                                            if (contactInfo.value.equalsIgnoreCase(note.substring(0, ind))) {
                                                                System.out.println("FIND YOUTUBE 2");
                                                                contactsService.updateNote(contact.getIdContact(), note, note.substring(0, ind));
                                                                checkS = true;
                                                                break;
                                                            }


                                                        }


                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }
                            } else if (ClipboardType.isTwitter(note)) {


                                if (socialModel != null) {
                                    if (socialModel.getTwitterLink() == null || socialModel.getTwitterLink().isEmpty()) {
                                        socialModel.setTwitterLink(note);
                                        hasTwitter = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isMedium(note)) {


                                if (note.contains("com/@")) {
                                    if (socialModel != null) {
                                        if (socialModel.getMediumLink() == null || socialModel.getMediumLink().isEmpty()) {
                                            socialModel.setMediumLink(note);
                                            hasMedium = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }

                            } else {
                                boolean checkS = false;
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                        checkS = true;
                                        break;
                                    }
                                }
                                if (!checkS) {
                                    contact.addNote(note);
                                    showUpdate = true;
                                    if (ClipboardType.isWeb(note)) {
                                        listUpdatingData.add(new DataUpdate(note, ClipboardEnum.WEB));
                                    } else {
                                        listUpdatingData.add(new DataUpdate(note, ClipboardEnum.NOTE));
                                    }
                                }
                            }
                        }
                    }
                }
                //realm.commitTransaction();


                Cursor notesC = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                ArrayList<String> listInfoOfContact = new ArrayList<>();
                ArrayList<String> listNotes = new ArrayList<>();


                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    listInfoOfContact.add(contact.getListOfContactInfo().get(i).value);
                }

                if (notesC != null && notesC.getCount() > 0) {
                    while (notesC.moveToNext()) {
                        String note = notesC.getString(notesC.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        listNotes.add(note);
                        for (String str : listInfoOfContact) {
                            if (str.equals(note)) {
                                listInfoOfContact.remove(str);
                                break;
                            }
                        }
                    }
                }


                if (listInfoOfContact != null && listInfoOfContact.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listInfoOfContact) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str) && contact.getListOfContactInfo().get(i).type.equals("note")) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }


                //realm.beginTransaction();
                if (contact.hasFacebook != hasFacebook) {
                    showUpdate = true;
                    contact.hasFacebook = hasFacebook;
                }
                if (contact.hasVk != hasVk) {
                    showUpdate = true;
                    contact.hasVk = hasVk;
                }
                if (contact.hasInst != hasInst) {
                    showUpdate = true;
                    contact.hasInst = hasInst;
                }
                if (contact.hasLinked != hasLinked) {
                    showUpdate = true;
                    contact.hasLinked = hasLinked;
                }
                if (contact.hasTwitter != hasTwitter) {
                    showUpdate = true;
                    contact.hasTwitter = hasTwitter;
                }
                if (contact.hasYoutube != hasYoutube) {
                    showUpdate = true;
                    contact.hasYoutube = hasYoutube;
                }
                if (contact.hasMedium != hasMedium) {
                    showUpdate = true;
                    contact.hasMedium = hasMedium;
                }

                if (contact.getSocialModel() != null && (contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) && socialModel.getFacebookLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getFacebookLink(), ClipboardEnum.FACEBOOK));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty()) && socialModel.getInstagramLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getInstagramLink(), ClipboardEnum.INSTAGRAM));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) && socialModel.getLinkedInLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getLinkedInLink(), ClipboardEnum.LINKEDIN));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getVkLink() == null || contact.getSocialModel().getVkLink().isEmpty()) && socialModel.getVkLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getVkLink(), ClipboardEnum.VK));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) && socialModel.getTwitterLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getTwitterLink(), ClipboardEnum.TWITTER));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getYoutubeLink() == null || contact.getSocialModel().getYoutubeLink().isEmpty()) && socialModel.getYoutubeLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getYoutubeLink(), ClipboardEnum.YOUTUBE));
                }
                if (contact.getSocialModel() != null && (contact.getSocialModel().getMediumLink() == null || contact.getSocialModel().getMediumLink().isEmpty()) && socialModel.getMediumLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getMediumLink(), ClipboardEnum.MEDIUM));
                }

                if (contact.getSocialModel() != null && ((contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) || ((contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) && (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) && !contact.getSocialModel().getSkypeLink().equalsIgnoreCase(socialModel.getSkypeLink()))) && socialModel.getSkypeLink() != null) {
                    listUpdatingData.add(new DataUpdate(socialModel.getSkypeLink(), ClipboardEnum.SKYPE));
                    showUpdate = true;
                }

                    /*if (contact.hasSkype != hasSkype) {
                        showUpdate = true;
                        contact.hasSkype = hasSkype;
                    }
                    if (contact.hasTelegram != hasTelegram) {
                        showUpdate = true;
                        contact.hasTelegram = hasTelegram;
                    }
                    if (contact.hasViber != hasViber) {
                        showUpdate = true;
                        contact.hasViber = hasViber;
                    }
                    if (contact.hasWhatsapp != hasWhatsapp) {
                        showUpdate = true;
                        contact.hasWhatsapp = hasWhatsapp;
                    }*/

                if (hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                    socialModel.setTelegramLink(contact.getSocialModel().getTelegramLink());
                } else {
                    if (!hasTelegram) {
                        hasTelegram = false;
                        socialModel.setTelegramLink(null);
                    }
                }

                if (hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                    socialModel.setViberLink(contact.getSocialModel().getViberLink());
                } else {
                    if (!hasViber) {
                        hasViber = false;
                        socialModel.setViberLink(null);
                    }
                }

                if (hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                    socialModel.setWhatsappLink(contact.getSocialModel().getWhatsappLink());
                } else {
                    if (!hasWhatsapp) {
                        hasWhatsapp = false;
                        socialModel.setWhatsappLink(null);
                    }
                }

                /*if (hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                    socialModel.setSkypeLink(contact.getSocialModel().getSkypeLink());
                } else {
                    if (!hasSkype) {
                        hasSkype = false;
                        socialModel.setSkypeLink(null);
                    }
                }*/

                contact.setSocialModel(socialModel);
                //realm.commitTransaction();


                //realm.beginTransaction();
                contact.setListOfHashtags(hashList);
                //realm.commitTransaction();

                if (contact.getListOfHashtags().size() != listHashOfContacts.size()) {
                    //
                    showUpdate = true;
                } else {
                    for (HashTag h1 : listHashOfContacts) {
                        boolean check = false;
                        for (HashTag h2 : contact.getListOfHashtags()) {
                            if (h1.getHashTagValue().equalsIgnoreCase(h2.getHashTagValue())) {
                                check = true;
                                break;
                            }
                        }
                        if (!check) {
                            showUpdate = true;
                            break;
                        }
                    }
                }


                if (listHashOfContacts == null && contact.getListOfHashtags() != null) {
                    String str = "";
                    for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                        str += contact.getListOfHashtags().get(i).getHashTagValue() + " ";
                    }
                    listUpdatingData.add(new DataUpdate(str, ClipboardEnum.HASHTAG));
                } else if (listHashOfContacts != null && contact.getListOfHashtags() != null) {
                    String hst = "";
                    for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                        boolean checkH = false;
                        for (HashTag h : listHashOfContacts) {
                            if (contact.getListOfHashtags().get(i).getHashTagValue().equalsIgnoreCase(h.getHashTagValue())) {
                                checkH = true;
                                break;
                            }
                        }
                        if (!checkH)
                            hst += contact.getListOfHashtags().get(i).getHashTagValue() + " ";
                    }
                    if (hst.length() > 0)
                        listUpdatingData.add(new DataUpdate(hst, ClipboardEnum.HASHTAG));
                }


                String photoURL = ContactsService.getPhotoURI(getContext(), contact.getIdContact());

                if ((photoURL == null && contact.getPhotoURL() != null) || (photoURL != null && contact.getPhotoURL() == null) || (photoURL != null && contact.getPhotoURL() != null && !photoURL.equals(contact.getPhotoURL()))) {
                    showUpdate = true;
                    System.out.println("UPDATE PHOTO");

                    //realm.beginTransaction();
                    contact.setPhotoURL(photoURL);
                    //realm.commitTransaction();

                    int colotC = contact.color;
                    String nameContact = contact.getName();
                    /*getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {


                            try {
                                profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
                                profilePopUp.findViewById(R.id.profilePopupAvatar).setBackgroundColor(Color.TRANSPARENT);
                                ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(photoURL));
                                if (((BitmapDrawable) ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                    circle.setColor(colotC);
                                    profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                    ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                    String initials = "";
                                    String names[] = nameContact.split("\\s+");

                                    for (String namePart : names)
                                        initials += namePart.charAt(0);

                                    profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                    ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
                                }
                            } catch (Exception e) {
                                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                circle.setColor(colotC);
                                profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                String initials = "";
                                String names[] = nameContact.split("\\s+");

                                for (String namePart : names)
                                    initials += namePart.charAt(0);

                                profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
                            }


                        }
                    });*/


                }


                boolean finalShowUpdate = showUpdate;
                /*getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Contact contact = ContactCacheService.getContactById(id);

                        if(contact.listOfContactInfo != null) {
                            ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
                            boolean checkMail = false;
                            for (ContactInfo contactInfo : contact.listOfContactInfo) {
                                if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                                    checkMail = true;
                                    ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                                    profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                                    "mailto", contactInfo.value, null));
                                            emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                                            emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                                            startActivity(Intent.createChooser(emailIntent, "Send email"));
                                        }
                                    });
                                }
                            }
                            if(!checkMail){
                                profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                    }
                                });
                            }
                        }

                        //=============================================== SOCIALS

                        if (contact.getSocialModel() != null) {

                            SocialModel socialModel = contact.getSocialModel();


                            if (socialModel.getFacebookLink() != null) {
                                profilePopUp.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (socialModel.getFacebookLink() != null) {
                                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://facebook.com/" + socialModel.getFacebookLink()));
                                            startActivity(intent);
                                        }
                                    }
                                });
                            }

                            if (socialModel.getVkLink() != null) {
                                profilePopUp.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (socialModel.getVkLink() != null) {
                                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/" + socialModel.getVkLink()));
                                            startActivity(intent);
                                        }
                                    }
                                });
                            }

                            if (socialModel.getLinkedInLink() != null) {
                                profilePopUp.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Intent telegramIntent;
                                        try {
                                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                                            telegramIntent.setData(Uri.parse("http://linkedin.com/in/" + socialModel.getLinkedInLink()));
                                            startActivity(telegramIntent);
                                        } catch (Exception e) {
                                        }
                                    }
                                });
                            }

                            if (socialModel.getInstagramLink() != null) {
                                profilePopUp.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Intent telegramIntent;
                                        try {
                                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                                            telegramIntent.setData(Uri.parse("http://instagram.com/" + socialModel.getInstagramLink()));
                                            startActivity(telegramIntent);
                                        } catch (Exception e) {
                                        }
                                    }
                                });
                            }

                            //   if (socialModel.getTelegramLink() != null) {
                            getActivity().findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    System.out.println("TTTTTTTTTTTGGGGGGGGGGGGGGGG click");
                                    Intent telegramIntent;
                                    try {
                                        telegramIntent = new Intent(Intent.ACTION_VIEW);
                                        telegramIntent.setData(Uri.parse("http://telegram.me/" + socialModel.getTelegramLink()));
                                        startActivity(telegramIntent);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            });
                            //      }

                            if (socialModel.getSkypeLink() != null) {
                                profilePopUp.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        try {
                                            Intent sky = new Intent("android.intent.action.VIEW");
                                            sky.setData(Uri.parse("skype:" + socialModel.getSkypeLink()));
                                            startActivity(sky);
                                        } catch (Exception e) {
                                            Toast.makeText(mainView.getContext(), "Please install skype app", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                });
                            }

                            if (socialModel.getViberLink() != null) {
                                profilePopUp.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Uri uri = Uri.parse("tel:" + Uri.encode(socialModel.getViberLink()));
                                        Intent intent = new Intent("android.intent.action.VIEW");
                                        intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                                        intent.setData(uri);
                                        startActivity(intent);
                                    }
                                });
                            }

                            if (socialModel.getWhatsappLink() != null) {
                                profilePopUp.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        PackageManager pm = getActivity().getPackageManager();
                                        try {
                                            PackageInfo info = pm.getPackageInfo("com.whatsapp", PackageManager.GET_META_DATA);
                                            Intent waIntent = new Intent(Intent.ACTION_SEND);
                                            waIntent.setType("text/plain");
                                            waIntent.setPackage("com.whatsapp");
                                            waIntent.putExtra(Intent.EXTRA_TEXT, "YOUR TEXT");
                                            startActivity(waIntent);
                                        } catch (PackageManager.NameNotFoundException e) {
                                            Toast.makeText(mainView.getContext(), "Please install whatsapp app", Toast.LENGTH_SHORT)
                                                    .show();
                                        }
                                        ;
                                    }
                                });
                            }

                        }

                        //===============================================


                        LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);
                        if (containerHashTags.getChildCount() > 0)
                            containerHashTags.removeAllViews();
                        for (HashTag hashTag : contact.getListOfHashtags()) {
                            TextView text = new TextView(getActivity());
                            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                            text.setLayoutParams(new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                            text.setTextColor(getResources().getColor(R.color.colorPrimary));
                            text.setText(hashTag.getHashTagValue() + " ");
                            text.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    System.out.println("HASH 55");


                                    contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                                    HASHTAG_ADAPTER.setMainHashTag(hashTag.getHashTagValue());

                                    if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                                        listForSelect = new ArrayList<>();
                                        listForSelect.addAll(contactAdapter.getListOfContacts());
                                    }

                                }
                            });

                            text.setOnLongClickListener(new View.OnLongClickListener() {
                                @Override
                                public boolean onLongClick(View view) {
                                    deleteHashTagsFromUser(hashTag.getHashTagValue(), contact);
                                    return false;
                                }
                            });


                            //     text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                            containerHashTags.addView(text);
                        }

                        if (contact.getListOfHashtags().size() == 0) {
                            TextView text = new TextView(getActivity());
                            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                            text.setLayoutParams(new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                            text.setTextColor(getResources().getColor(R.color.gray));
                            text.setText("hashtags");
                            text.setOnClickListener(v -> {
                                containerHashTags.removeAllViews();
                                showPopupUserHashtags(contact);
                            });
                            containerHashTags.addView(text);
                        }

                        HorizontalScrollView scrollView = (HorizontalScrollView) profilePopUp.findViewById(R.id.scrollHorizontal);
                        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                        scrollView.addView(containerHashTags);
                        scrollView.setSmoothScrollingEnabled(false);
                        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                        scrollView.setSmoothScrollingEnabled(true);


                        profilePopUp.findViewById(R.id.arrowShowHashtags).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (socialPopup != null) {
                                    if (socialPopup.getVisibility() == View.VISIBLE)
                                        return;
                                    showPopupUserHashtags(contact);
                                } else
                                    showPopupUserHashtags(contact);
                            }
                        });

                        initIconColor(contact, profilePopUp);

                        if (finalShowUpdate) {

                        }
                    }
                });
*/


                if (getActivity() != null)
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (finalShowUpdate) {
                           /* profilePopUp.findViewById(R.id.updateTextView).setVisibility(View.VISIBLE);
                            EventBus.getDefault().post(new UpdateFile());*/


                                AlertDialog alertDialog = new AlertDialog.Builder(getActivity()).create();

                                alertDialog.setTitle("Updating");

                                alertDialog.setMessage("Some of data was updated via address book. Do u want to make changes inside app also?");

                                alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new DialogInterface.OnClickListener() {

                                    public void onClick(DialogInterface dialog, int id) {
                                        updateContactAfterCheckSynk(contact);
                                        //...

                                    }
                                });

                                alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Create New", new DialogInterface.OnClickListener() {

                                    public void onClick(DialogInterface dialog, int id) {

                                        if (profilePopUp != null)
                                            profilePopUp.setVisibility(View.GONE);

                                        alertDialog.hide();
                                        ContactsFragment.createContact = true;
                                        ArrayList<Contact> contactExtract = new ArrayList<>();
                                                        /*contact.setId(-1);
                                                        contact.setIdContact(null);*/

                                        if (contact.getListOfContactInfo() != null && !contact.getListOfContactInfo().isEmpty()) {
                                            for (ContactInfo i : contact.getListOfContactInfo()) {
                                                i.generateNewId();
                                            }
                                        }
                                        contactExtract.add(contact);
                                        //Contact contact1 = new Contact();
                                        //contact1.setName("");
                                        //contactExtract.add(contact1);
                                        //contactExtract.add(contact1);
                                        android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                                        android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                                        fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();
                                        //...

                                    }
                                });

                                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "No", new DialogInterface.OnClickListener() {

                                    public void onClick(DialogInterface dialog, int id) {
                                        alertDialog.hide();
                                        //...

                                    }
                                });

                                alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
                                    @Override
                                    public void onShow(DialogInterface dialog) {
                                        Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                                        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                                                LinearLayout.LayoutParams.WRAP_CONTENT,
                                                LinearLayout.LayoutParams.WRAP_CONTENT
                                        );
                                        params.setMargins(0, 0, 50, 0);
                                        negButton.setLayoutParams(params);
                                    }
                                });

                           /* if (stopThread) {
                                System.out.println("CHECK STOP SUCCESS BOOLEAN");
                                return;
                            }*/

                                //alertDialog.show();
                                openDialodUpdate(listUpdatingData, contact);


                            }
                        }
                    });

               /* try {
                    Thread.sleep(2500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }*/

                /*getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (finalShowUpdate) {
                            profilePopUp.findViewById(R.id.updateTextView).setVisibility(View.GONE);
                        }
                    }
                });*/


            }
        }).start();


        for (ContactInfo contactInfo : contact.listOfContactInfo) {
            if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                "mailto", contactInfo.value, null));
                        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                        emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                        startActivity(Intent.createChooser(emailIntent, "Send email"));
                    }
                });
            }
        }

        if (contact.webSite.length() > 0) {

            ((ImageView) profilePopUp.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web_blue);
            profilePopUp.findViewById(R.id.webImg).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse("http://" + contact.webSite));
                        startActivity(i);
                    } catch (Exception e) {
                        Toast.makeText(mainView.getContext(), " Incorrect web site", Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }

        profilePopUp.findViewById(R.id.user_call_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (contact.listOfContactInfo != null) {
                    for (ContactInfo cf : contact.listOfContactInfo) {
                        if (ClipboardType.isPhone(cf.value) && !cf.value.equals("+000000000000")) {
                            new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + cf.value));
                            break;
                        }
                    }
                }

            }
        });

        //profilePopUp.findViewById(R.id.user_call_block).setOnClickListener(v -> startActivity());

        profilePopUp.findViewById(R.id.user_share_block).setOnClickListener(v -> {

            String exportData = "";
            //contact.fillData(getContext(), contactsService);
            if (contact.getName() != null) exportData += "Name: " + contact.getName() + "\n";
            if (contact.getCompany() != null)
                exportData += "Company: " + contact.getCompany() + "\n";
            if (contact.getCompanyPossition() != null)
                exportData += "Position: " + contact.getCompanyPossition() + "\n";
            if (contact.listOfContactInfo != null) {
                for (ContactInfo contactInfo : contact.listOfContactInfo) {
                    if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                        exportData += "Phone: " + contactInfo.toString() + "\n";
                    if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                    if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                        exportData += "Facebook: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                        exportData += "Vk: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                        exportData += "Instagram: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                        exportData += "Linkedin: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                        exportData += "Twitter: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                        exportData += "Youtube: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                        exportData += "Google_sheet: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                        exportData += "Google_doc: " + contactInfo + "\n";
                        continue;
                    }

                    if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                        exportData += "Tumblr: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                        exportData += "Angel: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isMedium(contactInfo.value)) {
                        exportData += "Medium: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isGitHub(contactInfo.value)) {
                        exportData += "Github: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                        exportData += "Web: " + contactInfo + "\n";
                }
            }
            if (contact.getSocialModel() != null) {
                if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                    exportData += "Facebook: " + getPhoneNumberInfo(contact.getSocialModel().getFacebookLink()) + "\n";
                if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())
                    exportData += "Vk: " + getPhoneNumberInfo(contact.getSocialModel().getVkLink()) + "\n";
                if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                    exportData += "Linkedin: " + getPhoneNumberInfo(contact.getSocialModel().getLinkedInLink()) + "\n";
                if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                    exportData += "Instagram: " + getPhoneNumberInfo(contact.getSocialModel().getInstagramLink()) + "\n";
                if (contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())
                    exportData += "Twitter: " + getPhoneNumberInfo(contact.getSocialModel().getTwitterLink()) + "\n";
                if (contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())
                    exportData += "Youtube: " + getPhoneNumberInfo(contact.getSocialModel().getYoutubeLink()) + "\n";

                if (contact.getSocialModel().getMediumLink() != null && !contact.getSocialModel().getMediumLink().isEmpty())
                    exportData += "Medium: " + getPhoneNumberInfo(contact.getSocialModel().getMediumLink()) + "\n";

                /*if(contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty())
                    exportData += "Whatsapp: " + getPhoneNumberInfo(contact.getSocialModel().getWhatsappLink()) + "\n";
                if(contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty())
                    exportData += "Viber: " + getPhoneNumberInfo(contact.getSocialModel().getViberLink()) + "\n";
                if(contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty())
                    exportData += "Telegram: " + getPhoneNumberInfo(contact.getSocialModel().getTelegramLink()) + "\n";
                if(contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty())
                    exportData += "Skype: " + getPhoneNumberInfo(contact.getSocialModel().getSkypeLink()) + "\n";*/
            }

            if (contact.getListOfHashtags() != null && !contact.getListOfHashtags().isEmpty()) {
                exportData += "Tags:";
                for (HashTag hashTag : contact.getListOfHashtags()) {
                    if (hashTag != null && hashTag.getHashTagValue() != null) {
                        exportData += " " + hashTag.getHashTagValue();
                    }
                }
                exportData += "\n";
            }

            exportData += "\n";
            exportData += "Data shared via http://Extime.pro\n";

            Intent shareIntent = new Intent(Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            shareIntent.putExtra(Intent.EXTRA_TEXT, exportData);
            startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
        });

        profilePopUp.findViewById(R.id.user_edit_block).setOnClickListener(v -> {
            System.out.println("EDIT 1");
            showFastEditPopup(selectedContactPopup);
        });


        profilePopUp.findViewById(R.id.user_remind_block).setOnClickListener(v -> {
            // System.out.println("CLICK CONT 1111sadfjhasdioufhsadpohfpsduhfpsdauhfpsduhfsdhfsuad");
            //  closeOtherPopup();
            profilePopUp.setVisibility(View.GONE);
            showRemindPopup(selectedContactPopup);
        });


        profilePopUp.findViewById(R.id.user_profile_block).setOnClickListener(v -> {
            System.out.println("CLICK CONT 1111");
            //ContactAdapter.contactAd = contactAdapter;

            if (ContactAdapter.checkMerge) {
                System.out.println("QQQ WWW");
                ContactAdapter.checkFoActionIconProfile = true;
                ContactAdapter.checkMerge = false;
            }

            if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0) {
                System.out.println("ADD HISTORY 2");
                EventBus.getDefault().post(new AddHistoryEntry(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
            }


            android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
            android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            //  System.out.println("CLICK CONT 1111 contact = "+contact);
            fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(contact, false)).addToBackStack("contacts").commit();

            closeOtherPopup();
            profilePopUp.setVisibility(View.INVISIBLE);


        });
//////////////////////////================================================================================================================================================TOUCH
        profilePopUp.findViewById(R.id.user_profile_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.textPreviewProfile));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        profilePopUp.findViewById(R.id.user_edit_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.textEditPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.editImagePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_edit_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_call_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TExtCallPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.CallImagePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_call_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_remind_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TextRemindPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.ImageRemindPreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_remind_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_share_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TextSharePreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.ImageSharePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_share_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        //================================COMPANY


        ///////////////////////////===================================================================================================================================ENDTOUCH

//        ((TextView) profilePopUp.findViewById(R.id.time)).setText(/*getUpdTime*/(contact.time));







       /* if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackgroundColor(Color.TRANSPARENT);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));

            try {
                Bitmap bitmap = BitmapFactory.decodeFile(contact.getPhotoURL());
                //System.out.println("BITMAP = " + bitmap);
                if(bitmap == null){
                 //   holder.contactImage.setVisibility(View.VISIBLE);
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                 //   GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(context, R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                  //  holder.contactImage.setBackground(circle);
                    profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);

                  //  holder.contactImage.setImageDrawable(null);
                    ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);
                    String initials = "";

                    String names[] = contact.getName().split("\\s+");

                    for (String namePart : names)
                        initials += namePart.charAt(0);

                   // String initials = getInitials(contact);
               //     holder.initials.setVisibility(View.VISIBLE);
               //     holder.initials.setText(initials);
                    //  System.out.println("INITIALS = "+initials);

                    profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                    ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);


                    if(contact.listOfContacts != null && !contact.listOfContacts.isEmpty()) {
                    //    holder.contactImage.setVisibility(View.GONE);
                    //    holder.companyImage.setVisibility(View.VISIBLE);
                    //    holder.companyImage.setBackgroundColor(contact.color);
                    }
                }
            }catch (Exception e){

            }

        }*/


    }

    public void openDialodUpdate(ArrayList<DataUpdate> list, Contact contact) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        View view = getLayoutInflater().inflate(R.layout.doalog_update, null);
        //list = new ArrayList<>();
        final float scale = getResources().getDisplayMetrics().density;
       /* listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());*/
        builder.setView(view);
        AlertDialog alertDialog = builder.create();

        RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.recycleUpdate);
        TextView countValues = view.findViewById(R.id.textCount);
        countValues.setText(list.size() + " new fields added");
        ViewGroup.LayoutParams params = recyclerView.getLayoutParams();
        countValues.setVisibility(View.VISIBLE);
        if (list.size() == 0) {
            params.height = 0;
            countValues.setVisibility(View.GONE);
        } else if (list.size() == 1) {
            params.height = (int) ((int) 55 * scale);
        } else if (list.size() == 2) {
            params.height = (int) ((int) 110 * scale);
        } else {
            params.height = (int) ((int) 165 * scale);
        }
        recyclerView.setLayoutParams(params);

        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));

        DialogAdapter dialogAdapter = new DialogAdapter(list, getContext());
        recyclerView.setAdapter(dialogAdapter);

        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {
                updateContactAfterCheckSynk(contact);
                //...

            }
        });

        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Create New", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {

                if (profilePopUp != null)
                    profilePopUp.setVisibility(View.GONE);

                alertDialog.hide();
                ContactsFragment.createContact = true;
                ArrayList<Contact> contactExtract = new ArrayList<>();
                contact.setId(-1);
                contact.setIdContact(null);
                if (contact.getListOfContactInfo() != null && !contact.getListOfContactInfo().isEmpty()) {
                    for (ContactInfo i : contact.getListOfContactInfo()) {
                        i.generateNewId();
                    }
                }
                contactExtract.add(contact);
                //Contact contact1 = new Contact();
                //contact1.setName("");
                //contactExtract.add(contact1);
                //contactExtract.add(contact1);
                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();
                //...

            }
        });

        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "No", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {
               /* alertDialog.hide();
                //...*/

            }
        });

        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 50, 0);
                negButton.setLayoutParams(params);
            }
        });

        alertDialog.show();

    }


    public void updateContactAfterCheckSynk(Contact c) {
        long id = c.getId();

       /* Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
        if (true) {
*/

        new Thread(new Runnable() {
            @Override
            public void run() {


                Realm realm = Realm.getDefaultInstance(); //-

                Contact contact = ContactCacheService.getContactByIdSynk(id, realm);

                Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
                if (c == null || c.getCount() == 0) {
                    /*String idN = contactsService.getIdContactByName(contact.getName());
                    if (idN == null) {
                        return;
                    } else {
                        realm.beginTransaction();
                        contact.setIdContact(idN);
                        realm.commitTransaction();
                    }*/
                    return;
                }


                Cursor organizationCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ORGANIZATION, contact.getIdContact());

                Realm realm2 = Realm.getDefaultInstance();

                ArrayList<Contact> listOFCompanies = ContactCacheService.getCompaniesRealm(realm2);

                boolean showUpdate = false;

                String companyOfContact = null;
                if (contact.getCompany() != null)
                    companyOfContact = contact.getCompany();

                String positionContact = null;

                if (contact.getCompanyPossition() != null)
                    positionContact = contact.getCompanyPossition();

                realm.beginTransaction();
                contact.setCompanyPossition(null);
                realm.commitTransaction();

                int nameHash = contact.getName().hashCode();

                boolean found = false;

                while (organizationCursor != null && organizationCursor.moveToNext()) {
                    String orgName = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA));
                    String companyPossition = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.TITLE));

                    //System.out.println("COMPANY3 = " + orgName + ", name = " + getName() + ", id = " + getId());

                    realm.beginTransaction();
                    contact.setCompanyPossition(companyPossition);

                    realm.commitTransaction();

                    if (orgName != null && !orgName.isEmpty()) {

                        //System.out.println("COMPANY2 = " + orgName + ", name = " + getName() + ", id = " + getId());

                        String oldCompany = null;
                        if (contact.getCompany() != null && !contact.getCompany().isEmpty() && !contact.getCompany().trim().equalsIgnoreCase(orgName.trim()))
                            oldCompany = contact.getCompany();

                        realm.beginTransaction();
                        contact.setCompany(orgName.trim());
                        realm.commitTransaction();

                        for (Contact searchCompanyContact : listOFCompanies) {
                            if (searchCompanyContact.isValid() && searchCompanyContact.getName().equalsIgnoreCase(orgName.trim())) {
                                if (oldCompany != null) {
                                    for (Contact comp : listOFCompanies) {
                                        if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {
                                            if (comp.listOfContacts.size() == 1) {
                                                EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                            }
                                            ContactCacheService.removeContactFromCompany(comp, contact);
                                            break;
                                        }
                                    }
                                }

                                if (!searchCompanyContact.listOfContacts.contains(contact)) {
                                    if (searchCompanyContact.getName().equals("1337")) {
                                        //System.out.println("name = " + getName());
                                    }
                                    //System.out.println("COM{A, name = " + getName() + ", com = " + searchCompanyContact.getName());
                                    realm.beginTransaction();
                                    searchCompanyContact.listOfContacts.add(contact);
                                    realm.commitTransaction();
                                }
                                found = true;
                            }
                        }

                        if (!found) {
                            Date date1 = contact.getDateCreate();
                            Calendar cal1 = Calendar.getInstance();
                            cal1.setTime(date1);
                            Time time1 = contactsService.getRandomDate();
                            time1.setHours(cal1.get(Calendar.HOUR_OF_DAY));
                            time1.setMinutes(cal1.get(Calendar.MINUTE));
                            time1.setSeconds(cal1.get(Calendar.SECOND));
                            Contact companyContact = new Contact(0, orgName.trim(), null, false, true, true, time1.toString(), null, date1);
                            companyContact.time = contact.time.toString();
                            companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                            if (oldCompany != null) {
                                for (Contact comp : listOFCompanies) {
                                    if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {

                                        if (comp.listOfContacts.size() == 1) {
                                            /*ContactAdapter cont = ContactAdapter.contactAd;
                                            cont.removeContactById(comp);*/
                                           /* getActivity().runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    contactAdapter.removeContactById(comp);
                                                    contactAdapter.notifyDataSetChanged();
                                                }
                                            });*/
                                            //ContactsFragment.UPD_ALL = true;
                                            EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                        }
                                        ContactCacheService.removeContactFromCompany(comp, contact);
                                        break;
                                    }
                                }
                            }
                            companyContact.listOfContacts.add(contact);
                            ContactCacheService.updateCompany(companyContact);
                            listOFCompanies.add(ContactCacheService.getCompany(companyContact.getName()));
                            //ContactAdapter cont = ContactAdapter.contactAd;
                            //cont.addContact(companyContact);
                            //if(typeEnum.equals(FillDataEnums.PROFILE) || typeEnum.equals(FillDataEnums.PREVIEW)) {
                            EventBus.getDefault().post(new AddContact(companyContact.getId()));
                            ContactsFragment.UPD_ALL = true;
                           /* }else if(typeEnum.equals(FillDataEnums.NEW)){
                                companyNewReturn = companyContact;
                            }*/
                        }
                    }
                }
                boolean checkNull = false;
                if (organizationCursor != null && organizationCursor.getCount() > 0) {
                    organizationCursor.moveToFirst();
                    do {
                        if (organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)) != null && !organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)).equals("")) {
                            checkNull = true;
                            break;
                        }
                    } while (organizationCursor.moveToNext());

                }

                if (!checkNull) {
                    if (contact.getCompany() != null) {

                        for (Contact comp : listOFCompanies) {
                            if (comp.isValid() && comp.getName().equalsIgnoreCase(contact.getCompany())) {

                                if (comp.listOfContacts.size() == 1) {
                                    //ContactAdapter cont = ContactAdapter.contactAd;
                                    /*getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            contactAdapter.removeContactById(comp);
                                            contactAdapter.notifyDataSetChanged();
                                        }
                                    });*/
                                    EventBus.getDefault().post(new RemoveContact(comp.getId()));


                                    //cont.notifyDataSetChanged();
                                    //ContactsFragment.UPD_ALL = true;
                                }

                                ContactCacheService.removeContactFromCompany(comp, contact);
                                realm.beginTransaction();
                                contact.setCompany(null);
                                realm.commitTransaction();
                                break;
                            }
                        }
                    }
                }

                realm2.close();

                if ((companyOfContact == null && contact.getCompany() != null) || (companyOfContact != null && contact.getCompany() == null) || (companyOfContact != null && contact.getCompany() != null && !companyOfContact.equals(contact.getCompany()))) {
                    showUpdate = true;
                    if (contact.getCompany() != null) {
                        String nameC = contact.getCompany();
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setText(nameC);


                                profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                                            System.out.println("CCCCCCC 111111111111111");
                                            //Contact compa = ContactCacheService.getCompany(nameC);
                                            for (Contact searchCompany : ContactCacheService.getCompanies()) {
                                                if (searchCompany.getName().equalsIgnoreCase(nameC)) {

                                                    //contactAdapter.setSelectContactID(searchCompany.getName());
                                                    showCompanyPopup(searchCompany);
                                                }
                                            }
                                        }
                                );

                                profilePopUp.findViewById(R.id.company_title).setOnLongClickListener(new View.OnLongClickListener() {
                                    @Override
                                    public boolean onLongClick(View v) {
                                        contactAdapter.searchByCompany(nameC);
                                        return true;
                                    }
                                });

                            }
                        });

                    } else {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setText("");

                                ((TextView) profilePopUp.findViewById(R.id.company_title)).setHint("Company");

                                profilePopUp.findViewById(R.id.company_title).setOnClickListener(v -> {
                                            System.out.println("CCCCCCCCCCCC 222222222222");
                                            if (((TextView) profilePopUp.findViewById(R.id.company_title)).getText() == "")
                                                showCompanyAddPopup(ContactCacheService.getContactById(id), null, false);
                                        }
                                );
                            }
                        });
                    }
                }

                if ((positionContact == null && contact.getCompanyPossition() != null) || (positionContact != null && contact.getCompanyPossition() == null) || (positionContact != null && contact.getCompanyPossition() != null && !positionContact.equals(contact.getCompanyPossition()))) {
                    //contact.setCompanyPossition(positionContact);
                    showUpdate = true;
                    if (contact.getCompanyPossition() != null) {
                        String pos = contact.getCompanyPossition();
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {


                                profilePopUp.findViewById(R.id.company).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.company)).setText(pos);
                                getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        //contactAdapter.findByPossition(selectedPossition);
                                    }
                                });
                                profilePopUp.findViewById(R.id.company).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        System.out.println(" CLICK CCC");


                                        getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v1 -> {
                                            //contactAdapter.defaultListContacts();


                                            getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
                                            ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText("");
                                            getActivity().findViewById(R.id.text_reset_btn).setVisibility(View.GONE);

                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
                                            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);


                                            initRecyclerHashTags();

                                            System.out.println("Close position select");
                                            contactAdapter.defaultListContacts();
                                            contactAdapter.stopNEWSelection();

                                            //contactAdapter.setListOfContacts(listForSelect);
                                            listForSelect = new ArrayList<>();
                                        });
                                        stopSelectionMode();

                                        int countContacts = contactAdapter.findByPossition(pos);

                                        if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                                            listForSelect = new ArrayList<>();
                                            listForSelect.addAll(contactAdapter.getListOfContacts());
                                            System.out.println("listFor select = " + listForSelect.size());
                                        }


                                        closeOtherPopup();
                                        getActivity().findViewById(R.id.contactsText).setVisibility(View.GONE);


                                        SpannableStringBuilder str = new SpannableStringBuilder(pos);
                                        str.setSpan(new StyleSpan(Typeface.BOLD), 0, pos.length() - 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

                                        ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).setText(countContacts + " Contacts selected by position " + str);
                                        selectedPossition = ContactCacheService.getContactById(id).getCompanyPossition();


                                        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
                                        getActivity().findViewById(R.id.typeHash).setVisibility(View.GONE);
                                    }
                                });


                            }
                        });
                    } else {


                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) profilePopUp.findViewById(R.id.company)).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.company)).setText("");
                                ((TextView) profilePopUp.findViewById(R.id.company)).setHint("Position");
                                profilePopUp.findViewById(R.id.company).setOnClickListener(v -> {
                                            showPositionAddPopup(ContactCacheService.getContactById(id), null, false);
                                        }
                                );
                            }
                        });


                    }
                }


                String contactName = ContactsService.getDisplayName(getContext(), contact.getIdContact());
                if (contactName == null || contactName.equals("")) {

                } else if (!contact.getName().equals(contactName)) {
                    realm.beginTransaction();
                    contact.setName(contactName);
                    realm.commitTransaction();
                    showUpdate = true;

                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            ((TextView) profilePopUp.findViewById(R.id.name)).setText(contactName);
                        }
                    });
                }


                //phones


                ArrayList<String> listPhones = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                        listPhones.add(contact.getListOfContactInfo().get(i).value);
                    }
                }


                ArrayList<String> phone = contactsService.getContactPhones(contact.getIdContact());
                //System.out.println("ID FILL = "+idContact);
                realm.beginTransaction();
                if (phone != null && phone.size() > 0) {
                    for (int i = 0; i < phone.size(); i++) {

                        String phonee = phone.get(i).trim();
                        phonee = phonee.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");

                        boolean phoneFind = false;
                        for (int j = 0; j < listPhones.size(); j++) {
                            String phone1 = listPhones.get(j);
                            phone1 = phone1.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                            if (phone1.equals(phonee)) {
                                phoneFind = true;
                                //listPhones.remove(j);
                                break;
                            }
                        }

                        if (!phoneFind) {
                            showUpdate = true;
                            contact.addPhone(phone.get(i));
                        }
                    }
                } else if (listPhones.isEmpty()) {
                    contact.addPhone("+000000000000");
                    contactsService.addPhoneToContact(contact.getIdContact(), "+000000000000", contact.getName());
                    //setName(contactName.trim());
                }

                if (listPhones != null && listPhones.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listPhones) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;
                                break;
                            }
                        }
                    }
                }


                realm.commitTransaction();


                //email
                realm.beginTransaction();
                ArrayList<String> listEmail = new ArrayList<>();
                if (contact.getListOfContactInfo() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("email")) {
                            listEmail.add(contact.getListOfContactInfo().get(i).value);
                        }
                    }
                }

                ArrayList<String> addr = contactsService.getContactEmails(contact.getIdContact());
                for (String str : addr) {
                    boolean emailfind = false;
                    for (int i = 0; i < listEmail.size(); i++) {
                        if (str.equalsIgnoreCase(listEmail.get(i))) {
                            emailfind = true;
                            listEmail.remove(i);
                            break;
                        }
                    }
                    if (!emailfind) {
                        showUpdate = true;
                        contact.addEmail(str);
                    }
                }

                if (listEmail != null && listEmail.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listEmail) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }

                realm.commitTransaction();
                //


                //address


                realm.beginTransaction();


                ArrayList<String> listAddress = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("address")) {
                        listAddress.add(contact.getListOfContactInfo().get(i).value);
                    }
                }

                Cursor adressCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_ADRESS, contact.getIdContact());
                while (adressCursor != null && adressCursor.moveToNext()) {
                    String adress = adressCursor.getString(adressCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                    boolean findAddress = false;
                    for (String str : listAddress) {
                        if (str.equalsIgnoreCase(adress)) {
                            findAddress = true;
                            listAddress.remove(str);
                            break;
                        }
                    }
                    if (!findAddress) {
                        showUpdate = true;
                        contact.addAddress(adress);
                    }

                }

                if (listAddress != null && listAddress.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listAddress) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }

                realm.commitTransaction();


                //hash
                ArrayList<String> listOfHash = new ArrayList<>();
                RealmList<HashTag> hashList = new RealmList<>();

                ArrayList<HashTag> listHashOfContacts = new ArrayList<>();
                if (contact.getListOfHashtags() != null)
                    listHashOfContacts.addAll(contact.getListOfHashtags());

                Cursor noteCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                realm.beginTransaction();
                SocialModel socialModel = realm.createObject(SocialModel.class);
                realm.commitTransaction();
                boolean hasFacebook = false;
                boolean hasInst = false;
                boolean hasLinked = false;
                boolean hasVk = false;
                boolean hasSkype = false;
                boolean hasTelegram = contact.hasTelegram;
                boolean hasViber = contact.hasViber;
                boolean hasWhatsapp = contact.hasWhatsapp;
                boolean hasYoutube = false;
                boolean hasTwitter = false;
                boolean hasMedium = false;
                realm.beginTransaction();
                if (noteCursor != null && noteCursor.getCount() > 0) {
                    while (noteCursor.moveToNext()) {
                        String note = noteCursor.getString(noteCursor.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        if (note != null && note.length() > 0) {
                            if (note.charAt(0) == '#') {
                                if (!listOfHash.contains(note.toLowerCase().trim())) {
                                    HashTag hashtag = realm.createObject(HashTag.class);
                                    hashtag.setDate(new Date());
                                    hashtag.setHashTagValue(note.toLowerCase().trim());
                                    hashList.add(hashtag);
                                    listOfHash.add(note.toLowerCase().trim());
                                }


                            } else if (/*(note.length() > 26 && note.toString().substring(0, 26).equalsIgnoreCase("https://www.instagram.com/")) || (note.length() > 18 && note.toString().substring(0, 18).equalsIgnoreCase("www.instagram.com/") ||
                                    (note.length() > 14 && note.toString().substring(0, 14).equalsIgnoreCase("instagram.com/")) || (note.length() > 22 && note.toString().substring(0, 22).equalsIgnoreCase("https://instagram.com/")))*/ ClipboardType.isInsta(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                String username = note;
                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);


                                    contactsService.updateNote(contact.getIdContact(), note, username);
                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                    contactsService.updateNote(contact.getIdContact(), note, username);
                                }


                                if (socialModel != null) {
                                    if (socialModel.getInstagramLink() == null || socialModel.getInstagramLink().isEmpty()) {
                                        socialModel.setInstagramLink(username);
                                        hasInst = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isVk(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getVkLink() == null || socialModel.getVkLink().isEmpty()) {
                                        socialModel.setVkLink(note);
                                        hasVk = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isFacebook(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getFacebookLink() == null || socialModel.getFacebookLink().isEmpty()) {
                                        socialModel.setFacebookLink(note);
                                        hasFacebook = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isLinkedIn(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getLinkedInLink() == null || socialModel.getLinkedInLink().isEmpty()) {
                                        socialModel.setLinkedInLink(note);
                                        hasLinked = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (note.contains("viber.com") || note.contains("https://www.viber.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasViber = true;

                                socialModel.setViberLink(note);

                            } else if (note.toString().contains("whatsapp.com") || note.toString().contains("https://www.whatsapp.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasWhatsapp = true;

                                socialModel.setWhatsappLink(note);

                            } else if (ClipboardType.isTelegram(note)) {
                                //SocialModel socialModel = contact.getSocialModel();
                                //hasTelegram = true;

                                //socialModel.setTelegramLink(note);

                                if (contact.getListOfContactInfo() == null) {
                                    contact.addNote(note);
                                } else {
                                    boolean checkS = false;
                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                            checkS = true;
                                            break;
                                        }
                                    }
                                    if (!checkS)
                                        contact.addNote(note);

                                }

                            } else if (note.toString().contains("skype.com") || note.toString().contains("https://www.skype.com") || note.contains("Skype: ")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                if (note.contains("Skype: ")) {
                                    hasSkype = true;
                                    String username = note.substring(7, note.length());
                                    socialModel.setSkypeLink(username);
                                } else {
                                    hasSkype = true;
                                    String username = note.substring(note.indexOf(".com") + 5, note.length());
                                    if (username.charAt(username.length() - 1) == '/')
                                        username = username.substring(0, username.length() - 1);

                                    socialModel.setSkypeLink(username);
                                }

                            } else if (ClipboardType.isYoutube(note)) {


                                if (note.contains("user") || note.contains("channel")) {
                                    if (socialModel != null) {
                                        if (socialModel.getYoutubeLink() == null || socialModel.getYoutubeLink().isEmpty()) {
                                            socialModel.setYoutubeLink(note);
                                            hasYoutube = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    } else if (note.contains("?")) {

                                                        int ind = note.indexOf('?');
                                                        if (ind != -1) {

                                                            if (contactInfo.value.equalsIgnoreCase(note.substring(0, ind))) {
                                                                System.out.println("FIND YOUTUBE 2");
                                                                contactsService.updateNote(contact.getIdContact(), note, note.substring(0, ind));
                                                                checkS = true;
                                                                break;
                                                            }


                                                        }


                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }
                            } else if (ClipboardType.isTwitter(note)) {


                                if (socialModel != null) {
                                    if (socialModel.getTwitterLink() == null || socialModel.getTwitterLink().isEmpty()) {
                                        socialModel.setTwitterLink(note);
                                        hasTwitter = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isMedium(note)) {


                                if (note.contains("com/@")) {
                                    if (socialModel != null) {
                                        if (socialModel.getMediumLink() == null || socialModel.getMediumLink().isEmpty()) {
                                            socialModel.setMediumLink(note);
                                            hasMedium = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }

                            } else {
                                boolean checkS = false;
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                        checkS = true;
                                        break;
                                    }
                                }
                                if (!checkS) {
                                    contact.addNote(note);
                                    showUpdate = true;
                                }
                            }
                        }
                    }
                }
                realm.commitTransaction();


                //====================
                realm.beginTransaction();
                Cursor notesC = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                ArrayList<String> listInfoOfContact = new ArrayList<>();
                ArrayList<String> listNotes = new ArrayList<>();


                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    listInfoOfContact.add(contact.getListOfContactInfo().get(i).value);
                }

                if (notesC != null && notesC.getCount() > 0) {
                    while (notesC.moveToNext()) {
                        String note = notesC.getString(notesC.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        listNotes.add(note);
                        for (String str : listInfoOfContact) {
                            if (str.equals(note)) {
                                listInfoOfContact.remove(str);
                                break;
                            }
                        }
                    }
                }


                if (listInfoOfContact != null && listInfoOfContact.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listInfoOfContact) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str) && contact.getListOfContactInfo().get(i).type.equals("note")) {
                                contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                showUpdate = true;
                                i--;
                                break;
                            }
                        }
                    }
                }

                    /*System.out.println("L0");
                    if(socialModel.getFacebookLink() != null){
                        System.out.println("L1");
                        showUpdate = true;
                        if(!listNotes.contains(socialModel.getFacebookLink())){
                            System.out.println("L2");
                            boolean find = false;
                            for(int i = 0;i<contact.getListOfContactInfo().size();i++){
                                if(ClipboardType.isFacebook(contact.getListOfContactInfo().get(i).value)){
                                    System.out.println("L3");
                                    socialModel.setFacebookLink(contact.getListOfContactInfo().get(i).value);
                                    contact.getListOfContactInfo().remove(contact.getListOfContactInfo().get(i));
                                    find = true;
                                    break;
                                }
                            }
                            if(!find){
                                System.out.println("L4");
                                socialModel.setFacebookLink(null);
                                hasFacebook = false;
                            }
                        }
                    }*/


                realm.commitTransaction();

                //=-=-----------------


                realm.beginTransaction();
                if (contact.hasFacebook != hasFacebook) {
                    showUpdate = true;
                    contact.hasFacebook = hasFacebook;
                }
                if (contact.hasVk != hasVk) {
                    showUpdate = true;
                    contact.hasVk = hasVk;
                }
                if (contact.hasInst != hasInst) {
                    showUpdate = true;
                    contact.hasInst = hasInst;
                }
                if (contact.hasLinked != hasLinked) {
                    showUpdate = true;
                    contact.hasLinked = hasLinked;
                }
                if (contact.hasTwitter != hasTwitter) {
                    showUpdate = true;
                    contact.hasTwitter = hasTwitter;
                }

                if (contact.hasYoutube != hasYoutube) {
                    showUpdate = true;
                    contact.hasYoutube = hasYoutube;
                }
                if (contact.hasMedium != hasMedium) {
                    showUpdate = true;
                    contact.hasMedium = hasMedium;
                }
                    /*if (contact.hasSkype != hasSkype) {
                        showUpdate = true;
                        contact.hasSkype = hasSkype;
                    }
                    if (contact.hasTelegram != hasTelegram) {
                        showUpdate = true;
                        contact.hasTelegram = hasTelegram;
                    }
                    if (contact.hasViber != hasViber) {
                        showUpdate = true;
                        contact.hasViber = hasViber;
                    }
                    if (contact.hasWhatsapp != hasWhatsapp) {
                        showUpdate = true;
                        contact.hasWhatsapp = hasWhatsapp;
                    }*/

                if (hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                    socialModel.setTelegramLink(contact.getSocialModel().getTelegramLink());
                } else {
                    if (!hasTelegram) {
                        hasTelegram = false;
                        socialModel.setTelegramLink(null);
                    }
                }

                if (hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                    socialModel.setViberLink(contact.getSocialModel().getViberLink());
                } else {
                    if (!hasViber) {
                        hasViber = false;
                        socialModel.setViberLink(null);
                    }
                }

                if (hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                    socialModel.setWhatsappLink(contact.getSocialModel().getWhatsappLink());
                } else {
                    if (!hasWhatsapp) {
                        hasWhatsapp = false;
                        socialModel.setWhatsappLink(null);
                    }
                }

                /*if (hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                    socialModel.setSkypeLink(contact.getSocialModel().getSkypeLink());
                } else {
                    if (!hasSkype) {
                        hasSkype = false;
                        socialModel.setSkypeLink(null);
                    }
                }*/

                if (contact.getSocialModel() != null && ((contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) || ((contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) && (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) && !contact.getSocialModel().getSkypeLink().equalsIgnoreCase(socialModel.getSkypeLink()))) && socialModel.getSkypeLink() != null) {
                    showUpdate = true;
                }

                contact.setSocialModel(socialModel);
                realm.commitTransaction();


                realm.beginTransaction();
                contact.setListOfHashtags(hashList);
                realm.commitTransaction();

                if (contact.getListOfHashtags().size() != listHashOfContacts.size()) {
                    //
                    showUpdate = true;
                } else {
                    for (HashTag h1 : listHashOfContacts) {
                        boolean check = false;
                        for (HashTag h2 : contact.getListOfHashtags()) {
                            if (h1.getHashTagValue().equalsIgnoreCase(h2.getHashTagValue())) {
                                check = true;
                                break;
                            }
                        }
                        if (!check) {
                            showUpdate = true;
                            break;
                        }
                    }
                }


                String photoURL = ContactsService.getPhotoURI(getContext(), contact.getIdContact());

                if ((photoURL == null && contact.getPhotoURL() != null) || (photoURL != null && contact.getPhotoURL() == null) || (photoURL != null && contact.getPhotoURL() != null && !photoURL.equals(contact.getPhotoURL()))) {
                    showUpdate = true;
                    System.out.println("UPDATE PHOTO");

                    realm.beginTransaction();
                    contact.setPhotoURL(photoURL);
                    realm.commitTransaction();

                    int colotC = contact.color;
                    String nameContact = contact.getName();
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {


                            try {
                                profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
                                profilePopUp.findViewById(R.id.profilePopupAvatar).setBackgroundColor(Color.TRANSPARENT);
                                ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(photoURL));
                                if (((BitmapDrawable) ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                    circle.setColor(colotC);
                                    profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                    ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                    String initials = "";
                                    String names[] = nameContact.split("\\s+");

                                    for (String namePart : names)
                                        initials += namePart.charAt(0);

                                    profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                    ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
                                }
                            } catch (Exception e) {
                                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                circle.setColor(colotC);
                                profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                String initials = "";
                                String names[] = nameContact.split("\\s+");

                                for (String namePart : names)
                                    initials += namePart.charAt(0);

                                profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
                            }


                        }
                    });


                }


                boolean finalShowUpdate = showUpdate;
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Contact contact = ContactCacheService.getContactById(id);

                        if (contact.listOfContactInfo != null) {
                            ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
                            boolean checkMail = false;
                            for (ContactInfo contactInfo : contact.listOfContactInfo) {
                                if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                                    checkMail = true;
                                    ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                                    profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                                    "mailto", contactInfo.value, null));
                                            emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                                            emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                                            startActivity(Intent.createChooser(emailIntent, "Send email"));
                                        }
                                    });
                                }
                            }
                            if (!checkMail) {
                                profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                    }
                                });
                            }
                        }

                        //=============================================== SOCIALS

                        if (contact.getSocialModel() != null) {

                            SocialModel socialModel = contact.getSocialModel();


                            if (socialModel.getFacebookLink() != null) {
                                profilePopUp.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (socialModel.getFacebookLink() != null) {
                                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://facebook.com/" + socialModel.getFacebookLink()));
                                            startActivity(intent);
                                        }
                                    }
                                });
                            }

                            if (socialModel.getVkLink() != null) {
                                profilePopUp.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (socialModel.getVkLink() != null) {
                                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/" + socialModel.getVkLink()));
                                            startActivity(intent);
                                        }
                                    }
                                });
                            }

                            if (socialModel.getLinkedInLink() != null) {
                                profilePopUp.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Intent telegramIntent;
                                        try {
                                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                                            telegramIntent.setData(Uri.parse("http://linkedin.com/in/" + socialModel.getLinkedInLink()));
                                            startActivity(telegramIntent);
                                        } catch (Exception e) {
                                        }
                                    }
                                });
                            }

                            if (socialModel.getInstagramLink() != null) {
                                profilePopUp.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Intent telegramIntent;
                                        try {
                                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                                            telegramIntent.setData(Uri.parse("http://instagram.com/" + socialModel.getInstagramLink()));
                                            startActivity(telegramIntent);
                                        } catch (Exception e) {
                                        }
                                    }
                                });
                            }

                            //   if (socialModel.getTelegramLink() != null) {
                            getActivity().findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    System.out.println("TTTTTTTTTTTGGGGGGGGGGGGGGGG click");
                                    Intent telegramIntent;
                                    try {
                                        telegramIntent = new Intent(Intent.ACTION_VIEW);
                                        telegramIntent.setData(Uri.parse("http://telegram.me/" + socialModel.getTelegramLink()));
                                        startActivity(telegramIntent);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            });
                            //      }

                            if (socialModel.getSkypeLink() != null) {
                                profilePopUp.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        try {
                                            Intent sky = new Intent("android.intent.action.VIEW");
                                            sky.setData(Uri.parse("skype:" + socialModel.getSkypeLink()));
                                            startActivity(sky);
                                        } catch (Exception e) {
                                            Toast.makeText(mainView.getContext(), "Please install skype app", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                });
                            }

                            if (socialModel.getViberLink() != null) {
                                profilePopUp.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Uri uri = Uri.parse("tel:" + Uri.encode(socialModel.getViberLink()));
                                        Intent intent = new Intent("android.intent.action.VIEW");
                                        intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                                        intent.setData(uri);
                                        startActivity(intent);
                                    }
                                });
                            }

                            if (socialModel.getWhatsappLink() != null) {
                                profilePopUp.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        PackageManager pm = getActivity().getPackageManager();
                                        try {
                                            PackageInfo info = pm.getPackageInfo("com.whatsapp", PackageManager.GET_META_DATA);
                                            Intent waIntent = new Intent(Intent.ACTION_SEND);
                                            waIntent.setType("text/plain");
                                            waIntent.setPackage("com.whatsapp");
                                            waIntent.putExtra(Intent.EXTRA_TEXT, "YOUR TEXT");
                                            //startActivity(waIntent);
                                            getActivity().startActivity(Intent.createChooser(waIntent, "Open with..."));
                                        } catch (PackageManager.NameNotFoundException e) {
                                            Toast.makeText(mainView.getContext(), "Please install whatsapp app", Toast.LENGTH_SHORT)
                                                    .show();
                                        }
                                        ;
                                    }
                                });
                            }

                        }

                        //===============================================


                        LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);
                        if (containerHashTags.getChildCount() > 0)
                            containerHashTags.removeAllViews();
                        for (HashTag hashTag : contact.getListOfHashtags()) {
                            TextView text = new TextView(getActivity());
                            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                            text.setLayoutParams(new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                            text.setTextColor(getResources().getColor(R.color.colorPrimary));
                            text.setText(hashTag.getHashTagValue() + " ");
                            text.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    System.out.println("HASH 55");


                                    contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                                    HASHTAG_ADAPTER.setMainHashTag(hashTag.getHashTagValue());

                                    if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                                        listForSelect = new ArrayList<>();
                                        listForSelect.addAll(contactAdapter.getListOfContacts());
                                    }

                                }
                            });

                            text.setOnLongClickListener(new View.OnLongClickListener() {
                                @Override
                                public boolean onLongClick(View view) {
                                    deleteHashTagsFromUser(hashTag.getHashTagValue(), contact);
                                    return false;
                                }
                            });


                            //     text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                            containerHashTags.addView(text);
                        }

                        if (contact.getListOfHashtags().size() == 0) {
                            TextView text = new TextView(getActivity());
                            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                            text.setLayoutParams(new LinearLayout.LayoutParams(
                                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                            text.setTextColor(getResources().getColor(R.color.gray));
                            text.setText("hashtags");
                            text.setOnClickListener(v -> {
                                containerHashTags.removeAllViews();
                                showPopupUserHashtags(contact);
                            });
                            containerHashTags.addView(text);
                        }

                        HorizontalScrollView scrollView = (HorizontalScrollView) profilePopUp.findViewById(R.id.scrollHorizontal);
                        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                        scrollView.addView(containerHashTags);
                        scrollView.setSmoothScrollingEnabled(false);
                        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                        scrollView.setSmoothScrollingEnabled(true);


                        profilePopUp.findViewById(R.id.arrowShowHashtags).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (socialPopup != null) {
                                    if (socialPopup.getVisibility() == View.VISIBLE)
                                        return;
                                    showPopupUserHashtags(contact);
                                } else
                                    showPopupUserHashtags(contact);
                            }
                        });

                        initIconColor(contact, profilePopUp);

                        if (finalShowUpdate) {

                        }
                    }
                });


                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (finalShowUpdate) {
                            profilePopUp.findViewById(R.id.updateTextView).setVisibility(View.VISIBLE);
                            //EventBus.getDefault().post(new UpdateFile());
                        }
                    }
                });

                try {
                    Thread.sleep(2500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (finalShowUpdate) {
                            profilePopUp.findViewById(R.id.updateTextView).setVisibility(View.GONE);
                        }
                    }
                });

                realm.close();

            }
        }).start();
    }


    //===================================================touch methods
    public void OnTouchMethod(TextView textview) {
        System.out.println("DOWN");
        checkClick = false;
        System.out.println("COLOR = " + textview.getTextColors().getDefaultColor());
        int colorFrom;
        String s = getResources().getResourceEntryName(textview.getId());


        if (s.equals("textDeleteSelectMenu") || s.equals("textShareSelect") || s.equals("textBackSelectMenu"))
            colorFrom = getResources().getColor(R.color.colorPrimary);
        else if (s.equals("mergeTxt")) {
            if (contactAdapter.getSelectedContacts().size() >= 2)
                colorFrom = getResources().getColor(R.color.colorPrimary);
            else
                colorFrom = getResources().getColor(R.color.gray);

        } else if (s.equals("editTextSelectMenu")) {
            if (contactAdapter.getSelectedContacts().size() == 1)
                colorFrom = getResources().getColor(R.color.colorPrimary);
            else
                colorFrom = getResources().getColor(R.color.gray);
        } else
            colorFrom = getResources().getColor(R.color.colorPrimaryDark);

        int colorTo = getResources().getColor(R.color.md_deep_orange_300);
        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(700); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textview.setTextColor((int) animator.getAnimatedValue());
                //  imageview.setColorFilter((int) animator.getAnimatedValue());
                textview.setTypeface(null, Typeface.BOLD);
            }
        });
        colorAnimation.start();
    }

    public void OnUpTouchMethod(TextView textview) {
        if (!checkClick) {
            int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
            //   int colorTo = getResources().getColor(R.color.colorPrimaryDark);
            String s = getResources().getResourceEntryName(textview.getId());
            int colorTo;


            if (s.equals("textDeleteSelectMenu") || s.equals("textShareSelect") || s.equals("textBackSelectMenu"))
                colorTo = getResources().getColor(R.color.colorPrimary);
            else if (s.equals("mergeTxt")) {
                if (contactAdapter.getSelectedContacts().size() >= 2)
                    colorTo = getResources().getColor(R.color.colorPrimary);
                else
                    colorTo = getResources().getColor(R.color.gray);

            } else if (s.equals("editTextSelectMenu")) {
                if (contactAdapter.getSelectedContacts().size() == 1)
                    colorTo = getResources().getColor(R.color.colorPrimary);
                else
                    colorTo = getResources().getColor(R.color.gray);
            } else
                colorTo = getResources().getColor(R.color.colorPrimaryDark);


            ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
            colorAnimation.setDuration(1000); // milliseconds
            colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator animator) {
                    textview.setTextColor((int) animator.getAnimatedValue());
                    //  imageview.setColorFilter((int) animator.getAnimatedValue());
                    textview.setTypeface(null, Typeface.NORMAL);
                }

            });
            colorAnimation.start();
        }
    }

    public void OnCalcelTouchMethod(TextView textView) {
        int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
        String s = getResources().getResourceEntryName(textView.getId());
        int colorTo;


        if (s.equals("textDeleteSelectMenu") || s.equals("textShareSelect") || s.equals("textBackSelectMenu"))
            colorTo = getResources().getColor(R.color.colorPrimary);
        else if (s.equals("mergeTxt")) {
            if (contactAdapter.getSelectedContacts().size() >= 2)
                colorTo = getResources().getColor(R.color.colorPrimary);
            else
                colorTo = getResources().getColor(R.color.gray);

        } else if (s.equals("editTextSelectMenu")) {
            if (contactAdapter.getSelectedContacts().size() == 1)
                colorTo = getResources().getColor(R.color.colorPrimary);
            else
                colorTo = getResources().getColor(R.color.gray);
        } else
            colorTo = getResources().getColor(R.color.colorPrimaryDark);


        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(1000); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textView.setTextColor((int) animator.getAnimatedValue());
                //      imageView.setColorFilter((int) animator.getAnimatedValue());
                textView.setTypeface(null, Typeface.NORMAL);
            }

        });
        colorAnimation.start();
    }

    public void OnMoveTouchMethod(TextView textView, MotionEvent motionEvent, FrameLayout frameLayout) {
        int[] location = new int[2];
        frameLayout.getLocationInWindow(location);
        int leftX = 0;
        int rightX = leftX + frameLayout.getWidth();
        int topY = 0;
        int bottomY = topY + frameLayout.getHeight();
        float xCurrent = motionEvent.getX();
        float yCurrent = motionEvent.getY();
        System.out.println(leftX + ", " + rightX + ", " + topY + ", " + bottomY + ",== " + location[0] + ", = " + location[1] + ", ==== " + xCurrent + ", " + yCurrent);
        if (xCurrent > rightX || xCurrent < leftX || yCurrent > bottomY || yCurrent < topY) {
            if (!checkClick) {
                System.out.println("UPKI222222");

                String s = getResources().getResourceEntryName(textView.getId());
                int colorTo2;


                if (s.equals("textDeleteSelectMenu") || s.equals("textShareSelect") || s.equals("textBackSelectMenu"))
                    colorTo2 = getResources().getColor(R.color.colorPrimary);
                else if (s.equals("mergeTxt")) {
                    if (contactAdapter.getSelectedContacts().size() >= 2)
                        colorTo2 = getResources().getColor(R.color.colorPrimary);
                    else
                        colorTo2 = getResources().getColor(R.color.gray);

                } else if (s.equals("editTextSelectMenu")) {
                    if (contactAdapter.getSelectedContacts().size() == 1)
                        colorTo2 = getResources().getColor(R.color.colorPrimary);
                    else
                        colorTo2 = getResources().getColor(R.color.gray);
                } else
                    colorTo2 = getResources().getColor(R.color.colorPrimaryDark);


                int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
                // int colorTo = textView.getTextColors().getDefaultColor();
                //colorTo2 = textView.getTextColors().getDefaultColor();
                //  ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
                //  colorAnimation.setDuration(1000); // milliseconds

                ValueAnimator colorAnimation2 = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo2);
                colorAnimation2.setDuration(1000); // milliseconds

             /*   colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                      //  textView.setTextColor((int) animator.getAnimatedValue());
                       // imageView.setColorFilter((int) animator.getAnimatedValue());
                     //   textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation.start();*/


                colorAnimation2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                        textView.setTextColor((int) animator.getAnimatedValue());
                        //  imageView.setColorFilter((int) animator.getAnimatedValue());
                        textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation2.start();


                checkClick = true;
            }

        }
    }

    //==============================================================
    private String getUpdTime(Time time) {
        String timeStr = time.getHours() + ":";
        if (time.getMinutes() < 10) timeStr += "0";
        timeStr += time.getMinutes();
        return timeStr;
    }

    //public boolean checkClick = true;
    public boolean checkClick_viber = true;
    public boolean checkClick_telegram = true;
    public boolean checkClick_skype = true;

    public boolean checkClick_facebook = true;
    public boolean checkClick_vk = true;
    public boolean checkClick_linked = true;
    public boolean checkClick_inst = true;
    public boolean checkClick_youtube = true;
    public boolean checkClick_twitter = true;
    public boolean checkClick_medium = true;

    View FaceBook = null;
    View TwiTter = null;
    View LinkedIn = null;
    View Instagram = null;
    View YouTube = null;
    View Vkontakte = null;
    View Medium = null;

    public void initIconColor(Contact contact, View view) {

        FaceBook = null;
        TwiTter = null;
        LinkedIn = null;
        Instagram = null;
        YouTube = null;
        Vkontakte = null;
        Medium = null;


        ArrayList<SocEnum> listExist = new ArrayList<>();
        LinearLayout linearLayout = view.findViewById(R.id.lineaSocials);
        linearLayout.removeAllViewsInLayout();

        if (contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty()) {
            listExist.add(SocEnum.FACEBOOK);
            FaceBook = getLayoutInflater().inflate(R.layout.social_facebook, null);

            Drawable color = new ColorDrawable(Color.parseColor("#475993"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) FaceBook.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

            linearLayout.addView(FaceBook);

        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())) {
            listExist.add(SocEnum.TWITTER);
            TwiTter = getLayoutInflater().inflate(R.layout.social_twitter, null);

            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) TwiTter.findViewById(R.id.twitter_icon)).setImageDrawable(ld);

            linearLayout.addView(TwiTter);
        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())) {
            listExist.add(SocEnum.LINKEDIN);
            LinkedIn = getLayoutInflater().inflate(R.layout.social_linked, null);

            Drawable color = new ColorDrawable(Color.parseColor("#0077B7"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) LinkedIn.findViewById(R.id.link_icon)).setImageDrawable(ld);

            linearLayout.addView(LinkedIn);

        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())) {
            listExist.add(SocEnum.INSTAGRAM);
            Instagram = getLayoutInflater().inflate(R.layout.social_insta, null);

            Drawable color = new ColorDrawable(Color.parseColor("#8a3ab9"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) Instagram.findViewById(R.id.inst_icon)).setImageDrawable(ld);

            linearLayout.addView(Instagram);
        }


        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())) {
            listExist.add(SocEnum.YOUTUBE);
            YouTube = getLayoutInflater().inflate(R.layout.social_youtube, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#ed2524"));
            Drawable imagev = getResources().getDrawable(R.drawable.ic_youtube_white);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) YouTube.findViewById(R.id.youtube_icon)).setImageDrawable(ldv);

            linearLayout.addView(YouTube);
        }

        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())) {
            listExist.add(SocEnum.VK);
            Vkontakte = getLayoutInflater().inflate(R.layout.social_vk, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) Vkontakte.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

            linearLayout.addView(Vkontakte);
        }

        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getMediumLink() != null && !contact.getSocialModel().getMediumLink().isEmpty())) {
            listExist.add(SocEnum.MEDIUM);
            Medium = getLayoutInflater().inflate(R.layout.social_medium, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#000000"));
            Drawable imagev = getResources().getDrawable(R.drawable.medium_white);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) Medium.findViewById(R.id.medium_icon)).setImageDrawable(ldv);

            linearLayout.addView(Medium);
        }


        if (linearLayout.getChildCount() < 4) {
            while (true) {
                if (!listExist.contains(SocEnum.FACEBOOK)) {
                    FaceBook = getLayoutInflater().inflate(R.layout.social_facebook, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getActivity().getResources().getDrawable(R.drawable.icn_social_facebook2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) FaceBook.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

                    linearLayout.addView(FaceBook);
                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.TWITTER)) {
                    TwiTter = getLayoutInflater().inflate(R.layout.social_twitter, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) TwiTter.findViewById(R.id.twitter_icon)).setImageDrawable(ld);

                    linearLayout.addView(TwiTter);
                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.LINKEDIN)) {
                    LinkedIn = getLayoutInflater().inflate(R.layout.social_linked, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) LinkedIn.findViewById(R.id.link_icon)).setImageDrawable(ld);

                    linearLayout.addView(LinkedIn);

                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.INSTAGRAM)) {
                    Instagram = getLayoutInflater().inflate(R.layout.social_insta, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) Instagram.findViewById(R.id.inst_icon)).setImageDrawable(ld);

                    linearLayout.addView(Instagram);
                }
                if (linearLayout.getChildCount() == 4) break;

            }
        }


        if (FaceBook != null) {
            FaceBook.findViewById(R.id.facebook_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM NEW");

                    ImageView cImg = ((ImageView) FaceBook.findViewById(R.id.facebook_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.FACEBOOK) && checkClick_facebook) {
                                checkClick_facebook = false;
                                int colorFrom = Color.parseColor("#475993");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_facebook = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_facebook) {
                                if (listExist.contains(SocEnum.FACEBOOK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#475993");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.FACEBOOK)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#475993");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_facebook) {
                                if (listExist.contains(SocEnum.FACEBOOK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#475993");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, FaceBook);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, FaceBook);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            FaceBook.findViewById(R.id.facebook_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }

                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);
                        return true;
                    }
                    return false;
                }
            });

            FaceBook.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    if (contact.getSocialModel() == null || contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.facebook_social).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        Intent intent;
                        if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }

                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink().replace("fb","facebook")));

                        //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href="+contact.getSocialModel().getFacebookLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                        /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                        startActivity(intent2);*/
                            try {
                                String uris = contact.getSocialModel().getFacebookLink();
                                if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }
                        } else
                            startActivity(intent);
                    }

                }
            });
        }


        if (TwiTter != null) {
            TwiTter.findViewById(R.id.twitter_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) TwiTter.findViewById(R.id.twitter_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.TWITTER) && checkClick_twitter) {
                                checkClick_twitter = false;
                                int colorFrom = Color.parseColor("#2ca7e0");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_twitter = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_twitter) {
                                if (listExist.contains(SocEnum.TWITTER)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#2ca7e0");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.TWITTER)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_twitter) {
                                if (listExist.contains(SocEnum.TWITTER)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#2ca7e0");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_twitter = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, TwiTter);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_twitter = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, TwiTter);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            TwiTter.findViewById(R.id.twitter_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    if (contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.twitter_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getTwitterLink();
                        if (text.contains("twitter.com/")) {
                            text = text.substring(text.indexOf(".com/") + 5);
                        }
                        if (text.length() > 0 && text.charAt(0) == '@') text = text.substring(1);
                        Intent intent = null;
                        try {
                            // get the Twitter app if possible

                            getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        } catch (Exception e) {
                            // no Twitter app, revert to browser
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                        }
                        getActivity().startActivity(intent);
                       /* Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }
                }
            });

            TwiTter.findViewById(R.id.twitter_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                        String name = contact.getName();

                        if (name == null || name.trim().isEmpty()) return false;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));

                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())

                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));

                        } else {
                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                        return true;
                    }
                    return false;
                }
            });

        }

        if (LinkedIn != null) {
            LinkedIn.findViewById(R.id.link_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) LinkedIn.findViewById(R.id.link_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.LINKEDIN) && checkClick_linked) {
                                checkClick_linked = false;
                                int colorFrom = Color.parseColor("#0077B7");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_linked = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_linked) {
                                if (listExist.contains(SocEnum.LINKEDIN)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#0077B7");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.LINKEDIN)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_linked) {
                                if (listExist.contains(SocEnum.LINKEDIN)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#0077B7");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, LinkedIn);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, LinkedIn);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            LinkedIn.findViewById(R.id.link_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //    if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                        return true;
                    }
                    return false;
                }
            });


            LinkedIn.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.linkedLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        } else {
                            try {
                                startActivity(intent);
                            } catch (Exception e) {
                                Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                                startActivity(intent2);
                            }


                        }
                    }


                }
            });
        }

        if (Instagram != null) {
            Instagram.findViewById(R.id.inst_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Instagram.findViewById(R.id.inst_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.INSTAGRAM) && checkClick_inst) {
                                checkClick_inst = false;
                                int colorFrom = Color.parseColor("#8a3ab9");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_inst = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_inst) {
                                if (listExist.contains(SocEnum.INSTAGRAM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#8a3ab9");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.INSTAGRAM)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_inst) {
                                if (listExist.contains(SocEnum.INSTAGRAM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#8a3ab9");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Instagram);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Instagram);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Instagram.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    if (contact.getSocialModel() == null || contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.instagramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        try {
                            String str = contact.getSocialModel().getInstagramLink();
                            if (!str.toLowerCase().contains("instagram")) {
                                str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                            }

                            if (!str.contains("http://") && !str.contains("https://")) {
                                str = "https://" + contact.getSocialModel().getInstagramLink();
                            }

                            Uri uri = Uri.parse(str);
                            Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                            likeIng.setPackage("com.instagram.android");
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*/
                                try {
                                    String uris = contact.getSocialModel().getInstagramLink();
                                    if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e) {

                                }
                            } else
                                startActivity(likeIng);
                        } catch (Exception e) {

                        }
                    }

                }
            });
        }

        if (YouTube != null) {
            YouTube.findViewById(R.id.youtube_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) YouTube.findViewById(R.id.youtube_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.YOUTUBE) && checkClick_youtube) {
                                checkClick_youtube = false;
                                int colorFrom = Color.parseColor("#ed2524");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_youtube = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_youtube) {
                                if (listExist.contains(SocEnum.YOUTUBE)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#ed2524");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.YOUTUBE)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#ed2524");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_youtube) {
                                if (listExist.contains(SocEnum.YOUTUBE)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#ed2524");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_youtube = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, YouTube);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_youtube = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, YouTube);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            YouTube.findViewById(R.id.youtube_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getYoutubeLink() == null || contact.getSocialModel().getYoutubeLink().isEmpty()) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.youtube_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getYoutubeLink();
                        if (text.contains("youtu.be/") || text.contains("watch?v=")) {
                            if (text.contains("youtu.be/"))
                                text = text.substring(text.indexOf("youtu.be/") + 9);
                            else if (text.contains("watch?v="))
                                text = text.substring(text.indexOf("watch?v=") + 8);

                            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + text));

                            Intent webIntent = new Intent(Intent.ACTION_VIEW,
                                    Uri.parse("http://www.youtube.com/watch?v=" + text));

                            try {
                                getContext().startActivity(appIntent);
                            } catch (ActivityNotFoundException ex) {
                                getContext().startActivity(webIntent);
                            }
                        } else if (text.contains("user/") || text.contains("channel/") || text.contains("/c/")) {
                            try {
                                getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(text)));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        /*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }


                }
            });
        }

        if (Vkontakte != null) {
            Vkontakte.findViewById(R.id.vk_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Vkontakte.findViewById(R.id.vk_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.VK) && checkClick_vk) {
                                checkClick_vk = false;
                                int colorFrom = Color.parseColor("#507299");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_vk = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_vk) {
                                if (listExist.contains(SocEnum.VK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#507299");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.VK)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#507299");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_vk) {
                                if (listExist.contains(SocEnum.VK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#507299");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Vkontakte);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Vkontakte);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Vkontakte.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getVkLink() == null || contact.getSocialModel().getVkLink().isEmpty()) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.vk_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                /*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*/
                                try {
                                    String uris = contact.getSocialModel().getVkLink();
                                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e2) {

                                }
                            } else
                                startActivity(intent2);
                        }
                    }


                }
            });
        }


        if (Medium != null) {
            Medium.findViewById(R.id.medium_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Medium.findViewById(R.id.medium_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.MEDIUM) && checkClick_medium) {
                                checkClick_medium = false;
                                int colorFrom = Color.parseColor("#000000");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_medium = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_medium) {
                                if (listExist.contains(SocEnum.MEDIUM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#000000");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.MEDIUM)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#000000");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_medium) {
                                if (listExist.contains(SocEnum.MEDIUM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#000000");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_medium = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Medium);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_medium = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Medium);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Medium.findViewById(R.id.medium_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getMediumLink() == null || contact.getSocialModel().getMediumLink().isEmpty()) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.medium_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        try {

                            String uri = contact.getSocialModel().getMediumLink();
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));
                            startActivity(i);
                        } catch (Exception e) {

                        }
                    }


                }
            });
        }


        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {

            if (contact.hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                Drawable color = new ColorDrawable(Color.parseColor("#75B73B"));
                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
            } else {
                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
            }

            view.findViewById(R.id.whatsapp_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    CircleImageView cImg = ((CircleImageView) view.findViewById(R.id.whatsapp_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            checkClick = false;
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#75B73B");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            }
                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick) {
                                if (contact.hasWhatsapp) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#75B73B");
                                    Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#75B73B");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick) {
                                if (contact.hasWhatsapp) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#75B73B");
                                    Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                    checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                    checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            view.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (!contact.hasWhatsapp || contact.getSocialModel() == null || contact.getSocialModel().getWhatsappLink() == null || contact.getSocialModel().getWhatsappLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.whatsapp_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        System.out.println("CLICK WHATSAPP !");

                       /* String whatsappNum = contact.getSocialModel().getWhatsappLink();
                        if (*//*whatsappNum.substring(0, 2).equalsIgnoreCase("+8") ||*//* whatsappNum.charAt(0) == '8') {
                            whatsappNum = whatsappNum.replaceFirst("8", "7");
                        }

                        if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                        whatsappNum = whatsappNum.replace(" ", "");

                        Intent sendIntent = new Intent("android.intent.action.MAIN");
                        sendIntent.setComponent(new ComponentName("com.whatsapp","com.whatsapp.Conversation"));
                        sendIntent.putExtra("jid", PhoneNumberUtils.stripSeparators(whatsappNum)+"@s.whatsapp.net");
                        // getApplication().startActivity(sendIntent);

                        startActivity(Intent.createChooser(sendIntent, "")
                                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));*/


                        Intent telegramIntent = new Intent(Intent.ACTION_VIEW);


                        String whatsappNum = contact.getSocialModel().getWhatsappLink();
                        if (whatsappNum.substring(0, 2).equalsIgnoreCase("+8") || whatsappNum.charAt(0) == '8') {
                            whatsappNum = whatsappNum.replaceFirst("8", "7");
                        }

                        if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                        telegramIntent.setData(Uri.parse("whatsapp://send?phone=" + whatsappNum));
                        telegramIntent.setPackage("com.whatsapp");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.whatsapp"));
                            startActivity(intent2);
                        } else
                            getActivity().startActivity(Intent.createChooser(telegramIntent, "Open with...").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                        //startActivity();


                    }
                }
            });

       /* ((ImageView) view.findViewById(R.id.telegram_icon))
                .setImageResource(contact.hasTelegram ? R.drawable.icn_social_telegram : R.drawable.icn_social_telegram_gray);*/

            if (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                Drawable color = new ColorDrawable(Color.parseColor("#7AA5DA"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
            } else {
                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
            }

            view.findViewById(R.id.telegram_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    CircleImageView cImg = ((CircleImageView) view.findViewById(R.id.telegram_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            checkClick_telegram = false;
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#7AA5DA");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            }
                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_telegram) {
                                if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#7AA5DA");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#7AA5DA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_telegram) {
                                if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#7AA5DA");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                    checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                    checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            view.findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    System.out.println("CLICK TG");


                    if ((!contact.hasTelegram) || (contact.hasTelegram && contact.getSocialModel() == null) || (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() == null)) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.telegramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        String username = contact.getSocialModel().getTelegramLink();
                        char firstSymbol = username.charAt(0);
                        String regex = "[0-9]+";
                        username = username.replaceAll("[-() ]", "");
                        if ((firstSymbol == '+' && username.substring(1).matches(regex)) || (firstSymbol != '+' && username.matches(regex))) {
                            //final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                            final String contactId = contact.getIdContact();
                            final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                            if (contactMimeTypeDataId != null) {
                                Intent intent;
                                intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                                intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                                intent.setPackage("org.telegram.messenger");
                                startActivity(intent);
                            } else {
                                Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                                PackageManager packageManager = getActivity().getPackageManager();
                                List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                                boolean isIntentSafe = activities.size() > 0;
                                if (!isIntentSafe) {
                                    Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                    intent3.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                    startActivity(intent3);
                                } else
                                    startActivity(telegramIntent);

                            }

                        } else if ((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) {
                            Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                            if (firstSymbol == '@')
                                username = username.substring(1);
                            else if (username.contains("t.me/") && !username.contains("@"))
                                username = username.substring(5);
                            else if (username.contains("t.me/@"))
                                username = username.substring(6);

                            telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                startActivity(intent);
                            } else
                                startActivity(telegramIntent);
                        }


              /*  Intent intent;
                final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(),contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                if (contactMimeTypeDataId != null) {
                    intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                    intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                    intent.setPackage("org.telegram.messenger");
                } else {
                    intent = new Intent(Intent.ACTION_VIEW);
                    intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                    //startActivity(intent2);
                }

                    startActivity(intent);*/

           /*         Intent  telegramIntent = new Intent(Intent.ACTION_VIEW);
                    String username = contact.getSocialModel().getTelegramLink();
                    char firstSymbol = username.charAt(0);
                    if(firstSymbol == '@')
                        username = username.substring(1);
                    telegramIntent.setData(Uri.parse("tg://resolve?domain="+username));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if(!isIntentSafe){
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                        startActivity(intent2);
                    }else
                        startActivity(telegramIntent);*/
                    }
                }
            });
        /*((ImageView) view.findViewById(R.id.link_icon))
                .setImageResource(contact.hasLinked ? R.drawable.icn_social_linkedin : R.drawable.icn_social_linkedin_gray);*/

        /*if (contact.hasLinked && contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#0077B7"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.link_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.link_icon)).setImageDrawable(ld);
        }

        view.findViewById(R.id.link_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) view.findViewById(R.id.link_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasLinked && checkClick_linked) {
                            checkClick_linked = false;
                            int colorFrom = Color.parseColor("#0077B7");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_linked = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_linked) {
                            if (contact.hasLinked) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasLinked) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#0077B7");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_linked) {
                            if (contact.hasLinked) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasLinked || contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.linkedLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                        startActivity(intent2);
                    } else {
                        try {
                            startActivity(intent);
                        } catch (Exception e) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        }


                    }
                }
            }
        });*/
        /*((ImageView) view.findViewById(R.id.viber_icon))
                .setImageResource(contact.hasViber ? R.drawable.icn_social_viber : R.drawable.icn_social_viber_gray);*/

            if (contact.hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                Drawable color = new ColorDrawable(Color.parseColor("#6F3FAA"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
            } else {
                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
            }


            view.findViewById(R.id.viber_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    CircleImageView cImg = ((CircleImageView) view.findViewById(R.id.viber_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            checkClick_viber = false;
                            if (contact.hasViber) {

                                int colorFrom = Color.parseColor("#6F3FAA");
                                int colorTo = Color.parseColor("#F9A825");

                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);

                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            }
                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_viber) {
                                if (contact.hasViber) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#6F3FAA");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (contact.hasViber) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#6F3FAA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_viber) {
                                if (contact.hasViber) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#6F3FAA");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                    checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                    checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            view.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (!contact.hasViber || contact.getSocialModel() == null || contact.getSocialModel().getViberLink() == null || contact.getSocialModel().getViberLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.viberLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent;
                        final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getViberLink()));
                        final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.com.viber.voip.viber_number_message");
                        if (contactMimeTypeDataId != null) {
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                            intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                            intent.setPackage("com.viber.voip");
                        } else {
                            intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + Uri.encode(String.valueOf(contact.getSocialModel().getViberLink()))));
                            intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                        }

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.viber.voip"));
                            startActivity(intent2);
                        } else
                            startActivity(intent);

                    }
                }
            });
//        System.out.println("Link = "+contact.getSocialModel().getVkLink()+", bool = "+contact.hasVk);
        /*((ImageView) view.findViewById(R.id.vk_icon))
                .setImageResource(contact.hasVk ? R.drawable.icn_social_vk : R.drawable.icn_social_vk_gray);*/

        /*if (contact.hasTwitter && contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.vk_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.vk_icon)).setImageDrawable(ld);
        }

        view.findViewById(R.id.vk_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) view.findViewById(R.id.vk_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasTwitter && checkClick_vk) {
                            checkClick_vk = false;
                            int colorFrom = Color.parseColor("#2ca7e0");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_vk = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_vk) {
                            if (contact.hasTwitter) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasTwitter) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#2ca7e0");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_vk) {
                            if (contact.hasTwitter) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasTwitter || contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.twitter_link).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    String text = contact.getSocialModel().getTwitterLink();
                    if (text.contains("twitter.com/")) {
                        text = text.substring(text.indexOf(".com/") + 5);
                    }
                    Intent intent = null;
                    try {
                        // get the Twitter app if possible

                        getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    } catch (Exception e) {
                        // no Twitter app, revert to browser
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                    }
                    getActivity().startActivity(intent);
                }
            }
        });*/
        /*((ImageView) view.findViewById(R.id.skype_icon))
                .setImageResource(contact.hasSkype ? R.drawable.icn_social_skype : R.drawable.icn_social_skype_gray);*/

            if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                Drawable color = new ColorDrawable(Color.parseColor("#1eb8ff"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
            } else {
                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
            }


            view.findViewById(R.id.skype_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    CircleImageView cImg = ((CircleImageView) view.findViewById(R.id.skype_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {
                            checkClick_skype = false;
                            if (contact.hasSkype) {
                                int colorFrom = Color.parseColor("#1eb8ff");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                            }
                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_skype) {
                                if (contact.hasSkype) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#1eb8ff");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                    AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (contact.hasSkype) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#1eb8ff");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_skype) {
                                if (contact.hasSkype) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#1eb8ff");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                    checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                    checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            view.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (!contact.hasSkype || contact.getSocialModel() == null || contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) {
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.skypeLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Uri skypeUri = Uri.parse("skype:" + contact.getSocialModel().getSkypeLink() + "?chat");
                        Intent myIntent = new Intent(Intent.ACTION_VIEW, skypeUri);
                        myIntent.setComponent(new ComponentName("com.skype.raider", "com.skype.raider.Main"));
                        myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(myIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.skype.raider"));
                            startActivity(intent2);
                        } else
                            startActivity(myIntent);
                    }
                }
            });
        /*((ImageView) view.findViewById(R.id.inst_icon))
                .setImageResource(contact.hasInst ? R.drawable.icn_social_instagram : R.drawable.icn_social_instagram_gray);*/

        /*if (contact.hasInst && contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#8a3ab9"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.inst_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.inst_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.inst_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) view.findViewById(R.id.inst_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasInst && checkClick_inst) {
                            checkClick_inst = false;
                            int colorFrom = Color.parseColor("#8a3ab9");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_inst = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_inst) {
                            if (contact.hasInst) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasInst) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#8a3ab9");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_inst) {
                            if (contact.hasInst) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });

        view.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasInst || ((contact.getSocialModel() == null) || (contact.getSocialModel() != null && (contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty())))) {
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.instagramLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {

                    try {
                        String str = contact.getSocialModel().getInstagramLink();
                        if (!str.contains("instagram")) {
                            str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                        }

                        if (!str.contains("http://") && !str.contains("https://")) {
                            str = "https://" + contact.getSocialModel().getInstagramLink();
                        }

                        Uri uri = Uri.parse(str);
                        Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                        likeIng.setPackage("com.instagram.android");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            *//*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*//*
                            try {
                                String uris = contact.getSocialModel().getInstagramLink();
                                if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }
                        } else
                            startActivity(likeIng);
                    } catch (Exception e) {

                    }
                }
            }
        });*/

        }


    }

    @Override
    public void shareContact(Contact contact) {
        String exportData = "";
        //contact.fillData(getContext(), contactsService);
        if (contact.getName() != null) exportData += "Name: " + contact.getName() + "\n";
        if (contact.getCompany() != null)
            exportData += "Company: " + contact.getCompany() + "\n";
        if (contact.getCompanyPossition() != null)
            exportData += "Position: " + contact.getCompanyPossition() + "\n";
        if (contact.listOfContactInfo != null) {
            for (ContactInfo contactInfo : contact.listOfContactInfo) {
                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    exportData += "Phone: " + contactInfo.toString() + "\n";
                if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                    exportData += "Facebook: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                    exportData += "Vk: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                    exportData += "Instagram: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                    exportData += "Linkedin: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                    exportData += "Twitter: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                    exportData += "Youtube: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                    exportData += "Google_sheet: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                    exportData += "Google_doc: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                    exportData += "Tumblr: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                    exportData += "Angel: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isMedium(contactInfo.value)) {
                    exportData += "Medium: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isGitHub(contactInfo.value)) {
                    exportData += "Github: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                    exportData += "Web: " + contactInfo + "\n";
            }
        }
        if (contact.getSocialModel() != null) {
            if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                exportData += "Facebook: " + getPhoneNumberInfo(contact.getSocialModel().getFacebookLink()) + "\n";
            if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())
                exportData += "Vk: " + getPhoneNumberInfo(contact.getSocialModel().getVkLink()) + "\n";
            if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                exportData += "Linkedin: " + getPhoneNumberInfo(contact.getSocialModel().getLinkedInLink()) + "\n";
            if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                exportData += "Instagram: " + getPhoneNumberInfo(contact.getSocialModel().getInstagramLink()) + "\n";
            if (contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())
                exportData += "Twitter: " + getPhoneNumberInfo(contact.getSocialModel().getTwitterLink()) + "\n";
            if (contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())
                exportData += "Youtube: " + getPhoneNumberInfo(contact.getSocialModel().getYoutubeLink()) + "\n";

            if (contact.getSocialModel().getMediumLink() != null && !contact.getSocialModel().getMediumLink().isEmpty())
                exportData += "Medium: " + getPhoneNumberInfo(contact.getSocialModel().getMediumLink()) + "\n";

                /*if(contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty())
                    exportData += "Whatsapp: " + getPhoneNumberInfo(contact.getSocialModel().getWhatsappLink()) + "\n";
                if(contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty())
                    exportData += "Viber: " + getPhoneNumberInfo(contact.getSocialModel().getViberLink()) + "\n";
                if(contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty())
                    exportData += "Telegram: " + getPhoneNumberInfo(contact.getSocialModel().getTelegramLink()) + "\n";
                if(contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty())
                    exportData += "Skype: " + getPhoneNumberInfo(contact.getSocialModel().getSkypeLink()) + "\n";*/
        }

        if (contact.getListOfHashtags() != null && !contact.getListOfHashtags().isEmpty()) {
            exportData += "Tags:";
            for (HashTag hashTag : contact.getListOfHashtags()) {
                if (hashTag != null && hashTag.getHashTagValue() != null) {
                    exportData += " " + hashTag.getHashTagValue();
                }
            }
            exportData += "\n";
        }

        exportData += "\n";
        exportData += "Data shared via http://Extime.pro\n";

        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.putExtra(Intent.EXTRA_TEXT, exportData);
        startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
    }

    private String getContactIdFromPhoneNumber(String phone) {
        final Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phone));
        final ContentResolver contentResolver = getActivity().getContentResolver();
        final Cursor phoneQueryCursor = contentResolver.query(uri, new String[]{ContactsContract.PhoneLookup._ID}, null, null, null);
        if (phoneQueryCursor != null) {
            if (phoneQueryCursor.moveToFirst()) {
                String result = phoneQueryCursor.getString(phoneQueryCursor.getColumnIndex(ContactsContract.PhoneLookup._ID));
                phoneQueryCursor.close();
                return result;
            }
            phoneQueryCursor.close();
        }
        return null;
    }

    public void checkAllHashtags() {
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
    }

    public String getContactMimeTypeDataId(@NonNull Context context, String contactId, @NonNull String mimeType) {
        if (TextUtils.isEmpty(mimeType))
            return null;
        ContentResolver cr = context.getContentResolver();
        Cursor cursor = null;
        try {
            cursor = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._ID}, ContactsContract.Data.MIMETYPE + "= ? AND "
                    + ContactsContract.Data.CONTACT_ID + "= ?", new String[]{mimeType, contactId}, null);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        if (cursor == null)
            return null;
        if (!cursor.moveToFirst()) {
            cursor.close();
            return null;
        }
        String result = cursor.getString(cursor.getColumnIndex(ContactsContract.Data._ID));
        cursor.close();
        return result;
    }


    private void callContact(Contact contact) {
        Intent callIntent = new Intent(Intent.ACTION_CALL);
        callIntent.setData(Uri.parse("tel:" + contact.listOfContactInfo.get(0)));
        startActivity(callIntent);
    }

    @Override
    public void onStart() {

        System.out.println("OnStart");
        super.onStart();
    }

    @Override
    public void onStop() {
        super.onStop();
        System.out.println("STOP FRAGM");
        //recyclerView_k.getScrollY();

    }

    @Override
    public void onPrepareOptionsMenu(Menu menu) {

        System.out.println("onPrepareOptionsMenu 3");
        //((MainActivity) mainView.getContext()).selectedType = FragmentTypeEnum.CONTACTS;
        //((MainActivity) mainView.getContext()).applyBottomAndTopBar();

        ((TextView) toolbarC.findViewById(R.id.toolbar_title)).setText("Contacts");

        if (!ContactAdapter.checkMerge)
            ((Postman) getActivity()).getMenu().getItem(0).setVisible(true);

        if (UPD_FAV || UPD_IMP || UPD_FIN || UPD_PAUSE || UPD_CROWN || UPD_VIP || UPD_STARTUP || UPD_INVESTOR) {

            upd_favorites_contacts();

        }

        //toolbarC.setNavigationIcon(R.drawable.icn_menu);

       /* toolbarC.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                System.out.println("Drawer 3");
                EventBus.getDefault().post(new OpenDriver());
                EventBus.getDefault().post(new OpenDriver());
            }


        });*/

        ((MainActivity) mainView.getContext()).setContactsToContent();

        getActivity().findViewById(R.id.barFlipper).setVisibility(View.VISIBLE);

        //setContactsToContent();

        super.onPrepareOptionsMenu(menu);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {

        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public void onResume() {
        super.onResume();
        ProfileFragment.profile = false;
        ProfileFragment.company = false;
        if (ClibpboardAdapter.checkUpdateClips) {
            ((TextView) getActivity().findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.colorPrimary));
        } else {
            ((TextView) getActivity().findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.gray));
        }

        initListeners();

        ((MainActivity) mainView.getContext()).selectedType = FragmentTypeEnum.CONTACTS;
        ((MainActivity) mainView.getContext()).applyBottomAndTopBar();

        if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText() != null && !((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().isEmpty()) {
            if (allSearch) {
                String str = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString();
                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(str);


                getActivity().findViewById(R.id.plane_icon).callOnClick();

                allSearch = true;

            } else {
                String str = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString();
                ((EditText) getActivity().findViewById(R.id.magic_edit_text)).setText(str);
            }
        }

        System.out.println("RESUME");
        if (contactAdapter != null) {
            if (CreateFragment.checkMerge) {
                CreateFragment.checkMerge = false;
                // contactAdapter.stopSelectionMode();
                contactAdapter.stopNEWSelection();

                //   ((TextView)MainActivity.mainToolBar.findViewById(R.id.cancel_toolbar)).setText("CANCEL");
                //   ((TextView)MainActivity.mainToolBar.findViewById(R.id.cancel_toolbar)).setVisibility(View.GONE);
            } else {
                if (contactAdapter.selectionModeEnabled) {
                    System.out.println("Enable Mode Resume");
                    try {
                        contactAdapter.startNewSelection();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                }
            }
            contactAdapter.notifyDataSetChanged();

        }

        if (toolbarC != null) {
            toolbarC.findViewById(R.id.toolbar_kanban).setVisibility(View.VISIBLE);
        }


        if (profilePopUp != null) {
            if (profilePopUp.getVisibility() == View.INVISIBLE) {
                profilePopUp.setVisibility(View.GONE);
                contactAdapter.notifyDataSetChanged();

                if (selectedContactPopup.isValid()) {
                    showProfilePopUp(selectedContactPopup);
                    openedViews.add(profilePopUp);

                    if (ClibpboardAdapter.checkSelectClips) {
                        System.out.println("CHECK CLIPS 1");
                    /*if (getActivity() == null)
                        ((TextView) MainActivity.activityProfile.findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.colorPrimary));
                    else*/
                        ((TextView) getActivity().findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.colorPrimary));
                    }
                }


            }
        }
        if (companyProfilePopup != null) {
            if (companyProfilePopup.getVisibility() == View.INVISIBLE) {
                companyProfilePopup.setVisibility(View.GONE);
                contactAdapter.notifyDataSetChanged();

                if (selectedContactPopup.isValid()) {
                    showCompanyPopup(selectedContactPopup);
                    openedViews.add(companyProfilePopup);
                }
            }
        }
        if (UPD_ALL) {
            UPD_ALL = false;
            //setContacts();
            //  initAdapter(true);
            //contactAdapter.defaultListContacts();
            contactAdapter.notifyDataSetChanged();
            System.out.println("yzyzyz");
            System.out.println("1");
            initContactsBar();
            System.out.println("2");
            initRecyclerHashTags();
            System.out.println("3");
            initFavoritesPop();
            System.out.println("4");
        }

        if (UPD_FAV || UPD_IMP || UPD_FIN || UPD_PAUSE || UPD_CROWN || UPD_VIP || UPD_STARTUP || UPD_INVESTOR) {

            upd_favorites_contacts();

        }

        if (UPD_LIST) {
            UPD_LIST = false;
            //  contactAdapter.notifyDataSetChanged();
            // contactAdapter.getListOfCompanies()
            if (((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked()) {
                contactAdapter.showCompanies();
            } else {
                contactAdapter.defaultListContacts();
                contactAdapter.notifyDataSetChanged();
            }

            initContactsBar();
            initRecyclerHashTags();
            initFavoritesPop();


        }

        if (goneSelectMeny) {
            System.out.println("RESUME GONE MARGE HOLD");
            getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
            goneSelectMeny = false;
        }


        if (openP) {

            if (contactKankab.isFinished || contactKankab.isPause || contactKankab.isImportant || contactKankab.isFavorite || contactKankab.isCrown || contactKankab.isVip || contactKankab.isStartup || contactKankab.isInvestor)
                openPreview(contactKankab, numberKankab);

            openP = false;
        }

        if (kanbanAdapter_1 != null && kanbanAdapter_2 != null && kanbanAdapter_3 != null && kanbanAdapter_4 != null) {
            kanbanAdapter_1.notifyDataSetChanged();
            kanbanAdapter_2.notifyDataSetChanged();
            kanbanAdapter_3.notifyDataSetChanged();
            kanbanAdapter_4.notifyDataSetChanged();

        }

        System.out.println("RESUME END");

        if (((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0) {
            ((TextView) getActivity().findViewById(R.id.countSearchContacts)).setVisibility(View.VISIBLE);
        }

        //System.gc();

    }

    public void upd_favorites_contacts() {

        initFavoritesPop();

        updateKankabFull();

        UPD_FAV = false;
        UPD_IMP = false;
        UPD_FIN = false;
        UPD_PAUSE = false;
        UPD_CROWN = false;
        UPD_VIP = false;
        UPD_STARTUP = false;
        UPD_INVESTOR = false;

        if (((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked()
                && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Fav_L.findViewById(R.id.favorites_fav_check_only).callOnClick();
        }

        if (((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Imp_L.findViewById(R.id.important_fav_check_only).callOnClick();
        }

        if (((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked()
                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Fin_L.findViewById(R.id.finished_fav_check_only).callOnClick();
        }

        if (((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Pause_L.findViewById(R.id.pause_fav_check_only).callOnClick();
        }

        if (((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Crown_L.findViewById(R.id.crown_fav_check_only).callOnClick();
        }

        if (((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()
                && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Vip_L.findViewById(R.id.vip_fav_check_only).callOnClick();
        }

        if (((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()
                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked()) {

            Stur_L.findViewById(R.id.sturtup_fav_check_only).callOnClick();
        }

        if (((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.community_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).isChecked() && !((CheckBox) getActivity().findViewById(R.id.people_fav_check)).isChecked() &&
                !((CheckBox) getActivity().findViewById(R.id.all_fav_check)).isChecked() && !((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).isChecked() &&
                !((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).isChecked() && !((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).isChecked()
                && !((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).isChecked() && !((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).isChecked()
                && !((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).isChecked() && !((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).isChecked()) {

            Invest_L.findViewById(R.id.investor_fav_check_only).callOnClick();
        }
    }

    private void checkSelectPopup() {
        if (contactAdapter.selectionModeEnabled) {
            //    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);

            getActivity().findViewById(R.id.docButton).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    contactAdapter.mergeSelectedContactsToList();
                }
            });


            //   getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.select_menu).setVisibility(View.VISIBLE);
        }
    }

    public void startSelectionMode() {
        checkFavoriteGroup = false;
        getActivity().findViewById(R.id.frame_select_bar).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        //getActivity().findViewById(R.id.docButton).setVisibility(View.VISIBLE);
        //     getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);

        getActivity().findViewById(R.id.docButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                //    initRecyclerHashTags();
                mergedContacts = true;
                contactAdapter.mergeSelectedContactsToList();
            }
        });


        ((Postman) getActivity()).getMenu().getItem(2).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                System.out.println("Click favorite menu");
                ArrayList<Contact> listS = contactAdapter.getSelectedContacts();

                Realm realm = Realm.getDefaultInstance(); //-
                if (!checkFavoriteGroup) {

                    if (listS == null) return false;
                    realm.beginTransaction();
                    for (Contact c : listS) {
                        c.isFavorite = true;
                    }
                    realm.commitTransaction();
                    Toast.makeText(getContext(), "Successfully added to Favorites", Toast.LENGTH_SHORT).show();
                    checkFavoriteGroup = true;
                } else {

                    if (listS == null) return false;
                    realm.beginTransaction();
                    for (Contact c : listS) {
                        c.isFavorite = false;
                    }
                    realm.commitTransaction();
                    Toast.makeText(getContext(), "Deleted from Favorites", Toast.LENGTH_SHORT).show();
                    checkFavoriteGroup = false;
                }
                realm.close();
                contactAdapter.notifyDataSetChanged();

                return false;
            }
        });

        ((Postman) getActivity()).getMenu().getItem(3).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                System.out.println("Click list selected menu");


                mergedContacts = true;
                contactAdapter.mergeSelectedContactsToList();

                return false;
            }
        });

        ((Postman) getActivity()).getMenu().getItem(4).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {

                System.out.println("Click export selected menu");
                showExportPopup();


                return false;
            }
        });

        getActivity().findViewById(R.id.select_menu).setVisibility(View.VISIBLE);

        /*getActivity().findViewById(R.id.stop_selection_mode).setOnClickListener(v -> {
            getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
            getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
            mergedContacts = false;
            System.out.println(" SELECT MODE STOP 3");
            //  ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
            //   initRecyclerHashTags();
            contactAdapter.stopSelectionMode();
            System.out.println("SIZE LIST  = " + contactAdapter.getListOfContacts().size());
            //   contactAdapter.defaultListContacts();
        });*/


        ContactAdapter contactAdapter = (ContactAdapter) containerContacts.getAdapter();

        if (contactAdapter == null)
            return;

        contactAdapter.startSelectionMode();
    }

    public void hideSelectionMode() {
        ContactAdapter contactAdapter = (ContactAdapter) containerContacts.getAdapter();
        if (contactAdapter == null)
            return;

//        contactAdapter.stopSelectionMode();
        //    getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.INVISIBLE);
        getActivity().findViewById(R.id.select_menu).setVisibility(View.INVISIBLE);
//        mergedContacts = false;
//        initRecyclerHashTags();
    }


    public void stopSelectionMode() {
        ContactAdapter contactAdapter = (ContactAdapter) containerContacts.getAdapter();
        if (contactAdapter == null)
            return;

        contactAdapter.stopSelectionMode();
        //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
        ContactAdapter.checkMerge = false;
        mergedContacts = false;
    }

    public void hideSelectMenu() {
        //etActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
    }

    public void stopSelectionModeNEW() {
        ContactAdapter contactAdapter = (ContactAdapter) containerContacts.getAdapter();
        if (contactAdapter == null)
            return;

        contactAdapter.stopSelectionModeNew();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
        mergedContacts = false;
        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        initRecyclerHashTags();
                    }
                });
            }
        }).start();

    }

    public void stopSelectionModeNEWWithoutHash() {
        ContactAdapter contactAdapter = (ContactAdapter) containerContacts.getAdapter();
        if (contactAdapter == null)
            return;

        contactAdapter.stopSelectionModeNew();
        getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);
        getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
        mergedContacts = false;

        new Thread(new Runnable() {
            @Override
            public void run() {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        //initRecyclerHashTags();
                        updateHashAfterDelete();
                    }
                });
            }
        }).start();

    }

    public void updateHashAfterDelete() {
        listOfUniqueHashtags = new ArrayList<>();
        mapOfQuantityHashtags = new HashMap<>();
        ArrayList<HashTagQuantity> listOfHashTagQuantity = new ArrayList<>();
        int ccc = 0;
        boolean check_ccc = true;
        for (Contact contact : !mergedContacts ? contactAdapter.getSavedList() : contactAdapter.getSelectedContacts()) {
            if (contact != null && contact.getListOfHashtags() != null)
                try {
                    check_ccc = true;
                    for (HashTag hashtag : contact.getListOfHashtags()) {
                        if (hashtag.getHashTagValue().trim().compareTo("") == 0)
                            continue;
                        Integer count = mapOfQuantityHashtags.get(hashtag);
                        if (count != null) {
                            mapOfQuantityHashtags.put(hashtag, count + 1);
                            if (check_ccc) {
                                ccc++;
                                check_ccc = false;
                            }
                        } else {
                            mapOfQuantityHashtags.put(hashtag, 1);

                            if (check_ccc) {
                                ccc++;
                                check_ccc = false;
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR GET LIST = " + e.fillInStackTrace());
                }
        }
        for (HashTag hashTag : mapOfQuantityHashtags.keySet()) {
            listOfHashTagQuantity.add(new HashTagQuantity(hashTag, mapOfQuantityHashtags.get(hashTag)));
        }


        //HASHTAG_ADAPTER = new HashTagsAdapter(mainView.getContext(), listOfHashTagQuantity, this, mainView, getActivity());

        ArrayList<String> listSelect = new ArrayList<>();
        if (HASHTAG_ADAPTER.listOfHashtagsCheck2 != null && !HASHTAG_ADAPTER.listOfHashtagsCheck2.isEmpty())
            listSelect.addAll(HASHTAG_ADAPTER.listOfHashtagsCheck2);

        HASHTAG_ADAPTER.updateHash(listOfHashTagQuantity);

        int quantity = 0;
        for (HashTag hashtag : mapOfQuantityHashtags.keySet()) {
            quantity += Integer.valueOf(mapOfQuantityHashtags.get(hashtag));
        }
        hashTagPopup = (FrameLayout) mainView.getRootView().findViewById(R.id.hashtag_popup);

        System.out.println("SIZ HASHTAAAAAAAAAAAAG = " + ccc);
        int contactCount = ContactCacheService.getOnlyContacts();
        int companyCount = ContactCacheService.getOnlyCompanySize();
        int co = contactCount + companyCount;
        co -= ccc;
        ((TextView) getActivity().findViewById(R.id.NoTagsCount)).setText("(" + co + ")");

        ((TextView) getActivity().findViewById(R.id.all_hashtag_count)).setText("(" + listOfHashTagQuantity.size() + ")");
        ((TextView) getActivity().findViewById(R.id.all_hashtag_count_contacts)).setText("(" + ContactCacheService.getListConatctWithHashtagCount() + ")");

        //====================================new
        boolean checkReload = false;

        for (String s : listSelect) {
            for (HashTagQuantity h : listOfHashTagQuantity) {
                if (s.equals(h.getHashTag().getHashTagValue())) {
                    checkReload = true;
                }
            }
        }

        if (!checkReload) {
            HASHTAG_ADAPTER.setAllHashtagsCheck(true);

            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);

            ((LinearLayout) getActivity().findViewById(R.id.hyperHashtagAllConatcts)).callOnClick();

            ContactsFragment.cherckFirstHash = true;

            //getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.GONE);

            ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
        } else {
            ArrayList<HashTagQuantity> lR = new ArrayList<>();
            for (String s : listSelect) {
                for (HashTagQuantity h : listOfHashTagQuantity) {
                    if (s.equals(h.getHashTag().getHashTagValue())) {
                        lR.add(h);
                        break;
                    }
                }

            }
            ArrayList<HashTagQuantity> listOfHashtagsCheck = new ArrayList<>();

            //contactsFragment.addHyperHashtag(hashTag.getHashTag().getHashTagValue());

            if (getActivity().findViewById(R.id.frame_select_bar).getVisibility() == View.VISIBLE && ((TextView) getActivity().findViewById(R.id.quantity_selected_contacts)).getText().toString().contains("hashtag")) {
                for (HashTagQuantity h : lR) {
                    listOfHashtagsCheck.add(h);
                    addToListByHashTagNEWWithoutNotify(listOfHashtagsCheck, h.getHashTag().getHashTagValue());
                }
            }

            contactAdapter.sortContacts();
            contactAdapter.notifyDataSetChanged();
        }


        /*if (!ContactsFragment.cherckFirstHash) {

            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
            ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
            ContactsFragment.cherckFirstHash = true;
        }*/

        //HASHTAG_ADAPTER.notifyDataSetChanged();
        System.out.println("End HASHTAG");
        //containerHashTags.setAdapter(HASHTAG_ADAPTER);
        // ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText(!mergedContacts ? " " + HASHTAG_ADAPTER.getListOfHashtags().size() + "" : " " + HASHTAG_ADAPTER.getListOfHashtags().size() + "");
        //((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + HASHTAG_ADAPTER.listOfHashtags.size() + "");
    }

    public void updateCountAfterRemoveCompany() {
        int contactCount = ContactCacheService.getOnlyContacts();

        //   int companyCount = contactAdapter.getCountCompanies();
        int companyCount = ContactCacheService.getOnlyCompanySize();
        //      int allCount = contactCount + companyCount;
        try {


            ((TextView) getActivity().findViewById(R.id.all_hashtag_countContacts)).setText(" " + (contactCount + companyCount) + "");

            ((TextView) getActivity().findViewById(R.id.total_fav)).setText(" " + (contactCount + companyCount) + "");
            ((TextView) getActivity().findViewById(R.id.companies_fav)).setText("(" + companyCount + ")");

            ((TextView) getActivity().findViewById(R.id.popupContactsAll)).setText(" " + (contactCount + companyCount) + "");
            ((TextView) getActivity().findViewById(R.id.call2mecloud_count)).setText("(" + (contactCount + companyCount) + ")");
            ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText("" + (contactCount + companyCount) + "");
            ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText("" + (contactCount + companyCount) + "");

        } catch (Exception e) {
            System.out.println("ERROR TO SET TEXT = " + e.fillInStackTrace());

        }


    }


    @Override
    public void onDestroy() {

        System.out.println("onDestroy");
        //destroyApp = true;

       /* if(recyclerView_k != null && recyclerView_k_1 != null && recyclerView_k_2 != null && recyclerView_k_3 != null){

            SharedPreferences mPref = mainView.getContext().getSharedPreferences("SortKanban", Context.MODE_PRIVATE);

            SharedPreferences.Editor editor = mPref.edit();
            editor.putInt("scrollKanban1", recyclerView_k.getScrollY());
            editor.putInt("scrollKanban2", recyclerView_k_1.getScrollY());
            editor.putInt("scrollKanban3", recyclerView_k_2.getScrollY());
            editor.putInt("scrollKanban4", recyclerView_k_3.getScrollY());
            editor.apply();
            System.out.println("Save scrolls");
        }*/

        super.onDestroy();
    }

    @Override
    public void onDestroyView() {

        System.out.println("DDD dd");

        /*if(recyclerView_k != null && recyclerView_k_1 != null && recyclerView_k_2 != null && recyclerView_k_3 != null){

            SharedPreferences mPref = mainView.getContext().getSharedPreferences("SortKanban", Context.MODE_PRIVATE);

            SharedPreferences.Editor editor = mPref.edit();
            editor.putInt("scrollKanban1", recyclerView_k.getScrollY());
            editor.putInt("scrollKanban2", recyclerView_k_1.getScrollY());
            editor.putInt("scrollKanban3", recyclerView_k_2.getScrollY());
            editor.putInt("scrollKanban4", recyclerView_k_3.getScrollY());
            editor.apply();
            System.out.println("Save scrolls");
        }*/

        super.onDestroyView();

    }

    @Override
    public void addSelectedCompany(String company) {
        ((EditText) companySelectPopup.findViewById(R.id.companyName)).setText(company);

//        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
//                getActivity());
//        alertDialogBuilder.setTitle("Do you want to add "+tag+" ?");
//        alertDialogBuilder
//                .setCancelable(false)
//                .setPositiveButton("Yes", (dialog, id) -> {
//                    customTagsAdapter.addHashTag(tag);
//                    contact.getListOfHashtags().add(new HashTag(tag.trim()));
//                    ContactCacheService.updateContact(contact,mainView.getContext());
//                    EventBus.getDefault().post(new UpdateFile());
//                    Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
//                    initRecyclerHashTags();
//                    addHashtagPreview(tag);
//                })
//                .setNegativeButton("No", (dialog, id) -> dialog.cancel());
//
//        AlertDialog alertDialog = alertDialogBuilder.create();
//        alertDialog.show();
    }

    @Override
    public void addSelectedCompanyEdit(String company) {
        ((EditText) fastEditPopup.findViewById(R.id.companyText)).setText(company);
        ((EditText) fastEditPopup.findViewById(R.id.companyText)).setSelection(((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().length());
        //popupCompaniesEdit.setVisibility(View.GONE);
        //fastEditPopup.setVisibility(View.GONE);

//        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
//                getActivity());
//        alertDialogBuilder.setTitle("Do you want to add "+tag+" ?");
//        alertDialogBuilder
//                .setCancelable(false)
//                .setPositiveButton("Yes", (dialog, id) -> {
//                    customTagsAdapter.addHashTag(tag);
//                    contact.getListOfHashtags().add(new HashTag(tag.trim()));
//                    ContactCacheService.updateContact(contact,mainView.getContext());
//                    EventBus.getDefault().post(new UpdateFile());
//                    Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
//                    initRecyclerHashTags();
//                    addHashtagPreview(tag);
//                })
//                .setNegativeButton("No", (dialog, id) -> dialog.cancel());
//
//        AlertDialog alertDialog = alertDialogBuilder.create();
//        alertDialog.show();
    }

    public void addSelectPosition(String position) {
        ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setText(position);
        ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setSelection(((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().length());
        //popupPositionEdit.setVisibility(View.GONE);
    }

    public void clearSocialPopup() {
        ((CheckBox) getActivity().findViewById(R.id.callCheck)).setChecked(true);
        //((CheckBox) getActivity().findViewById(R.id.viberCheck)).setChecked(true);
        //((CheckBox) getActivity().findViewById(R.id.skypeCheck)).setChecked(true);

        ((CheckBox) getActivity().findViewById(R.id.facebookCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.instagramContactsCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.linkedinCheck)).setChecked(true);

        ((CheckBox) getActivity().findViewById(R.id.telegramCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.whatsappCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.googleContactsCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.smartphoneCheck)).setChecked(true);
        //((CheckBox) getActivity().findViewById(R.id.samsungCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.allContactsCheck)).setChecked(true);
        ((TextView) getActivity().findViewById(R.id.barCountContacts)).setText(" " + contactAdapter.getSavedList().size() + "");
        ((ImageView) getActivity().findViewById(R.id.imageContactPopup)).setImageDrawable(getResources().getDrawable(R.drawable.icn_sort_all_contacts));
    }

    public void clearFavouritePopup() {
        ((CheckBox) Fav_L.findViewById(R.id.favorites_fav_check)).setChecked(true);
        ((CheckBox) Imp_L.findViewById(R.id.important_fav_check)).setChecked(true);
        ((CheckBox) Fin_L.findViewById(R.id.finished_fav_check)).setChecked(true);
        ((CheckBox) Pause_L.findViewById(R.id.pause_fav_check)).setChecked(true);

        ((CheckBox) Crown_L.findViewById(R.id.crown_fav_check)).setChecked(true);
        ((CheckBox) Vip_L.findViewById(R.id.vip_fav_check)).setChecked(true);
        ((CheckBox) Stur_L.findViewById(R.id.sturtup_fav_check)).setChecked(true);
        ((CheckBox) Invest_L.findViewById(R.id.investor_fav_check)).setChecked(true);

        ((CheckBox) getActivity().findViewById(R.id.community_fav_check)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.companies_fav_check)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.people_fav_check)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.all_fav_check)).setChecked(true);
        ((TextView) getActivity().findViewById(R.id.barFavorite_count)).setText(" " + contactAdapter.getSavedList().size() + "");
        ((ImageView) getActivity().findViewById(R.id.selected_filter)).setImageDrawable(getResources().getDrawable(R.drawable.icn_contacts_all_favorites));
    }

    public void clearHashtagPopup() {
        HASHTAG_ADAPTER.setAllHashtagsCheck(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(false);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(false);


    }

    public void checkHashtagPopup() {
        HASHTAG_ADAPTER.setAllHashtagsCheck(true);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.NoTagsCheck)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContacts)).setChecked(true);
        ((CheckBox) getActivity().findViewById(R.id.allHashtagCheckContactss)).setChecked(true);
        ((TextView) getActivity().findViewById(R.id.barHashtag_count)).setText("" + String.valueOf(HASHTAG_ADAPTER.listOfHashtags.size()) + "");
    }


    public void copyToClipboard(Context context, String text) {
        if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
            android.text.ClipboardManager clipboard = (android.text.ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            clipboard.setText(text);
        } else {
            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            android.content.ClipData clip = android.content.ClipData.newPlainText("Copied Text", text);
            clipboard.setPrimaryClip(clip);
        }
    }

    public void shareIntent(String text) {
        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.putExtra(Intent.EXTRA_TEXT, text);
        startActivity(Intent.createChooser(shareIntent, "Share"));
    }


    public void showEditPopupPreviewSocial(Contact contact, SocialEnums typeEnum) {
        popupProfileEditPreviewSocial = (FrameLayout) getActivity().findViewById(R.id.popupPreviewEditSocial);


        //popupProfileEditPreviewSocial.findViewById(R.id.line_preview_social).setVisibility(View.GONE);

        popupProfileEditPreviewSocial.findViewById(R.id.imageView3).setVisibility(View.GONE);


        popupProfileEditPreviewSocial.setVisibility(View.VISIBLE);
        popupProfileEditPreviewSocial.setClickable(true);

        //((ImageView)popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_popup_web_blue));
        openedViews.add(popupProfileEditPreviewSocial);
        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setMovementMethod(new ScrollingMovementMethod());
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageTintMode(null);
        }

        if (typeEnum.equals(SocialEnums.FACEBOOK)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getFacebookLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Facebook");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));

        } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getInstagramLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Instagram");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
        } else if (typeEnum.equals(SocialEnums.VK)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getVkLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Vk");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
        } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getLinkedInLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("LinkedIn");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
        } else if (typeEnum.equals(SocialEnums.SKYPE)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getSkypeLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Skype");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
        } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTelegramLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Telegram");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
        } else if (typeEnum.equals(SocialEnums.VIBER)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getViberLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Viber");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
        } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getWhatsappLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("WhatsApp");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));
        } else if (typeEnum.equals(SocialEnums.TWITTER)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTwitterLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Twitter");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_64));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_64));
        } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getYoutubeLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("YouTube");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
        } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getMediumLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Medium");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
        }

        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).requestLayout();

        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).scrollTo(0, 0);


        socialPopup.findViewById(R.id.linearSocialWindow).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                popupProfileEditPreviewSocial.setVisibility(View.GONE);
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCopy).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                copyToClipboard(mainView.getContext(), String.valueOf(((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).getText().toString().trim()));
                Toast.makeText(mainView.getContext(), "Copied to clipboard", Toast.LENGTH_SHORT).show();
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupShare).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String text = ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).getText().toString().trim();
                text += "\n\n";
                text += "Data shared via http://Extime.pro\n";
                shareIntent(text);
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupMail).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.remind_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.call2me_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.updateContact).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                popupEditSocial = (FrameLayout) getActivity().findViewById(R.id.popupEditSocial);
                popupEditSocial.setVisibility(View.VISIBLE);
                popupEditSocial.setClickable(true);

                System.out.println("SOCIAL EDIT");
                popupEditSocial.findViewById(R.id.get_last_clips).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.ok_social).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Facebook");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getFacebookLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));
                } else if (typeEnum.equals(SocialEnums.VK)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Vk");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getVkLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Instagram");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getInstagramLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
                } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("LinkedIn");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getLinkedInLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
                } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Telegram");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTelegramLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
                } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Skype");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getSkypeLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
                } else if (typeEnum.equals(SocialEnums.VIBER)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Viber");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getViberLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
                } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("WhatsApp");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getWhatsappLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));
                } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Twitter");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTwitterLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_64));
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Youtube");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getYoutubeLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
                } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Medium");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getMediumLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
                }

                openedViews.add(popupEditSocial);


                popupEditSocial.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Realm realm = Realm.getDefaultInstance(); //-

                        if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {

                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://www.facebook.com/" + f;
                                }

                                if (ClipboardType.isFacebook(f)) {
                                    socialModel.setFacebookLink(f);
                                } else {
                                    socialModel.setFacebookLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setFacebookLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                                Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                }


                                String link = socialModel.getFacebookLink();
                                boolean checkich = false;
                                try {
                                    String checkFacebook = link.substring(0, 37);
                                    if (checkFacebook.equals("https://www.facebook.com/profile.php?")) {
                                        link = link.substring(37, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    }
                                } catch (Exception e) {

                                    e.printStackTrace();
                                }
                                if (!checkich) {
                                    try {
                                        if (link.contains("https://facebook.com/")) {
                                            link = link.substring(21, link.length());
                                            if (link.contains("profile.php")) {
                                                link = link.substring(link.indexOf(".php") + 5, link.length());
                                            }
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        } else if (link.contains("https://m.facebook.com/")) {
                                            link = link.substring(23, link.length());
                                            if (link.contains("profile.php")) {
                                                link = link.substring(link.indexOf(".php") + 5, link.length());
                                            }
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        } else if (link.contains("php?")) {
                                            int index = link.indexOf("php?");
                                            link = link.substring(index + 4, link.length());
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                                //   System.out.println(checkFacebook+", "+link);
                                if (!checkich)
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());

                                //   ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());
                                contact.hasFacebook = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getFacebookLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getFacebookLink());

                            } else {
                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }
                                contact.getSocialModel().setFacebookLink(null);
                                //  ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                                //  ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                }


                                ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                                contact.hasFacebook = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.VK)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://vk.com/" + f;
                                }

                                if (ClipboardType.isVk(f)) {
                                    socialModel.setVkLink(f);
                                } else {
                                    socialModel.setVkLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setVkLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                                Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }


                                try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                }

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasVk = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getVkLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getVkLink());
                            } else {
                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }
                                contact.getSocialModel().setVkLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }


                                ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or");
                                contact.hasVk = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                            /*ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            //EventBus.getDefault().post(new UpdateFile());
                        } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //  if (contact.getSocialModel() != null)

                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }



                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);

                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                    //contactsService.updateNote(contact.getIdContact(), note, username);
                                }

                                if (!username.toLowerCase().contains("instagram.com")) {
                                    username = "https://instagram.com/" + username;
                                }

                                socialModel.setInstagramLink(username);
                                //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                                //    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                                Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                                Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);
                         /*   ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                }

                                //   if (contact.getSocialModel() != null)


                                contact.hasInst = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String inst = contact.getSocialModel().getInstagramLink();

                                if (inst.contains(".com/")) {
                                    int ind = inst.indexOf(".com/");
                                    String outLink = inst.substring(ind + 5, inst.length());


                                    if (outLink.contains("?")) {
                                        int in = outLink.indexOf("?");
                                        outLink = outLink.substring(0, in);
                                    }

                                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getInstagramLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getInstagramLink());
                            } else {
                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }
                                socialModel.setInstagramLink(null);
                                //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                                LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                }


                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add new link");
                                contact.hasInst = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.MEDIUM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //  if (contact.getSocialModel() != null)

                                if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                }



                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);

                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                    //contactsService.updateNote(contact.getIdContact(), note, username);
                                }

                                if (!username.contains("medium.com")) {
                                    if (!username.contains("@"))
                                        username = "https://medium.com/@" + username;
                                    else
                                        username = "https://medium.com/" + username;
                                }

                                socialModel.setMediumLink(username);
                                //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                                //    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                                Drawable colori = new ColorDrawable(Color.parseColor("#000000"));
                                Drawable imagei = getResources().getDrawable(R.drawable.medium_white);
                                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldi);
                         /*   ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.medium_icon)).setImageDrawable(ldi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.medium_icon)).setImageDrawable(ldi);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.medium_icon)).setImageDrawable(ldi);
                                }

                                //   if (contact.getSocialModel() != null)


                                contact.hasMedium = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String inst = contact.getSocialModel().getMediumLink();

                                if (inst.contains(".com/")) {
                                    int ind = inst.indexOf(".com/");
                                    String outLink = inst.substring(ind + 5, inst.length());


                                    if (outLink.contains("?")) {
                                        int in = outLink.indexOf("?");
                                        outLink = outLink.substring(0, in);
                                    }

                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(outLink);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(contact.getSocialModel().getMediumLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getMediumLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getMediumLink());
                            } else {
                                if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                }
                                socialModel.setMediumLink(null);
                                //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image4 = getResources().getDrawable(R.drawable.medium_white);
                                LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.medium_icon)).setImageDrawable(ld4);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.medium_icon)).setImageDrawable(ld4);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.medium_icon)).setImageDrawable(ld4);
                                }


                                ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");
                                contact.hasMedium = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {

                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //    if (contact.getSocialModel() != null)

                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }


                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/in/")) {
                                    f = "https://www.linkedin.com/in/" + f;
                                }

                                if (ClipboardType.isLinkedIn(f)) {
                                    socialModel.setLinkedInLink(f);
                                } else {
                                    socialModel.setLinkedInLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setLinkedInLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //      ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                                //      ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                                Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                                Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});

                        /*    ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                }


                                try {
                                    String link = socialModel.getLinkedInLink();
                                    if (link.contains("/in/")) {
                                        String sub = link.substring(link.indexOf("/in/") + 4, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                                    } else {
                                        String sub = link.substring(link.length() - 20, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                                }
                                //  ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                                contact.hasLinked = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getLinkedInLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getLinkedInLink());
                            } else {
                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }
                                contact.getSocialModel().setLinkedInLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                                LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                           /* ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                }

                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add new link");
                                contact.hasLinked = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.VIBER)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //       if (contact.getSocialModel() != null)

                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }

                                socialModel.setViberLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //        ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                //        ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                                Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                                LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                }


                                //   if (contact.getSocialModel() != null)
                                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(socialModel.getViberLink());
                                contact.hasViber = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getViberLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getViberLink());
                            } else {
                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }
                                socialModel.setViberLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //      ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                //      ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                       /*     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                }

                                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add new link");
                                contact.hasViber = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //   EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());
                        } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();


                            //  contact.setSocialModel(new SocialModel());
                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                // if (contact.getSocialModel() != null)

                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }

                                socialModel.setWhatsappLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                //    contact.getSocialModel().setWhatsappLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                //  ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                                Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                                LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                }

                                //   if(contact.getSocialModel() != null)
                                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(socialModel.getWhatsappLink());


                                contact.hasWhatsapp = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getWhatsappLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getWhatsappLink());
                            } else {
                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }
                                socialModel.setWhatsappLink(null);
                                //      contact.getSocialModel().setWhatsappLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                }


                                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add new link");
                                contact.hasWhatsapp = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            // EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //    if (contact.getSocialModel() != null)

                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }


                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();
                                char firstSymbol = username.charAt(0);
                                String regex = "[0-9]+";
                                username = username.replaceAll("[-() ]", "");
                                if (((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) && !username.contains("t.me/")) {
                                    username = "t.me/" + username;
                                }

                                socialModel.setTelegramLink(username);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //  ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                                //  ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                                Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
                                Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
                                ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                       /*     ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){
                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                }

                                //   if (contact.getSocialModel() != null)


                                contact.hasTelegram = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String tel = contact.getSocialModel().getTelegramLink();
                                if (tel.contains(".me/")) {
                                    int indexx = tel.indexOf(".me/");
                                    String outLink = tel.substring(indexx + 4, tel.length());
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                                } else if (tel.contains("?p=")) {
                                    int indexx = tel.indexOf("?p=");
                                    String outLink = tel.substring(indexx + 3, tel.length());
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTelegramLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTelegramLink());
                            } else {
                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }
                                socialModel.setTelegramLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                                ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                }

                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add new link");
                                contact.hasTelegram = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            // EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.SKYPE)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)
                                //     contact.getSocialModel().setSkypeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                                //     else

                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }

                                socialModel.setSkypeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                                Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                                LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                }

                                //    if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(contact.getSocialModel().getSkypeLink());
                                //    else
                                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(socialModel.getSkypeLink());
                                contact.hasSkype = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), "Skype: " + contact.getSocialModel().getSkypeLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getSkypeLink());
                            } else {
                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }
                                socialModel.setSkypeLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                          /*  ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                }

                                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                                contact.hasSkype = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.TWITTER)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://twitter.com/" + f;
                                }

                                if (ClipboardType.isTwitter(f)) {
                                    socialModel.setTwitterLink(f);
                                } else {
                                    socialModel.setTwitterLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setTwitterLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                Drawable colorv = new ColorDrawable(Color.parseColor("#2ca7e0"));
                                Drawable imagev = getResources().getDrawable(R.drawable.ic_twitter_white);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ldv);

                                //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);


                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }/* else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }*/


                               /* try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {*/
                                if (socialModel.getTwitterLink().contains(".com/")) {
                                    ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                                //}

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasTwitter = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTwitterLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTwitterLink());
                            } else {
                                if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                }
                                contact.getSocialModel().setTwitterLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);

                                //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } /*else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");
                                contact.hasTwitter = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            //EventBus.getDefault().post(new UpdateFile());
                        } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                }


                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://www.youtube.com/channel/" + f;
                                }

                                if (ClipboardType.isYoutube(f)) {
                                    socialModel.setYoutubeLink(f);
                                } else {
                                    socialModel.setYoutubeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setYoutubeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                Drawable colorv = new ColorDrawable(Color.parseColor("#ed2524"));
                                Drawable imagev = getResources().getDrawable(R.drawable.ic_youtube_white);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }*/


                                /*try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {*/
                                if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                                    if (socialModel.getYoutubeLink().contains("user/")) {
                                        String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                    } else if (socialModel.getYoutubeLink().contains("channel/")) {
                                        String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                    }
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                                //}

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasYoutube = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getYoutubeLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getYoutubeLink());
                            } else {
                                if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                }
                                contact.getSocialModel().setYoutubeLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/
/*
                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");
                                contact.hasYoutube = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            //EventBus.getDefault().post(new UpdateFile());
                        }

                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, profilePopUp);
                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, companyProfilePopup);
                        } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                            initIconColor(contact, fastEditPopup);
                        }

                        realm.close();

                    }
                });

                popupEditSocial.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        popupEditSocial.setVisibility(View.GONE);
                    }
                });
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCall).setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {

                String link = null;

                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    link = contact.getSocialModel().getFacebookLink();
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                    link = contact.getSocialModel().getInstagramLink();
                } else if (typeEnum.equals(SocialEnums.VK)) {
                    link = contact.getSocialModel().getVkLink();
                } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                    link = contact.getSocialModel().getLinkedInLink();
                } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                    link = contact.getSocialModel().getTwitterLink();
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                    link = contact.getSocialModel().getYoutubeLink();
                } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                    link = contact.getSocialModel().getMediumLink();
                }

                if (link != null) {
                    try {
                        String uris = link;
                        if (!link.contains("https://") && !link.contains("http://"))
                            uris = "https://" + uris;

                        System.out.println("Check soc");

                        Intent i = new Intent(Intent.ACTION_VIEW);

                        //i.addCategory(Intent.CATEGORY_APP_BROWSER);

                        i.setData(Uri.parse(uris));

                        System.out.println("uris = " + uris);

                        getActivity().startActivity(Intent.createChooser(i, "Open with..."));


                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                }
                return true;
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCall).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    if (!contact.hasFacebook) {
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.facebook_social).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        Intent intent;
                        if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }

                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink().replace("fb","facebook")));

                        //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                            startActivity(intent2);*/
                            try {
                                String uris = contact.getSocialModel().getFacebookLink();
                                if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }
                        } else
                            startActivity(intent);
                    }
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                    //============================================================
                    if (!contact.hasInst) {
                        //   closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.instagramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        System.out.println("Go Insta");

                        String str = contact.getSocialModel().getInstagramLink();
                        if (!str.toLowerCase().contains("instagram")) {
                            str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                        }

                        if (!str.contains("http://") && !str.contains("https://")) {
                            str = "https://" + contact.getSocialModel().getInstagramLink();
                        }

                        Uri uri = Uri.parse(str);
                        Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                        likeIng.setPackage("com.instagram.android");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*/
                            try {
                                String uris = contact.getSocialModel().getInstagramLink();
                                if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }
                        } else
                            startActivity(likeIng);
                    }
                    //=========
                } else if (typeEnum.equals(SocialEnums.VK)) {
                    //============================================================
                    if (!contact.hasVk) {
                        //    closeOtherPopup();

                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.vk_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                /*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*/
                                try {
                                    String uris = contact.getSocialModel().getVkLink();
                                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e2) {

                                }
                            } else
                                startActivity(intent2);
                        }
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                    //============================================================
                    if (!contact.hasLinked) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.linkedLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        } else {
                            try {
                                startActivity(intent);
                            } catch (Exception e) {
                                Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                                startActivity(intent2);
                            }


                        }
                    }
                    //============
                } else if (typeEnum.equals(SocialEnums.VIBER)) {
                    //===================================================
                    if (!contact.hasViber) {
                        //   closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.viberLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent;
                        final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getViberLink()));
                        final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.com.viber.voip.viber_number_message");
                        if (contactMimeTypeDataId != null) {
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                            intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                            intent.setPackage("com.viber.voip");
                        } else {
                            intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + Uri.encode(String.valueOf(contact.getSocialModel().getViberLink()))));
                            intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                        }

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.viber.voip"));
                            startActivity(intent2);
                        } else
                            startActivity(intent);
                    }
                    //============
                } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                    //=================================================
                    if (!contact.hasWhatsapp) {
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.whatsapp_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                        String whatsappNum = contact.getSocialModel().getWhatsappLink();
                        if (/*whatsappNum.substring(0, 2).equalsIgnoreCase("+8") ||*/ whatsappNum.charAt(0) == '8') {
                            whatsappNum = whatsappNum.replaceFirst("8", "7");
                        }

                        if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                        telegramIntent.setData(Uri.parse("whatsapp://send?phone=" + whatsappNum));
                        telegramIntent.setPackage("com.whatsapp");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.whatsapp"));
                            startActivity(intent2);
                        } else
                            getActivity().startActivity(Intent.createChooser(telegramIntent, "Open with...").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                        //startActivity(telegramIntent);
                    }
                    //========
                } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                    //=====================================================================
                    if (!contact.hasSkype) {
                        //   closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.skypeLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Uri skypeUri = Uri.parse("skype:" + contact.getSocialModel().getSkypeLink() + "?chat");
                        Intent myIntent = new Intent(Intent.ACTION_VIEW, skypeUri);
                        myIntent.setComponent(new ComponentName("com.skype.raider", "com.skype.raider.Main"));
                        myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(myIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.skype.raider"));
                            startActivity(intent2);
                        } else
                            startActivity(myIntent);
                    }
                    //===========
                } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                    //======================================================================
                    if ((!contact.hasTelegram) || (contact.hasTelegram && contact.getSocialModel() == null) || (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() == null)) {
                        //  closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.telegramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        String username = contact.getSocialModel().getTelegramLink();
                        char firstSymbol = username.charAt(0);
                        String regex = "[0-9]+";
                        username = username.replaceAll("[-() ]", "");
                        if ((firstSymbol == '+' && username.substring(1).matches(regex)) || (firstSymbol != '+' && username.matches(regex))) {
                            //final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                            final String contactId = contact.getIdContact();
                            final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                            if (contactMimeTypeDataId != null) {
                                Intent intent;
                                intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                                intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                                intent.setPackage("org.telegram.messenger");
                                startActivity(intent);
                            } else {
                                Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                                PackageManager packageManager = getActivity().getPackageManager();
                                List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                                boolean isIntentSafe = activities.size() > 0;
                                if (!isIntentSafe) {
                                    Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                    intent3.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                    startActivity(intent3);
                                } else
                                    startActivity(telegramIntent);

                            }

                        } else if ((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) {
                            Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                            if (firstSymbol == '@')
                                username = username.substring(1);
                            else if (username.contains("t.me/") && !username.contains("@"))
                                username = username.substring(5);
                            else if (username.contains("t.me/@"))
                                username = username.substring(6);

                            telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                startActivity(intent);
                            } else
                                startActivity(telegramIntent);
                        }


                    }
                } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                    //============================================================
                    if (!contact.hasTwitter) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.twitter_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getTwitterLink();
                        if (text.contains("twitter.com/")) {
                            text = text.substring(text.indexOf(".com/") + 5);
                        }
                        if (text.length() > 0 && text.charAt(0) == '@') text = text.substring(1);
                        Intent intent = null;
                        try {
                            // get the Twitter app if possible

                            getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        } catch (Exception e) {
                            // no Twitter app, revert to browser
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                        }
                        getActivity().startActivity(intent);
                       /* Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                    //============================================================
                    if (!contact.hasYoutube) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.youtube_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getYoutubeLink();
                        if (text.contains("youtu.be/") || text.contains("watch?v=")) {
                            if (text.contains("youtu.be/"))
                                text = text.substring(text.indexOf("youtu.be/") + 9);
                            else if (text.contains("watch?v="))
                                text = text.substring(text.indexOf("watch?v=") + 8);

                            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + text));

                            Intent webIntent = new Intent(Intent.ACTION_VIEW,
                                    Uri.parse("http://www.youtube.com/watch?v=" + text));

                            try {
                                getContext().startActivity(appIntent);
                            } catch (ActivityNotFoundException ex) {
                                getContext().startActivity(webIntent);
                            }
                        } else if (text.contains("user/") || text.contains("channel/") || text.contains("/c/")) {
                            try {
                                getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(text)));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        /*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                    //============================================================
                    if (!contact.hasMedium) {
                        //    closeOtherPopup();
                        //closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.medium_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        try {
                            String uri = contact.getSocialModel().getMediumLink();

                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));
                            getContext().startActivity(i);
                        } catch (Exception e) {

                        }
                    }
                    //==============
                }
                //==============

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.delete_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                        getActivity());
                alertDialogBuilder.setTitle("Do you want to delete " + ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).getText().toString().toLowerCase().trim() + "?");
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Yes", (dialog, id) -> {


                                    Realm realm = Realm.getDefaultInstance(); //-

                                    if (typeEnum.equals(SocialEnums.FACEBOOK)) {


                                        if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setFacebookLink(null);
                                        realm.commitTransaction();
                                        Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                        ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                        } else {
                                            ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                        }


                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                                        realm.beginTransaction();
                                        contact.hasFacebook = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();

                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        // EventBus.getDefault().post(new UpdateFile());


                                    } else if (typeEnum.equals(SocialEnums.VK)) {
                                        if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setVkLink(null);
                                        realm.commitTransaction();
                                        //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                                        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                        ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                        } else {
                                            ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                        }


                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or");
                                        realm.beginTransaction();
                                        contact.hasVk = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());
                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                                    } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                                        if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                        }
                                        realm.beginTransaction();
                                        socialModel.setInstagramLink(null);
                                        realm.commitTransaction();
                                        //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                        //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                        Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                                        LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                        ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                        } else {
                                            ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                        }


                                        ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasInst = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();

                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //    EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                                    } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                                        if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setLinkedInLink(null);
                                        realm.commitTransaction();
                                        //     ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                        //     ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                        Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                                        LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                                        ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                           /* ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                        } else {
                                            ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                        }

                                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasLinked = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                    } else if (typeEnum.equals(SocialEnums.VIBER)) {
                                        if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                        }
                                        realm.beginTransaction();
                                        socialModel.setViberLink(null);
                                        realm.commitTransaction();
                                        try {
                                            ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                        } catch (NullPointerException e) {
                                            e.printStackTrace();
                                        }
                                        //      ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                        //      ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                        Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                        LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                                        ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                       /*     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                        } else {
                                            ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                        }

                                        ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasViber = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //   EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                    } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                                        if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                        }
                                        realm.beginTransaction();
                                        socialModel.setWhatsappLink(null);
                                        realm.commitTransaction();
                                        //      contact.getSocialModel().setWhatsappLink(null);
                                        if (popupEditSocial != null)
                                            ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                        //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                        //    ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                        Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                        LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                                        ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                        } else {
                                            ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                        }


                                        ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasWhatsapp = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                    } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                                        if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                        }
                                        realm.beginTransaction();
                                        socialModel.setTelegramLink(null);
                                        realm.commitTransaction();

                                        if (popupEditSocial != null)
                                            ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                        //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                        //    ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                        Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                        LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                                        ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                        } else {
                                            ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                        }

                                        ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasTelegram = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                    } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                                        if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                        }
                                        realm.beginTransaction();
                                        socialModel.setSkypeLink(null);
                                        realm.commitTransaction();

                                        if (popupEditSocial != null)
                                            ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                        //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                        //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                        Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                        LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                                        ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                          /*  ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }*/

                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                        } else {
                                            ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                        }

                                        ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                                        realm.beginTransaction();
                                        contact.hasSkype = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //    EventBus.getDefault().post(new UpdateFile());

                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                    } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                                        if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setTwitterLink(null);
                                        realm.commitTransaction();
                                        //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                                        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                        ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);

                                        //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                                        if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                            ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                        } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                            ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                        } /*else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");
                                        realm.beginTransaction();
                                        contact.hasTwitter = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());
                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                                    } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                                        if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setYoutubeLink(null);
                                        realm.commitTransaction();
                                        //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                                        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                        ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld2);


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");
                                        realm.beginTransaction();
                                        contact.hasYoutube = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());
                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                                    } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                                        if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                            contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                        }
                                        realm.beginTransaction();
                                        contact.getSocialModel().setMediumLink(null);
                                        realm.commitTransaction();
                                        //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                        Drawable image2 = getResources().getDrawable(R.drawable.medium_white);
                                        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                        ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld2);

                                        //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                        ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");
                                        realm.beginTransaction();
                                        contact.hasMedium = false;
                                        contact.setSocialModel(socialModel);
                                        realm.commitTransaction();
                                        ContactCacheService.updateContact(contact, mainView.getContext());
                                        //  EventBus.getDefault().post(new UpdateFile());
                                        popupProfileEditPreviewSocial.setVisibility(View.GONE);

                                    }

                                    realm.close();

                                    if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                        initIconColor(contact, profilePopUp);
                                    } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                        initIconColor(contact, companyProfilePopup);
                                    } else if (fastEditPopup != null && fastEditPopup.getVisibility() == View.VISIBLE) {
                                        initIconColor(contact, fastEditPopup);
                                    }

                                    //EventBus.getDefault().post(new UpdateFile());
                                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                                }
                        )
                        .setNegativeButton("No", (dialog, id) -> dialog.cancel());

                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();
            }
        });

    }


    @Override
    public void onAttach(Context context) {
        System.out.println("ATTACH");

        super.onAttach(context);
    }

    @Override
    public HashTagsAdapter getHashTagAdapter() {
        return HASHTAG_ADAPTER;
    }

    private Contact contactKankab;
    private int numberKankab;

    @Override
    public void openPreview(Contact contact, int number) {

        contactKankab = contact;
        numberKankab = number;

        FrameLayout kankabPreview = getActivity().findViewById(R.id.profile_popup_kankab);


        kankabPreview.findViewById(R.id.socialContactAdapter).setVisibility(View.GONE);

        kankabPreview.findViewById(R.id.facebook_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.twitter_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.linked_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.instagram_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.youtube_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.vk_icon_adapter).setVisibility(View.GONE);
        kankabPreview.findViewById(R.id.medium_icon_adapter).setVisibility(View.GONE);

        try {
            kankabPreview.findViewById(R.id.contactInitials).setVisibility(View.GONE);
            kankabPreview.findViewById(R.id.contactCircleColor).setVisibility(View.VISIBLE);
            ((CircleImageView) kankabPreview.findViewById(R.id.contactCircleColor)).setImageURI(Uri.parse(contact.getPhotoURL()));
            if (((BitmapDrawable) ((CircleImageView) kankabPreview.findViewById(R.id.contactCircleColor)).getDrawable()).getBitmap() == null) {
                kankabPreview.findViewById(R.id.contactCircleColor).setVisibility(View.VISIBLE);
                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                circle.setColor(contact.color);
                kankabPreview.findViewById(R.id.contactCircleColor).setBackground(circle);
                ((CircleImageView) kankabPreview.findViewById(R.id.contactCircleColor)).setImageDrawable(null);
                String initials = getInitials(contact);
                kankabPreview.findViewById(R.id.contactInitials).setVisibility(View.VISIBLE);
                ((TextView) kankabPreview.findViewById(R.id.contactInitials)).setText(initials);
            }
        } catch (Exception e) {
            kankabPreview.findViewById(R.id.contactCircleColor).setVisibility(View.VISIBLE);
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            kankabPreview.findViewById(R.id.contactCircleColor).setBackground(circle);
            ((CircleImageView) kankabPreview.findViewById(R.id.contactCircleColor)).setImageDrawable(null);
            String initials = getInitials(contact);
            kankabPreview.findViewById(R.id.contactInitials).setVisibility(View.VISIBLE);
            ((TextView) kankabPreview.findViewById(R.id.contactInitials)).setText(initials);
        }

        //holder.itemView.setBackgroundColor(Color.TRANSPARENT);

        //holder.number_card.setText(String.valueOf(i - 3));

        if (contact.isFavorite) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.star));
        } else if (contact.isImportant) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.icn_important));
        } else if (contact.isPause) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.pause));
        } else if (contact.isFinished) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.icn_finished));
        } else if (contact.isCrown) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.crown));
        } else if (contact.isVip) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.vip_new));
        } else if (contact.isStartup) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.startup));
        } else if (contact.isInvestor) {
            ((ImageView) kankabPreview.findViewById(R.id.type_image_contact)).setImageDrawable(mainView.getContext().getResources().getDrawable(R.drawable.investor_));
        }

        ((TextView) kankabPreview.findViewById(R.id.number_card)).setText(String.valueOf(number + 1));


        int type = 1;
        try {
            Calendar current = Calendar.getInstance();
            Calendar contactDate = Calendar.getInstance();
            current.setTime(new Date());
            contactDate.setTime(contact.getDateCreate());
            String timeStr = "";
            if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && current.get(Calendar.MONTH) == contactDate.get(Calendar.MONTH) && current.get(Calendar.DAY_OF_MONTH) == contactDate.get(Calendar.DAY_OF_MONTH)) {

                timeStr = Time.valueOf(contact.time).getHours() + ":";
                if (Time.valueOf(contact.time).getMinutes() < 10) timeStr += "0";
                timeStr += Time.valueOf(contact.time).getMinutes();
            } else if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && (current.get(Calendar.MONTH) != contactDate.get(Calendar.MONTH) || current.get(Calendar.DAY_OF_MONTH) != contactDate.get(Calendar.DAY_OF_MONTH))) {
                //System.out.println(contactDate.get(Calendar.MO));
                type = 2;
                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + contactDate.get(Calendar.DAY_OF_MONTH);
            } else {
                type = 3;
                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + String.valueOf(contactDate.get(Calendar.YEAR))/*.substring(2)*/;
                //System.out.println("DATE NEW = "+timeStr);
            }


            ((TextView) kankabPreview.findViewById(R.id.cardTime)).setText(/*getUpdTime(contact.getDateCreate(), Time.valueOf(contact.time))*/ timeStr);
        } catch (Exception e) {
            System.out.println("ERROR TO GET TIME Contact Adapter");
        }


        int countSocials = 0;

        //holder.favotiveContact.setVisibility(View.GONE);    //new

        if (contact.getSocialModel() != null) {
            if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty()) {
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.facebook_icon_adapter).setVisibility(View.VISIBLE);
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.facebook_icon_adapter).setOnClickListener(v -> openFacebook(contact));
                countSocials++;
            }
            if (contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty()) {
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.twitter_icon_adapter).setVisibility(View.VISIBLE);
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.twitter_icon_adapter).setOnClickListener(v -> openTwitter(contact));
                countSocials++;
            }
            if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty()) {
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.linked_icon_adapter).setVisibility(View.VISIBLE);
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.linked_icon_adapter).setOnClickListener(v -> openLinkedIn(contact));
                countSocials++;
            }
            if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty()) {
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.instagram_icon_adapter).setVisibility(View.VISIBLE);
                kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.instagram_icon_adapter).setOnClickListener(v -> openInstagram(contact));
                countSocials++;
            }

            while (true) {
                if (countSocials < 4) {
                    if (contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty()) {
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.youtube_icon_adapter).setVisibility(View.VISIBLE);
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.youtube_icon_adapter).setOnClickListener(v -> openYoutube(contact));
                        countSocials++;
                    }
                }

                if (countSocials < 4) {
                    if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty()) {
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.vk_icon_adapter).setVisibility(View.VISIBLE);
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.vk_icon_adapter).setOnClickListener(v -> openVk(contact));
                        countSocials++;
                    }
                }

                if (countSocials < 4) {
                    if (contact.getSocialModel().getMediumLink() != null && !contact.getSocialModel().getMediumLink().isEmpty()) {
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.medium_icon_adapter).setVisibility(View.VISIBLE);
                        kankabPreview.findViewById(R.id.socialContactAdapter).findViewById(R.id.medium_icon_adapter).setOnClickListener(v -> openMedium(contact));
                        countSocials++;
                    }
                }

                break;
            }


        }


        if (countSocials > 0)
            kankabPreview.findViewById(R.id.socialContactAdapter).setVisibility(View.VISIBLE);
        else
            kankabPreview.findViewById(R.id.socialContactAdapter).setVisibility(View.GONE);


        int count_phone = 0;
        int count_email = 0;
        if (contact.getListOfContactInfo() != null) {
            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                if (contactInfo.isEmail) count_email++;
                else if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    count_phone++;
            }

            if (count_phone != 0) {
                kankabPreview.findViewById(R.id.card_phone_contact).setVisibility(View.VISIBLE);
                ((TextView) kankabPreview.findViewById(R.id.text_phone_card)).setText(String.valueOf(count_phone));
                //holder.isNew.setVisibility(View.GONE);
                kankabPreview.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                kankabPreview.findViewById(R.id.card_phone_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        int count_E = 0;

                        ArrayList<ContactInfo> listEmails = new ArrayList<>();

                        for (ContactInfo i : contact.getListOfContactInfo()) {
                            if (i.isPhone) {
                                count_E++;
                                listEmails.add(i);
                            }
                        }

                        if (count_E == 1) {

                            boolean findPrimary = false;
                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000") && contactInfo.isPrimary) {
                                    intentPhone(contactInfo.value);
                                    findPrimary = true;
                                    break;
                                }
                            }

                            if (!findPrimary) {
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000")) {
                                        intentPhone(contactInfo.value);
                                        break;
                                    }
                                }
                            }
                        } else {
                            openDialodDataProfile(listEmails, contact);
                        }
                    }
                });

            } else kankabPreview.findViewById(R.id.card_phone_contact).setVisibility(View.GONE);

            if (count_email != 0) {
                kankabPreview.findViewById(R.id.email_contact).setVisibility(View.VISIBLE);
                ((TextView) kankabPreview.findViewById(R.id.text_email_card)).setText(String.valueOf(count_email));
                //holder.isNew.setVisibility(View.GONE);
                kankabPreview.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                kankabPreview.findViewById(R.id.email_contact).setOnClickListener(v -> {


                    int count_E = 0;

                    ArrayList<ContactInfo> listEmails = new ArrayList<>();

                    for (ContactInfo i : contact.getListOfContactInfo()) {
                        if (i.isEmail) {
                            count_E++;
                            listEmails.add(i);
                        }
                    }

                    if (count_E == 1) {

                        boolean findPrimary = false;
                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                            if (contactInfo.isEmail && contactInfo.isPrimary) {
                                //intentEmail(contactInfo.value);

                                SharedPreferences mSettings;
                                mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                Set<String> set = mSettings.getStringSet("accounts", null);

                                String finalReplyFrom = null;

                                if (set != null && !set.isEmpty()) {

                                    for (String s : set) {
                                        finalReplyFrom = s;
                                        break;
                                    }

                                }

                                if (finalReplyFrom == null) {

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add(contactInfo.value);
                                    sName.add(contact.getName());

                                    ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                              /*  try {
                                    Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                } catch (NullPointerException e) {
                                    e.printStackTrace();
                                }

                                return;*/
                                    break;
                                }

                                ArrayList<String> sTo = new ArrayList<>();
                                ArrayList<String> sName = new ArrayList<>();

                                sTo.add(contactInfo.value);
                                sName.add(contact.getName());

                                ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                findPrimary = true;
                                break;
                            }
                        }

                        if (!findPrimary) {
                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                if (contactInfo.isEmail) {
                                    //intentEmail(contactInfo.value);

                                    SharedPreferences mSettings;
                                    mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                    Set<String> set = mSettings.getStringSet("accounts", null);

                                    String finalReplyFrom = null;

                                    if (set != null && !set.isEmpty()) {

                                        for (String s : set) {
                                            finalReplyFrom = s;
                                            break;
                                        }

                                    }

                                    if (finalReplyFrom == null) {

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add(contactInfo.value);
                                        sName.add(contact.getName());

                                        ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                  /*  try {
                                        Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                    } catch (NullPointerException e) {
                                        e.printStackTrace();
                                    }

                                    return;*/

                                        break;
                                    }

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add(contactInfo.value);
                                    sName.add(contact.getName());


                                    ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                    break;
                                }
                            }
                        }

                    } else {
                        openDialodDataProfile(listEmails, contact);
                    }

                });

            } else kankabPreview.findViewById(R.id.email_contact).setVisibility(View.GONE);

        }

        kankabPreview.findViewById(R.id.textCompany).setVisibility(View.INVISIBLE);
        kankabPreview.findViewById(R.id.textPosition).setVisibility(View.INVISIBLE);


        if (contact.getCompany() != null) {
            System.out.println(" COMPANYqq  " + contact.getCompany());
            if (contact.getCompany().compareTo("") != 0) {

                //setMargins(holder.linearNameIcons, 0, 0, 0, 0);
                kankabPreview.findViewById(R.id.textCompany).setVisibility(View.VISIBLE);
                ((TextView) kankabPreview.findViewById(R.id.textCompany)).setText(contact.getCompany());
            }
        }

        if (contact.getCompanyPossition() != null) {
            if (contact.getCompanyPossition().compareTo("") != 0) {
                //setMargins(holder.linearNameIcons, 0, 0, 0, 0);
                kankabPreview.findViewById(R.id.textPosition).setVisibility(View.VISIBLE);
                Double ems = ((TextView) kankabPreview.findViewById(R.id.textCompany)).getText().length() / 2.5;
                int ems_count = ems.intValue();
                /*if(ems_count < 8){
                    holder.companyName.setMaxEms(6 + (8-ems_count));
                }*/

                ((TextView) kankabPreview.findViewById(R.id.textPosition)).setText(contact.getCompanyPossition());
            }
        }

        if (((TextView) kankabPreview.findViewById(R.id.textCompany)).length() > 0 && ((TextView) kankabPreview.findViewById(R.id.textPosition)).getVisibility() == View.VISIBLE) {
            Double ems = ((TextView) kankabPreview.findViewById(R.id.textPosition)).getText().length() / 2.5;
            int ems_count = ems.intValue();
        }


        ((TextView) kankabPreview.findViewById(R.id.contactName)).setText(contact.getName());
        kankabPreview.findViewById(R.id.contactName).requestLayout();


        HorizontalScrollView scrollView = kankabPreview.findViewById(R.id.scrollHorizontal);

        LinearLayout containerHashTags = kankabPreview.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(mainView.getContext());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(mainView.getContext().getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");

            text.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    System.out.println("HASH 55");


                           /* contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                            HASHTAG_ADAPTER.setMainHashTag(hashTag.getHashTagValue());

                            if ((listForSelect != null && listForSelect.isEmpty()) || listForSelect == null) {
                                listForSelect = new ArrayList<>();
                                listForSelect.addAll(contactAdapter.getListOfContacts());
                            }*/

                }
            });

            text.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    System.out.println("TTT");
                    //scrollView.getParent().requestDisallowInterceptTouchEvent(true);
                    return false;
                }
            });

                    /*text.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View view) {
                            deleteHashTagsFromUser(hashTag.getHashTagValue(), contact);
                            return false;
                        }
                    });*/


            //     text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
            containerHashTags.addView(text);
        }


        kankabPreview.findViewById(R.id.prifile_contact_card).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openProfile(contact);
            }
        });

        kankabPreview.findViewById(R.id.share_contact_card).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shareContact(contact);
            }
        });

        ProfileSectionAdapter adapter;

        adapter = new ProfileSectionAdapter(getChildFragmentManager());

        ViewPager viewPager = (ViewPager) kankabPreview.findViewById(R.id.viewpager);

        //getFragmentManager().executePendingTransactions();

        adapter.addFragment(new FilesConatct(), "Bio");

        adapter.addFragment(new FilesConatct(), "Timeline");

        adapter.addFragment(new FilesConatct(), "Schedule");

        adapter.addFragment(new FilesConatct(), "         Follow-up");

        //adapter.addFragment(new FilesConatct(), "Files 2");

        //adapter.addFragment(new ScheduleFragment(), "Schedule 2");

        viewPager.setAdapter(adapter);
        SmartTabLayout tabs = (SmartTabLayout) kankabPreview.findViewById(R.id.result_tabs);


       /* viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int i, float v, int i1) {

            }

            @Override
            public void onPageSelected(int i) {
                LinearLayout ll = (LinearLayout) tabs.getChildAt(0);

                for (int j = 0; j < ll.getChildCount(); j++) {
                    TextView tvTabTitle = (TextView) ll.getChildAt(j);
                    tvTabTitle.setTypeface(null, Typeface.NORMAL);
                }
            }

            @Override
            public void onPageScrollStateChanged(int i) {

            }
        });*/

        tabs.setViewPager(viewPager);


        LinearLayout ll = (LinearLayout) tabs.getChildAt(0);

        for (int j = 0; j < ll.getChildCount(); j++) {
            TextView tvTabTitle = (TextView) ll.getChildAt(j);
            tvTabTitle.setTypeface(null, Typeface.NORMAL);
        }

        kankabPreview.findViewById(R.id.closerTabs).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //closeOtherPopup();
                //contactProfileDataFragment.closeOtherPopup();
            }
        });


        getActivity().findViewById(R.id.profile_popup_kankab).setVisibility(View.VISIBLE);

        float px_bottom = 30 * mainView.getContext().getResources().getDisplayMetrics().density;

        getActivity().findViewById(R.id.profile_popup_kankab).getLayoutParams().height = (int) (mainView.getMeasuredHeight() + px_bottom);


        addOpewViews(getActivity().findViewById(R.id.profile_popup_kankab));
    }

    public boolean openP = false;

    @Override
    public void openProfile(Contact contact) {

        if (getActivity().findViewById(R.id.profile_popup_kankab).getVisibility() == View.VISIBLE) {
            getActivity().findViewById(R.id.profile_popup_kankab).setVisibility(View.GONE);
            openP = true;
        }

        android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) mainView.getContext()).getSupportFragmentManager();
        android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(contact, false)).addToBackStack("contacts").commit();
    }

    @Override
    public void closeOtherPopups() {
        closeOtherPopup();
        openP = false;
    }

    private long select_card = -1;

    @Override
    public void setSelectId(long id) {

        select_card = id;

        kanbanAdapter_1.notifyDataSetChanged();
        kanbanAdapter_2.notifyDataSetChanged();
        kanbanAdapter_3.notifyDataSetChanged();
        kanbanAdapter_4.notifyDataSetChanged();
    }

    @Override
    public boolean checkSelectId(long id) {
        if (id == select_card) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isSelectEmpty() {
        if (select_card == -1) return true;
        else return false;

    }

    @Override
    public boolean priviewIsVisible() {
        return Objects.requireNonNull(getActivity(), "Activity = null").findViewById(R.id.profile_popup_kankab).getVisibility() == View.VISIBLE;
    }

    @Override
    public void openFacebook(Contact contact) {
        Intent intent;
        if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
            if (idProfile.contains("&")) {
                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
            }
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

        } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
            if (idProfile.contains("&")) {
                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
            }

            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

        } else
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink().replace("fb","facebook")));

        //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href="+contact.getSocialModel().getFacebookLink()));
        PackageManager packageManager = getActivity().getPackageManager();
        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
        boolean isIntentSafe = activities.size() > 0;
        if (!isIntentSafe) {
                        /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                        startActivity(intent2);*/
            try {
                String uris = contact.getSocialModel().getFacebookLink();
                if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                    uris = "https://" + uris;

                Intent i = new Intent(Intent.ACTION_VIEW);
                i.setData(Uri.parse(uris));
                startActivity(i);
            } catch (Exception e) {

            }
        } else
            startActivity(intent);
    }

    @Override
    public void openTwitter(Contact contact) {
        String text = contact.getSocialModel().getTwitterLink();
        if (text.contains("twitter.com/")) {
            text = text.substring(text.indexOf(".com/") + 5);
        }
        if (text.length() > 0 && text.charAt(0) == '@') text = text.substring(1);
        Intent intent = null;
        try {
            // get the Twitter app if possible

            getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        } catch (Exception e) {
            // no Twitter app, revert to browser
            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
        }
        getActivity().startActivity(intent);
    }

    @Override
    public void openLinkedIn(Contact contact) {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
        PackageManager packageManager = getActivity().getPackageManager();
        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
        boolean isIntentSafe = activities.size() > 0;
        if (!isIntentSafe) {
            Intent intent2 = new Intent(Intent.ACTION_VIEW);
            intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
            startActivity(intent2);
        } else {
            try {
                startActivity(intent);
            } catch (Exception e) {
                Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                startActivity(intent2);
            }


        }
    }

    @Override
    public void openInstagram(Contact contact) {
        try {
            String str = contact.getSocialModel().getInstagramLink();
            if (!str.toLowerCase().contains("instagram")) {
                str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
            }

            if (!str.contains("http://") && !str.contains("https://")) {
                str = "https://" + contact.getSocialModel().getInstagramLink();
            }

            Uri uri = Uri.parse(str);
            Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
            likeIng.setPackage("com.instagram.android");
            PackageManager packageManager = getActivity().getPackageManager();
            List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
            boolean isIntentSafe = activities.size() > 0;
            if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*/
                try {
                    String uris = contact.getSocialModel().getInstagramLink();
                    if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                        uris = "https://" + uris;

                    Intent i = new Intent(Intent.ACTION_VIEW);
                    i.setData(Uri.parse(uris));
                    startActivity(i);
                } catch (Exception e) {

                }
            } else
                startActivity(likeIng);
        } catch (Exception e) {

        }
    }

    @Override
    public void openVk(Contact contact) {
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
        try {
            startActivity(intent);
        } catch (ActivityNotFoundException e) {
            e.printStackTrace();
            PackageManager packageManager = getActivity().getPackageManager();
            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
            boolean isIntentSafe = activities.size() > 0;
            if (!isIntentSafe) {
                                /*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*/
                try {
                    String uris = contact.getSocialModel().getVkLink();
                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                        uris = "https://" + uris;

                    Intent i = new Intent(Intent.ACTION_VIEW);
                    i.setData(Uri.parse(uris));
                    startActivity(i);
                } catch (Exception e2) {

                }
            } else
                startActivity(intent2);
        }
    }

    @Override
    public void openMedium(Contact contact) {
        try {

            String uri = contact.getSocialModel().getMediumLink();
            if (!uri.contains("https://") && !uri.contains("http://"))
                uri = "https://" + uri;

            Intent i = new Intent(Intent.ACTION_VIEW);
            i.setData(Uri.parse(uri));
            startActivity(i);
        } catch (Exception e) {

        }
    }

    @Override
    public void openYoutube(Contact contact) {
        String text = contact.getSocialModel().getYoutubeLink();
        if (text.contains("youtu.be/") || text.contains("watch?v=")) {
            if (text.contains("youtu.be/"))
                text = text.substring(text.indexOf("youtu.be/") + 9);
            else if (text.contains("watch?v="))
                text = text.substring(text.indexOf("watch?v=") + 8);

            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + text));

            Intent webIntent = new Intent(Intent.ACTION_VIEW,
                    Uri.parse("http://www.youtube.com/watch?v=" + text));

            try {
                getContext().startActivity(appIntent);
            } catch (ActivityNotFoundException ex) {
                getContext().startActivity(webIntent);
            }
        } else if (text.contains("user/") || text.contains("channel/") || text.contains("/c/")) {
            try {
                getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(text)));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void intentEmail(String str) {
        Intent emailIntent = new Intent(Intent.ACTION_SENDTO);
        emailIntent.setData(Uri.parse("mailto:" + str));
        startActivity(Intent.createChooser(emailIntent, "Send email"));
    }

    @Override
    public void intentPhone(String str) {
        startActivity(new Intent(Intent.ACTION_DIAL, Uri.fromParts("tel", str, null)));
    }

    public class ParsingSocial extends AsyncTask<Void, Void, Void> {

        private SocialEnums socialEnums;
        private String way;
        private String name = null;

        public ParsingSocial(String s, SocialEnums socialEnums) {
            this.way = s;
            this.socialEnums = socialEnums;
        }

        @Override
        protected void onPreExecute() {
            getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.GONE);
            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.GONE);
            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.GONE);
            getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);


            showWaitText(socialEnums);

           /* if (getActivity().findViewById(R.id.clipboardContainer).getVisibility() == View.VISIBLE) {
                getActivity().findViewById(R.id.clipboardContainer).setVisibility(View.GONE);
                getActivity().findViewById(R.id.fabMenuContainer).setVisibility(View.GONE);
            }*/
            super.onPreExecute();
            //  mInfoTextView.setText("РџРѕР»РµР· РЅР° РєСЂС‹С€Сѓ");
        }

        @Override
        protected Void doInBackground(Void... voids) {
            Document doc = null;
            // Elements elements = new Elements();

            /*WebDriver driver = new AndroidWebDriver(getActivity());
            driver.get("https://www.instagram.com/t_killah/");
            WebElement webElement = driver.findElement(By.className("rhpdm"));
            System.out.println("TEXT NAMEee = "+webElement.getText());*/
            System.out.println("OLD WAY = " + way);
            int ind = way.indexOf("https://");
            System.out.println("index https = " + ind);

            if (ind == -1)
                ind = way.indexOf("http://");

            if (ind == -1)
                way = "https://" + way;
            System.out.println("all way = " + way);
            allWayLink = way;
            try {
                //  if(socialEnums.equals(SocialEnums.INSTAGRAM))
                name = Jsoup.connect(way).timeout(5000).get().title();
                System.out.println("NAME PARCE 2 = " + name);
                //  else if(socialEnums.equals(SocialEnums.VK))
            } catch (IOException e) {
                e.printStackTrace();
            } catch (Exception e2) {
                e2.printStackTrace();
            }

          /*  if(doc != null && doc.title().toString() != null)
            name = doc.title().toString();*/

            /*for(Element element : elements){
                System.out.println("element = "+element.attr("href")+", text = "+element.text());
            }*/


            //    Elements elements = doc.getElementsByClass("_9eogI E3X2T");
            //   Element element = doc.getElementById("react-root");
            //   Element name = doc.select("span#react-root").first();
            //  System.out.println("NAME PARCE = "+element.data().toString());
            // System.out.println("HTML = "+element.html().toString());

            //  System.out.println("Name insta = " + elements.get(0).text());
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {
            hideWaitText();
            if (name != null && !name.isEmpty()) {
                ((TextView) getActivity().findViewById(R.id.textExtractSocial)).setText("Extract data");
                ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).setText("Extract data");
                getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.VISIBLE);
                int index = name.length();
                if (socialEnums.equals(SocialEnums.INSTAGRAM)) {
                    index = name.indexOf('|');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_instagram));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Instagram");
                    extractEnumsToExtractContainer = ExtractEnums.INSTAGRAM;
                } else if (socialEnums.equals(SocialEnums.VK)) {
                    index = name.indexOf('|');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_vk));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Vk");
                    extractEnumsToExtractContainer = ExtractEnums.VK;

                } else if (socialEnums.equals(SocialEnums.FACEBOOK)) {
                    index = name.indexOf('|');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_facebook));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Facebook");
                    extractEnumsToExtractContainer = ExtractEnums.FACEBOOK;
                } else if (socialEnums.equals(SocialEnums.LINKEDIN)) {
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.icn_social_linkedin));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("LinkedIn");
                    extractEnumsToExtractContainer = ExtractEnums.LINKEDIN;
                } else if (socialEnums.equals(SocialEnums.TWITTER)) {
                    index = name.indexOf('|');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_48));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Twitter");
                    extractEnumsToExtractContainer = ExtractEnums.TWITTER;
                } else if (socialEnums.equals(SocialEnums.YOUTUBE)) {
                    index = name.lastIndexOf('-');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.ic_youtube_48));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Youtube");
                    extractEnumsToExtractContainer = ExtractEnums.YOUTUBE;
                } else if (socialEnums.equals(SocialEnums.MEDIUM)) {
                    index = name.indexOf('–');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.medium_size_64));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Medium");
                    extractEnumsToExtractContainer = ExtractEnums.MEDIUM;
                } else if (socialEnums.equals(ClipboardEnum.TUMBLR)) {
                    index = name.indexOf('|');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.tumblr));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Tumblr");
                    extractEnumsToExtractContainer = ExtractEnums.TUMBL;

                } else if (socialEnums.equals(ClipboardEnum.G_SHEET)) {
                    index = name.indexOf('-');
                    ((ImageView) getActivity().findViewById(R.id.imageSocialExtract)).setImageDrawable(getResources().getDrawable(R.drawable.google_sheets));
                    ((TextView) getActivity().findViewById(R.id.nameSocialExtract)).setText("Google sheet");
                    extractEnumsToExtractContainer = ExtractEnums.G_SHEET;

                }
                if (index == -1)
                    index = name.length();

                System.out.println("NAME SOCIAL = " + name);

                TextView value = (TextView) getActivity().findViewById(R.id.nameAccount);
                value.setMovementMethod(new ScrollingMovementMethod());
                value.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        System.out.println("CLICK TEXT");
                    }
                });


                CreateFragment.nameContactExtractFromSocial = name.substring(0, index - 1);
                CreateFragment.socialEnums = socialEnums;


                ((TextView) getActivity().findViewById(R.id.nameAccount)).setText(name.substring(0, index - 1));
                ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(name.substring(0, index - 1));

                //  if((contactAdapter.getSelectContactID() != null && contactAdapter.getSelectContactID() != "") || ProfileFragment.profile || ContactAdapter.checkMergeContacts){
                getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                //  }

                if (ContactsFragment.createContact) {
                    getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
                } else {

                    String usernameLink = "";
                    int index2 = CreateFragment.nameContactExtractFromSocial.length();
                    try {
                        if (extractEnumsToExtractContainer.equals(ExtractEnums.INSTAGRAM)) {
                            index2 = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                            usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index2 + 1, CreateFragment.nameContactExtractFromSocial.length() - 1);
                            index2 -= 2;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.VK)) {
                            index2 = allWayLink.indexOf(".com/");
                            usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.FACEBOOK)) {
                            index2 = allWayLink.lastIndexOf(".com/");
                            if (allWayLink.contains("people")) {
                                index2 = allWayLink.lastIndexOf("/");
                                usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                            } else {
                                usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                                if (usernameLink.contains("/")) {
                                    usernameLink = usernameLink.substring(0, usernameLink.indexOf('/'));
                                }
                            }
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.LINKEDIN)) {
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.TWITTER)) {
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.YOUTUBE)) {
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.MEDIUM)) {
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.TUMBL)) {
                            usernameLink = allWayLink;
                        } else if (extractEnumsToExtractContainer.equals(ExtractEnums.G_SHEET)) {
                            usernameLink = allWayLink;
                        }
                        if (index2 < 0)
                            index2 = CreateFragment.nameContactExtractFromSocial.length();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    boolean checkName = false;

                    if (socialEnums.equals(SocialEnums.INSTAGRAM)) {

                        if (allWayLink.toLowerCase().contains("instagram.com") && allWayLink.contains("?")) {
                            int ind = allWayLink.indexOf('?');
                            if (ind != -1)
                                allWayLink = allWayLink.substring(0, ind);
                        }

                        System.out.println("LINK = " + allWayLink);

                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.INSTAGRAM, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);

                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.VISIBLE);

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());
                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }
                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.VK)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.VK, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.FACEBOOK)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.FACEBOOK, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }
                    if (socialEnums.equals(SocialEnums.TWITTER)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.TWITTER, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.YOUTUBE)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.YOUTUBE, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.MEDIUM)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.MEDIUM, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.LINKEDIN)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.LINKEDIN, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }


                    if (!checkName) {
                        getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
                        getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.GONE);
                        getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.GONE);
                        getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                    }
                }


            } else {

                if (!ContactsFragment.createContact) {

                    ((TextView) getActivity().findViewById(R.id.textExtractSocial2)).setText("Extract data");

                    ((TextView) getActivity().findViewById(R.id.nameAccount)).setText("");

                /*String usernameLink = "";
                int index2 = CreateFragment.nameContactExtractFromSocial.length();
                try {
                    if (extractEnumsToExtractContainer.equals(ExtractEnums.INSTAGRAM)) {
                        index2 = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                        usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index2 + 1, CreateFragment.nameContactExtractFromSocial.length() - 1);
                        index2 -= 2;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.VK)) {
                        index2 = allWayLink.indexOf(".com/");
                        usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.FACEBOOK)) {
                        index2 = allWayLink.lastIndexOf(".com/");
                        if (allWayLink.contains("people")) {
                            index2 = allWayLink.lastIndexOf("/");
                            usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                        } else {
                            usernameLink = allWayLink.toString().substring(index2 + 5, allWayLink.length());
                            if (usernameLink.contains("/")) {
                                usernameLink = usernameLink.substring(0, usernameLink.indexOf('/'));
                            }
                        }
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.LINKEDIN)) {
                        usernameLink = allWayLink;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.TWITTER)) {
                        usernameLink = allWayLink;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.YOUTUBE)) {
                        usernameLink = allWayLink;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.MEDIUM)) {
                        usernameLink = allWayLink;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.TUMBL)) {
                        usernameLink = allWayLink;
                    } else if (extractEnumsToExtractContainer.equals(ExtractEnums.G_SHEET)) {
                        usernameLink = allWayLink;
                    }
                    if (index2 < 0)
                        index2 = CreateFragment.nameContactExtractFromSocial.length();

                } catch (Exception e) {
                    e.printStackTrace();
                }*/


                    boolean checkName = false;

                    if (socialEnums.equals(SocialEnums.INSTAGRAM)) {

                        if (allWayLink.toLowerCase().contains("instagram.com") && allWayLink.contains("?")) {
                            int ind = allWayLink.indexOf('?');
                            if (ind != -1)
                                allWayLink = allWayLink.substring(0, ind);
                        }

                        System.out.println("LINK = " + allWayLink);

                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.INSTAGRAM, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);

                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.VISIBLE);

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());
                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }
                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.VK)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.VK, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.FACEBOOK)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.FACEBOOK, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }
                    if (socialEnums.equals(SocialEnums.TWITTER)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.TWITTER, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.YOUTUBE)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.YOUTUBE, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.MEDIUM)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.MEDIUM, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }

                    if (socialEnums.equals(SocialEnums.LINKEDIN)) {
                        Contact contact = ContactCacheService.find2(allWayLink, ClipboardEnum.LINKEDIN, getActivity());
                        if (contact != null) {

                            getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.GONE);
                            getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.VISIBLE);
                            //getActivity().findViewById(R.id.textExtractSocial2).setVisibility(View.VISIBLE);
                            ((TextView) getActivity().findViewById(R.id.nameContactExtractFind)).setText(contact.getName());

                            if (contact.getCompanyPossition() != null && !contact.getCompanyPossition().isEmpty()) {
                                getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);
                                //((TextView) getActivity().findViewById(R.id.CompanyPositionExtract)).setText(contact.getCompanyPossition());
                            }

                            getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.VISIBLE);
                            contactFindExtractSocial = contact;
                            checkName = true;

                        }
                    }


                    if (!checkName) {
                    /*getActivity().findViewById(R.id.textExtractSocial).setVisibility(View.VISIBLE);
                    getActivity().findViewById(R.id.nameContactExtractFind).setVisibility(View.GONE);
                    getActivity().findViewById(R.id.textDataExistsSocial).setVisibility(View.GONE);
                    getActivity().findViewById(R.id.CompanyPositionExtract).setVisibility(View.GONE);*/

                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                        floatingActionMenu.close(false);
                        floatingActionMenu.setVisibility(View.VISIBLE);
                    }
                } else {
                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                    floatingActionMenu.close(false);
                    floatingActionMenu.setVisibility(View.VISIBLE);
                }

                /*getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                floatingActionMenu.close(false);
                floatingActionMenu.setVisibility(View.VISIBLE);*/
            }

            super.onPostExecute(result);
            // mInfoTextView.setText("Р—Р°Р»РµР·");
        }

    }


}
