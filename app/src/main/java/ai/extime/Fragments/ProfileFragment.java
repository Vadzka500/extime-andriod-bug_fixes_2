package ai.extime.Fragments;


import android.animation.ArgbEvaluator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.FragmentManager;
import android.app.SearchManager;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.LayerDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.CardView;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;


import com.google.i18n.phonenumbers.NumberParseException;
import com.google.i18n.phonenumbers.PhoneNumberToCarrierMapper;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import com.ogaclejapan.smarttablayout.SmartTabLayout;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.sql.Time;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;

import ai.extime.Activity.MainActivity;
import ai.extime.Adapters.ClibpboardAdapter;
import ai.extime.Adapters.CompanyEditAdapter;
import ai.extime.Adapters.ContactNumberAdapter;
import ai.extime.Adapters.ContactNumberEditAdapter;
import ai.extime.Adapters.Contacts_company_preview_adapter;
import ai.extime.Adapters.CustomTagsAdapter;
import ai.extime.Adapters.DialogAdapter;
import ai.extime.Adapters.DialogDataContactSelect;
import ai.extime.Adapters.ExtratorAdapter;
import ai.extime.Adapters.HashtagMasstaggingAdapter;
import ai.extime.Adapters.MostUsedTagsAdapter;
import ai.extime.Adapters.PositionEditAdapter;
import ai.extime.Enums.ClipboardEnum;
import ai.extime.Enums.SocEnum;
import ai.extime.Events.AddContact;
import ai.extime.Events.AddHistoryEntry;
import ai.extime.Events.AnimColorMessenger;
import ai.extime.Events.NotifyAdapter;
import ai.extime.Events.PopupCompanyInProfile;
import ai.extime.Events.RemoveContact;
import ai.extime.Events.SaveChangesProfile;
import ai.extime.Events.SetMainProfile;
import ai.extime.Events.UpdateFile;
import ai.extime.Events.UpdateSearchMessengers;
import ai.extime.Interfaces.CompanySelectInterface;
import ai.extime.Interfaces.ContactBarInter;
import ai.extime.Interfaces.HashtagAddInterface;
import ai.extime.Interfaces.PopupsInter;
import ai.extime.Interfaces.Postman;
import ai.extime.Models.Clipboard;
import ai.extime.Models.Contact;
import ai.extime.Models.DataUpdate;
import ai.extime.Models.Extrator;
import ai.extime.Models.HashTag;
import ai.extime.Models.HashTagQuantity;
import ai.extime.Models.SocialModel;
import ai.extime.Services.ContactCacheService;
import ai.extime.Services.FabNotificationService;
import ai.extime.Utils.ClipboardType;

import ai.extime.Utils.ShareTemplatesMessageReply;
import ai.extime.Utils.SocialEq;
import de.hdodenhof.circleimageview.CircleImageView;
import io.realm.Realm;
import io.realm.RealmConfiguration;
import io.realm.RealmList;
import io.realm.RealmObject;
import ai.extime.Adapters.CompanyAdapter;
import ai.extime.Adapters.ContactAdapter;
import ai.extime.Adapters.ProfileSectionAdapter;
import ai.extime.Enums.ExtractEnums;
import ai.extime.Enums.SocialEnums;
import ai.extime.Events.PopupInProfile;
import ai.extime.Events.UpdateContactInProfile;
import ai.extime.Models.ContactInfo;

import com.extime.R;

import ai.extime.Services.ContactsService;

/**
 * Created by patal on 14.08.2017.
 */

public class ProfileFragment extends Fragment implements PopupsInter, ContactBarInter, HashtagAddInterface, CompanySelectInterface {

    public View mainView;
    private static final String CONTACT_EXTRA = "contact";
    private static final String CONTACT_EDIT = "editMode";
    private RecyclerView company_rv;
    private ContactNumberAdapter contactNumberAdapter;
    private ContactNumberEditAdapter contactNumberEditAdapter;
    private CompanyAdapter companyAdapter;
    public static Contact selectedContact;
    public FrameLayout popupProfileEdit;
    private ContactsService contactsService;
    private FrameLayout popupProfileEditPreview;
    private FrameLayout popupProfileEditPreviewSocial;
    private FrameLayout popupEditSocial;

    public Activity activityApp;
    public ContactAdapter adapterC;

    public SharedPreferences mPrefCompany;


    private Contact selConact;
    private FrameLayout frameSelectBar;
    public boolean hideSelect = true;
    private LinearLayout closePopups;
    private TextView companyContactsCount;
    private TextView companyCount;
    private ArrayList<View> openedViews = new ArrayList<>();
    private FrameLayout profilePopUp;
    private FrameLayout fastEditPopup;
    private FrameLayout remindPopup;
    String lastOpenedProfileId = "";
    private Contact selectedContactPopup;
    private ArrayList<Contact> listOfContacts;

    private SocialModel socialModel;
    public static boolean editModeChecker = false;
    FrameLayout popupUserHashtags;
    CustomTagsAdapter customTagsAdapter;
    FrameLayout socialPopup;
    FrameLayout popupContactsCompany;
    RecyclerView containerMost;
    RecyclerView containerAssistant;
    ContactProfileDataFragment contactProfileDataFragment;
    ScheduleFragmentClear scheduleFragmentClear;
    FilesConatct filesConatct;
    public CompanyProfileDataFragment companyProfileDataFragment;
    ContactTimelineDataFragment contactTimelineDataFragment;
    public CompanyContactsFragment companyContactsFragment;
    FrameLayout companyProfilePopup;
    //static FrameLayout cccc;
    private ProfileSectionAdapter sectionAdapter;
    private MostUsedTagsAdapter mostTagAdapter;
    private Menu profileMenu;
    public static boolean nowEdit = false;

    public FrameLayout popupHelpCompanyposition;

    public static boolean noPhone = false;

    public static boolean profile = false;

    public static boolean company = false;

    public boolean blur = false;


    ProfileSectionAdapter adapter;
    public FrameLayout popupCompaniesEdit = null;
    public FrameLayout popupPositionEdit = null;

    public static ProfileFragment newInstance(Contact contact, boolean edit) {
        Bundle args = new Bundle();
        args.putSerializable(CONTACT_EXTRA, contact);
        args.putBoolean(CONTACT_EDIT, edit);


        selectedContact = contact;
        //selectedContact = contact;


        ProfileFragment fragment = new ProfileFragment();
        fragment.setArguments(args);
        return fragment;
    }

    android.support.v4.app.FragmentManager fragmentManagerSetup;



    public void setupSectionPager() {
        ViewPager viewPager = (ViewPager) mainView.findViewById(R.id.viewpager);

        companyProfileDataFragment = new CompanyProfileDataFragment();
        contactProfileDataFragment = new ContactProfileDataFragment();
        scheduleFragmentClear = new ScheduleFragmentClear();
        filesConatct = new FilesConatct();


        Bundle args = new Bundle();
        args.putSerializable("selectedContact", selectedContact);
        contactProfileDataFragment.setArguments(args);
        companyProfileDataFragment.setArguments(args);
        scheduleFragmentClear.setArguments(args);
        filesConatct.setArguments(args);

        if (fragmentManagerSetup != null) {
            adapter = new ProfileSectionAdapter(fragmentManagerSetup);
        } else {
            adapter = new ProfileSectionAdapter(getChildFragmentManager());
        }

        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
            adapter.addFragment(contactProfileDataFragment, "Profile");
        else
            adapter.addFragment(companyProfileDataFragment, "Profile");

        //ContactsFragment.contactProfileDataFragment = this.contactProfileDataFragment;


        contactTimelineDataFragment = new ContactTimelineDataFragment();
        contactTimelineDataFragment.setArguments(args);
        adapter.addFragment(contactTimelineDataFragment, "Timeline");
        adapter.addFragment(scheduleFragmentClear, "Schedule");

        adapter.addFragment(filesConatct, "Files");

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
            companyContactsFragment = new CompanyContactsFragment();
            companyContactsFragment.setArguments(args);
            adapter.addFragment(companyContactsFragment, "Contacts");
        }

        viewPager.setAdapter(adapter);
        SmartTabLayout tabs = (SmartTabLayout) mainView.findViewById(R.id.result_tabs);
        //tabs.setCustomTabView(adapter);
        tabs.setViewPager(viewPager);

        mainView.findViewById(R.id.closerTabs).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                closeOtherPopup();
                contactProfileDataFragment.closeOtherPopup();
            }
        });




    }

   /* public void setupSectionPager2(){
        ViewPager viewPager = (ViewPager) mainView.findViewById(R.id.viewpager);
        // Set Tabs inside Toolbar

        companyProfileDataFragment = new CompanyProfileDataFragment();
        contactProfileDataFragment = new ContactProfileDataFragment();
        //    SelectContForDelete = selectedContact;
        Bundle args = new Bundle();
        args.putSerializable("selectedContact", selectedContact);
        contactProfileDataFragment.setArguments(args);
        companyProfileDataFragment.setArguments(args);
        adapter = new ProfileSectionAdapter(getChildFragmentManager());
        if(selectedContact.listOfContacts==null || selectedContact.listOfContacts.isEmpty())
            adapter.addFragment(contactProfileDataFragment  , "Profile");
        else
            adapter.addFragment(companyProfileDataFragment  , "Profile");

        //contactProfileDataFragment.setEditAdapter();

        contactTimelineDataFragment = new ContactTimelineDataFragment();
        contactTimelineDataFragment.setArguments(args);
        adapter.addFragment(contactTimelineDataFragment , "Timeline");
        adapter.addFragment(new ScheduleFragment(), "Schedule");
        //  adapter.addFragment(new PlacesFragment(), "Places");
        adapter.addFragment(new FilesFragment(), "Files");
        viewPager.setAdapter(adapter);
        SmartTabLayout  tabs = (SmartTabLayout) mainView.findViewById(R.id.result_tabs);
        tabs.setViewPager(viewPager);
        mainView.findViewById(R.id.closerTabs).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                closeOtherPopup();
                contactProfileDataFragment.closeOtherPopup();
            }
        });

    }*/


    @Override
    public void onDestroyView() {
        super.onDestroyView();
        closeOtherPopup();
    }


    private void initRecycler() {

        contactNumberAdapter = new ContactNumberAdapter(mainView.getContext(), selectedContact.listOfContactInfo, this, activityApp);

        closePopups.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupUserHashtags != null) {
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerMost.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                    popupUserHashtags.setVisibility(View.GONE);
                }
                contactProfileDataFragment.closeOtherPopup();
                closeOtherPopup();


                mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);

                if (contactTimelineDataFragment != null && contactTimelineDataFragment.popupMessage != null && contactTimelineDataFragment.popupMessage.getVisibility() == View.VISIBLE)
                    contactTimelineDataFragment.popupMessage.setVisibility(View.GONE);


                final String idCo = selectedContact.getIdContact();
                final long idC = selectedContact.getId();

                ++number_of_clicks[0];
                if (!thread_started[0]) {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            thread_started[0] = true;
                            try {
                                Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                if (number_of_clicks[0] == 1) {
                                    //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                } else if (number_of_clicks[0] == 2) {

                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                                if (mainView.findViewById(R.id.starImgProfile).getVisibility() == View.VISIBLE) {

                                                    mainView.findViewById(R.id.starImgProfile).setVisibility(View.INVISIBLE);

                                                    if (selectedContact.isFavorite) {
                                                        ContactCacheService.updateFavoriteContact(false, idC);
                                                        ContactsService.updateFaroviteContact(false, idCo, getContext());
                                                        ContactsFragment.UPD_FAV = true;
                                                        Toast.makeText(getContext(), "Deleted from Favorites", Toast.LENGTH_SHORT).show();
                                                    } else if (selectedContact.isImportant) {
                                                        ContactCacheService.updateImportantContact(false, idC);
                                                        ContactsFragment.UPD_IMP = true;
                                                        Toast.makeText(getContext(), "Deleted from Important", Toast.LENGTH_SHORT).show();
                                                    } else if (selectedContact.isFinished) {
                                                        ContactCacheService.updateFinishedContact(false, idC);
                                                        ContactsFragment.UPD_FIN = true;
                                                        Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                    } else if (selectedContact.isPause) {
                                                        ContactCacheService.updatePauseContact(false, idC);
                                                        ContactsFragment.UPD_PAUSE = true;
                                                        Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                    }else if (selectedContact.isCrown) {
                                                        ContactCacheService.updateCrownContact(false, idC);
                                                        ContactsFragment.UPD_CROWN = true;
                                                        Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();
                                                    }else if (selectedContact.isVip) {
                                                        ContactCacheService.updateVipContact(false, idC);
                                                        ContactsFragment.UPD_VIP = true;
                                                        Toast.makeText(getContext(), "Deleted from VIP", Toast.LENGTH_SHORT).show();
                                                    }else if (selectedContact.isStartup) {
                                                        ContactCacheService.updateStartupContact(false, idC);
                                                        ContactsFragment.UPD_STARTUP = true;
                                                        Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();
                                                    }else if (selectedContact.isInvestor) {
                                                        ContactCacheService.updateInvestorContact(false, idC);
                                                        ContactsFragment.UPD_INVESTOR = true;
                                                        Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();
                                                    }


                                                } else {
                                                    /*mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
                                                    ContactCacheService.updateFavoriteContact(true, idC);
                                                    ContactsService.updateFaroviteContact(true, idCo, getContext());
                                                    ContactsFragment.UPD_FAV = true;
                                                    Toast.makeText(getContext(), "Successfully added to Favorites", Toast.LENGTH_SHORT).show();*/


                                                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                                                    mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
                                                    ContactCacheService.updateFavoriteContact(true, idC);
                                                    ContactsService.updateFaroviteContact(true, idCo, getContext());

                                                    ContactsFragment.UPD_FAV = true;

                                                    Toast.makeText(getContext(), "Successfully added to Favorites", Toast.LENGTH_SHORT).show();

                                                    mainView.findViewById(R.id.starImgProfile).post(new Runnable() {
                                                        @Override
                                                        public void run() {
                                                            mainView.findViewById(R.id.starImgProfile).callOnClick();
                                                        }
                                                    });

                                                }

                                                //EventBus.getDefault().post(new UpdateFile());

                                            }
                                        }
                                    });

                                }
                                number_of_clicks[0] = 0;
                                thread_started[0] = false;
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }).start();
                }


            }
        });

        mainView.findViewById(R.id.closer).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupUserHashtags != null) {
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerMost.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                    popupUserHashtags.setVisibility(View.GONE);
                }

                if (popupProfileEditPreview.getVisibility() != View.INVISIBLE)
                    popupProfileEditPreview.setVisibility(View.GONE);
                if (openedViews.size() > 0) {
                    closeOtherPopup();
                    if (adapterC != null) {
                        companyAdapter.notifyDataSetChanged();
                    }
                }
            }
        });
    }

    private void updateHashTags() {
        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        if (selectedContact.getListOfHashtags() != null)
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {

                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                text.setText(hashTag.getHashTagValue() + " ");
                text.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        //   contactAdapter.searchByHashTagValue(hashTag.getHashTagValue());
                    }
                });
                //   text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
                text.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View v) {
                        deleteHashTagsFromUser(hashTag.getHashTagValue(), selectedContact);
                        return true;
                    }
                });


                containerHashTags.addView(text);
            }

        if (selectedContact != null && (selectedContact.getListOfHashtags() == null || selectedContact.getListOfHashtags().size() == 0)) {

            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.gray));
            text.setText("hashtags");
            text.setOnClickListener(v -> {
                //containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);
        }

        if (selectedContact.getListOfHashtags() == null || selectedContact.getListOfHashtags().size() == 0) {
           /* TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.gray));
            text.setText("hashtags");

            text.setOnClickListener(v -> {
                containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);*/
        }

        System.out.println("UPDATE HASH LIST");
    }

    @Override
    public void onResume() {
        super.onResume();
        ProfileFragment.profile = true;

        if (ContactsFragment.mergedContacts) {
            //       getActivity().findViewById(R.id.frame_select_bar).setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.select_menu).setVisibility(View.VISIBLE);
        }

        Toolbar mainToolBar = (Toolbar) getActivity().findViewById(R.id.main_toolbar);
        TextView cancel = (TextView) getActivity().findViewById(R.id.cancel_toolbar);


        if (CompanyAdapter.clickmerge) {

            getActivity().findViewById(R.id.select_menu).setVisibility(View.VISIBLE);
            companyProfileDataFragment.companyAdapter.notifyDataSetChanged();

        } else {
            updateHashTags();
        }


        //nowEdit = false; //new
        if (nowEdit && !company) {

            cancel.setVisibility(View.VISIBLE);
            mainToolBar.setNavigationIcon(null);

            if (profileMenu != null) {

                profileMenu.findItem(R.id.save_contact).setVisible(true);
                profileMenu.findItem(R.id.edit_contact).setVisible(false);

                profileMenu.findItem(R.id.menu_profile).setVisible(false);
                profileMenu.findItem(R.id.share_profile).setVisible(false);

                mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.GONE);
            }
        } else {

            cancel.setVisibility(View.GONE);

            if (profileMenu != null) {
                profileMenu.findItem(R.id.save_contact).setVisible(false);
                profileMenu.findItem(R.id.edit_contact).setVisible(false); //
            }

            mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);

        }

        if (!EventBus.getDefault().isRegistered(this)) EventBus.getDefault().register(this);

    }

    public ProfileFragment() {
    }

    public void addNoteToContact(String note) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                activityApp);
        alertDialogBuilder.setTitle("Do you want to add new info to contact?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {
                    System.out.println("ADD INFO TO CT");




                    Realm realm = Realm.getDefaultInstance(); //-

                    //   contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
                    //   contactNumberAdapter = new ContactNumberAdapter(mainView.getContext(), selectedContact.listOfContactInfo,this);


                    String[] splitNote = ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().split("/");
                    String noteLink = ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString();


                    String textMagic = ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString();


                    String mainWay = "";
                    if (textMagic.contains(".com/"))
                        mainWay = textMagic.substring(0, textMagic.indexOf(".com/") + 5);
                    else if (textMagic.contains(".org"))
                        mainWay = textMagic.substring(0, textMagic.indexOf(".org") + 4);
                    else  if (textMagic.contains(".com"))
                        mainWay = textMagic.substring(0, textMagic.indexOf(".com") + 4);



                   /* else if((mainWay.toLowerCase().equals("facebook.com") || mainWay.toLowerCase().equals("https://facebook.com")) || (mainWay.toLowerCase().equals("vk.com")||mainWay.toLowerCase().equals("https://vk.com")) || (mainWay.toLowerCase().equals("linkedin.com")|| mainWay.toLowerCase().equals("https://www.linkedin.com")) || (mainWay.toLowerCase().equals("instagram.com") || mainWay.toLowerCase().equals("https://www.instagram.com")) || (mainWay.toLowerCase().equals("viber.com") || mainWay.toLowerCase().equals("https://www.viber.com")) || (mainWay.toLowerCase().equals("whatsapp.com") || mainWay.toLowerCase().equals("https://www.whatsapp.com"))  || (mainWay.toLowerCase().equals("telegram.org") || mainWay.toLowerCase().equals("https://telegram.org")) || (mainWay.toLowerCase().equals("skype.com") || mainWay.toLowerCase().equals("https://www.skype.com"))){
                        if(mainWay.length() <textMagic.length()) {


                        }*/


                    if (selectedContact.getSocialModel() == null) {
                        realm.beginTransaction();
                        RealmObject realmObj = realm.createObject(SocialModel.class);
                        selectedContact.setSocialModel((SocialModel) realmObj);
                        realm.commitTransaction();

                    }


                    boolean socialCheck = true;

                    if (ClipboardType.isFacebook(textMagic)) {

                        if (SocialEq.checkFacebookSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getFacebookLink() != null && !selectedContact.getSocialModel().getFacebookLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;

                        } else {

                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getFacebookLink() != null && !selectedContact.getSocialModel().getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getFacebookLink());
                                }

                            if (noteLink.contains("?") && !noteLink.contains("watch?") && !noteLink.contains("?id") && !noteLink.contains("?v")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            realm.beginTransaction();
                            selectedContact.getSocialModel().setFacebookLink(noteLink);


                            Drawable color = new ColorDrawable(Color.parseColor("#475993"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                            // ((ImageView) mainView.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            selectedContact.hasFacebook = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getFacebookLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            initIconColor(selectedContact, mainView);
                            //  EventBus.getDefault().post(new UpdateFile());
                            socialCheck = false;
                        }

                    } else if (ClipboardType.isVk(textMagic)) {
                        if (SocialEq.checkVkSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getVkLink() != null && !selectedContact.getSocialModel().getVkLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;

                        } else {

                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getVkLink() != null && !selectedContact.getSocialModel().getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getVkLink());
                                }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            realm.beginTransaction();
                            selectedContact.getSocialModel().setVkLink(noteLink);


                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable color = new ColorDrawable(Color.parseColor("#507299"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            selectedContact.hasVk = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getVkLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    } else if (ClipboardType.isLinkedIn(textMagic)) {
                        if (SocialEq.checkLinkedInSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getLinkedInLink() != null && !selectedContact.getSocialModel().getLinkedInLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;

                        } else {

                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getLinkedInLink() != null && !selectedContact.getSocialModel().getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getLinkedInLink());
                                }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            realm.beginTransaction();
                            selectedContact.getSocialModel().setLinkedInLink(noteLink);
                            // ((ImageView) mainView.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);

                            Drawable color = new ColorDrawable(Color.parseColor("#0077B7"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.link_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                            selectedContact.hasLinked = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getLinkedInLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    }


                    if (mainWay.length() > 1 && mainWay.length() < textMagic.length()) {
                        // realm.beginTransaction();
                        switch (mainWay.toLowerCase()) {
                            case "viber.com":
                            case "https://www.viber.com": {

                                if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getViberLink() != null && selectedContact.getSocialModel().getViberLink().equals(noteLink)) {
                                    Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                                    return;
                                }

                                realm.beginTransaction();
                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    if (selectedContact.getSocialModel().getViberLink() != null && !selectedContact.getSocialModel().getViberLink().isEmpty()) {
                                        contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getViberLink());
                                    }

                                selectedContact.getSocialModel().setViberLink(noteLink);
                                // ((ImageView) mainView.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);

                                Drawable color = new ColorDrawable(Color.parseColor("#6F3FAA"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((CircleImageView) mainView.findViewById(R.id.viber_icon)).setImageDrawable(ld);

                                if (socialPopup != null)
                                    ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                selectedContact.hasViber = true;
                                realm.commitTransaction();
                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getViberLink(), selectedContact.getName());
                                ContactCacheService.updateContact(selectedContact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                socialCheck = false;
                                break;
                            }
                            case "whatsapp.com":
                            case "https://www.whatsapp.com": {

                                if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getWhatsappLink() != null && selectedContact.getSocialModel().getWhatsappLink().equals(noteLink)) {
                                    Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                                    return;
                                }

                                realm.beginTransaction();

                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    if (selectedContact.getSocialModel().getWhatsappLink() != null && !selectedContact.getSocialModel().getWhatsappLink().isEmpty()) {
                                        contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getWhatsappLink());
                                    }

                                selectedContact.getSocialModel().setWhatsappLink(noteLink);
                                //   ((ImageView) mainView.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);

                                Drawable color = new ColorDrawable(Color.parseColor("#75B73B"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((CircleImageView) mainView.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);

                                if (socialPopup != null)
                                    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                selectedContact.hasWhatsapp = true;
                                realm.commitTransaction();
                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getWhatsappLink(), selectedContact.getName());
                                ContactCacheService.updateContact(selectedContact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                socialCheck = false;
                                break;
                            }
                            case "skype.com":
                            case "https://www.skype.com": {

                                if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getSkypeLink() != null && selectedContact.getSocialModel().getSkypeLink().equals(noteLink)) {
                                    Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                                    return;
                                }

                                realm.beginTransaction();

                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    if (selectedContact.getSocialModel().getSkypeLink() != null && !selectedContact.getSocialModel().getSkypeLink().isEmpty()) {
                                        contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getSkypeLink());
                                    }

                                String username = noteLink.substring(noteLink.indexOf(".com") + 5, noteLink.length());
                                if (username.charAt(username.length() - 1) == '/')
                                    username = username.substring(0, username.length() - 1);


                                selectedContact.getSocialModel().setSkypeLink(username);
                                //  ((ImageView) mainView.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);

                                Drawable color = new ColorDrawable(Color.parseColor("#1eb8ff"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((CircleImageView) mainView.findViewById(R.id.skype_icon)).setImageDrawable(ld);

                                if (socialPopup != null)
                                    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                selectedContact.hasSkype = true;
                                realm.commitTransaction();
                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                    contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getSkypeLink(), selectedContact.getName());
                                ContactCacheService.updateContact(selectedContact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                socialCheck = false;
                                break;
                            }
                        }
                        //  realm.commitTransaction();
                    }

                    if (ClipboardType.isInsta(noteLink)) {
                        if (SocialEq.checkInstaSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }

                        if (noteLink.contains("?utm")) {
                            int ind = noteLink.indexOf('?');
                            if (ind != -1)
                                noteLink = noteLink.substring(0, ind);

                        }
                        if (noteLink.charAt(noteLink.length() - 1) == '/') {
                            noteLink = noteLink.substring(0, noteLink.length() - 1);
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getInstagramLink() != null && !selectedContact.getSocialModel().getInstagramLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;

                        } else socialCheck = false;

                        if (!socialCheck) {
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getInstagramLink() != null && !selectedContact.getSocialModel().getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getInstagramLink());
                                }

                            realm.beginTransaction();

                                /*String username = noteLink.substring(noteLink.indexOf(".com")+5, noteLink.length());
                                if(username.charAt(username.length()-1) == '/')
                                    username = username.substring(0,username.length()-1);
                                System.out.println("USERNAME INSTA = "+username);*/

                            if (noteLink.contains("?utm")) {
                                int ind = noteLink.indexOf('?');
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);

                            }

                            if (noteLink.charAt(noteLink.length() - 1) == '/') {
                                noteLink = noteLink.substring(0, noteLink.length() - 1);
                            }

                            if (!noteLink.toLowerCase().contains("instagram.com")) {
                                noteLink = "https://instagram.com/" + noteLink;
                            }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }


                            selectedContact.getSocialModel().setInstagramLink(noteLink);
                            // ((ImageView) mainView.findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);

                            Drawable color = new ColorDrawable(Color.parseColor("#8a3ab9"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.inst_icon)).setImageDrawable(ld);
                            try {
                                if (socialPopup != null)
                                    ((ImageView) socialPopup.findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                            } catch (Exception e) {

                            }
                            selectedContact.hasInst = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), noteLink, selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    } else if (ClipboardType.isTwitter(noteLink)) {
                        if (SocialEq.checkTwitterSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;
                        } else socialCheck = false;

                        if (!socialCheck) {
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTwitterLink());
                                }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            realm.beginTransaction();
                            selectedContact.getSocialModel().setTwitterLink(noteLink);


                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld);
                            selectedContact.hasTwitter = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTwitterLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    } else if (ClipboardType.isYoutube(noteLink) && (note.contains("user") || note.contains("chennel"))) {
                        if (SocialEq.checkYoutubeSocial(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getYoutubeLink() != null && !selectedContact.getSocialModel().getYoutubeLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;
                        } else socialCheck = false;

                        if (!socialCheck) {
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getYoutubeLink() != null && !selectedContact.getSocialModel().getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getYoutubeLink());
                                }

                            realm.beginTransaction();

                            if (noteLink.contains("?uid")) {
                                int ind = noteLink.indexOf('?');
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);

                            }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            selectedContact.getSocialModel().setYoutubeLink(noteLink);


                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable color = new ColorDrawable(Color.parseColor("#ed2524"));
                            Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld);
                            selectedContact.hasYoutube = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getYoutubeLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    } else if (ClipboardType.isGitHub(noteLink)) {
                        /*if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getTwitterLink() != null && selectedContact.getSocialModel().getTwitterLink().equals(noteLink)) {
                            Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }*/


                        /*if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;
                        } else socialCheck = false;*/

                        /*if (!socialCheck) {*/
                            /*if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTwitterLink());
                                }*/

                           /* realm.beginTransaction();
                            //selectedContact.getSocialModel().setTwitterLink(noteLink);


                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld);
                            selectedContact.hasTwitter = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTwitterLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());*/
                        // EventBus.getDefault().post(new UpdateFile());
                        //socialCheck = false;
                        socialCheck = true;
                        //  }
                    } else if (ClipboardType.is_Tumblr(noteLink)) {
                        socialCheck = true;
                    } else if (ClipboardType.isG_Sheet(noteLink)) {
                        socialCheck = true;
                    } else if (ClipboardType.isG_Doc(noteLink)) {
                        socialCheck = true;
                    } else if (ClipboardType.is_Angel(noteLink)) {
                        socialCheck = true;
                    } else if (ClipboardType.isMedium(noteLink) && note.contains("com/@")) {
                        if (SocialEq.checkMediumSocail(SocialEq.getSub(noteLink), selectedContact)) {
                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getMediumLink() != null && !selectedContact.getSocialModel().getMediumLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;
                        } else socialCheck = false;

                        if (!socialCheck) {
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getMediumLink() != null && !selectedContact.getSocialModel().getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getMediumLink());
                                }

                            realm.beginTransaction();

                            if (noteLink.contains("?uid")) {
                                int ind = noteLink.indexOf('?');
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);

                            }
                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            selectedContact.getSocialModel().setMediumLink(noteLink);


                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable color = new ColorDrawable(Color.parseColor("#000000"));
                            Drawable image = getResources().getDrawable(R.drawable.medium_white);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            //((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld);
                            selectedContact.hasMedium = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getMediumLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            initIconColor(selectedContact, mainView);
                            socialCheck = false;
                        }
                    } else if (ClipboardType.isTelegram(noteLink)) {


                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getTelegramLink() != null && selectedContact.getSocialModel().getTelegramLink().equals(noteLink)) {
                            Toast.makeText(getActivity(), "Data already exists", Toast.LENGTH_SHORT).show();
                            return;
                        }

                        if (selectedContact.getSocialModel() != null && selectedContact.getSocialModel().getTelegramLink() != null && !selectedContact.getSocialModel().getTelegramLink().isEmpty() && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                            socialCheck = true;

                        }
                        if (!socialCheck) {
                            realm.beginTransaction();

                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                if (selectedContact.getSocialModel().getTelegramLink() != null && !selectedContact.getSocialModel().getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTelegramLink());
                                }

                            if (noteLink.contains("?") && !noteLink.contains("watch?")) {
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }

                            selectedContact.getSocialModel().setTelegramLink(noteLink);
                            //   ((ImageView) mainView.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);

                            Drawable color = new ColorDrawable(Color.parseColor("#7AA5DA"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((CircleImageView) mainView.findViewById(R.id.telegram_icon)).setImageDrawable(ld);

                            if (socialPopup != null)
                                ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                            selectedContact.hasTelegram = true;
                            realm.commitTransaction();
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                contactsService.addNoteToContact(selectedContact.getIdContact(), selectedContact.getSocialModel().getTelegramLink(), selectedContact.getName());
                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            socialCheck = false;
                        }

                    }

                    if (socialCheck) {

                        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty() && ClipboardType.isWeb(note.trim())) {


                            /*if(noteLink.contains("?") && !noteLink.contains("watch?")){
                                int ind = noteLink.indexOf("?");
                                if (ind != -1)
                                    noteLink = noteLink.substring(0, ind);
                            }*/

                            realm.beginTransaction();
                            if (selectedContact.webSite == null || selectedContact.webSite.isEmpty())
                                selectedContact.webSite = note.trim();
                            else if (!selectedContact.webSite.equalsIgnoreCase(note.trim())) {
                                if (selectedContact.getListOfContactInfo() == null || selectedContact.getListOfContactInfo().isEmpty())
                                    selectedContact.addNote(note.trim());
                                else {
                                    boolean checK_C = true;
                                    for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                        if (ci.value.equalsIgnoreCase(note.trim())) {
                                            Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                                            checK_C = false;
                                            break;
                                        }
                                    }
                                    if (checK_C) {
                                        selectedContact.addNote(note.trim());
                                    }
                                }
                            }

                            initViews();
                            realm.commitTransaction();

                            companyProfileDataFragment.companyAdapter.updateNEw();
                            companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                        }
                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                            System.out.println("ADD NOTES");

                            String noteLinkfinal = note;

                           /* if (ClipboardType.isWeb(noteLinkfinal.trim())) {
                                if (noteLinkfinal.contains("?") && !noteLinkfinal.contains("watch?")) {
                                    int ind = noteLinkfinal.indexOf("?");
                                    if (ind != -1)
                                        noteLinkfinal = noteLinkfinal.substring(0, ind);
                                }
                            }*/



                            realm.beginTransaction();
                            String nn = noteLinkfinal;
                            if (nn != null && !nn.equals("")) {
                                boolean checkExist = false;
                                for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                                    if ((SocialEq.isSocial(noteLinkfinal.trim()) && SocialEq.checkStrSocials(contactInfo.value, noteLinkfinal.trim())) || contactInfo.value.trim().equalsIgnoreCase(nn.toString()))
                                        checkExist = true;
                                }
                                if (!checkExist) {
                                    selectedContact.addNote(noteLinkfinal);
                                    contactsService.addNoteToContact(selectedContact.getIdContact(), noteLinkfinal.trim(), selectedContact.getName());
                                }else
                                    Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                            }

                            realm.commitTransaction();

                            ContactCacheService.updateContact(selectedContact, mainView.getContext());
                        }
                    }
                    if (socialPopup != null && socialPopup.getVisibility() == View.VISIBLE) {
                        showSocialPopup(selectedContact);
                    }
                    ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().clear();




                    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                        try {


                            if (contactProfileDataFragment.contactNumberAdapter != null) {
                                contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
                            }else if (contactProfileDataFragment.contactNumberEditAdapter != null) {
                                contactProfileDataFragment.contactNumberEditAdapter.updateList(selectedContact.listOfContactInfo);
                            }else setupSectionPager();

                        } catch (NullPointerException e) {

                            setupSectionPager();
                        }
                    //contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);

                    realm.close();

                    //EventBus.getDefault().post(new UpdateFile());

                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }


    @SuppressLint("ValidFragment")
    public ProfileFragment(Contact s) {
        selectedContact = s;
    }

    public void addPhoneToContact(String phone) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                activityApp);
        alertDialogBuilder.setTitle("Do you want to add new info to contact?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {

                    //String nn = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString();
                    boolean checkExist = false;
                    if (phone != null && !phone.equals("")) {

                        String phone_clear = phone.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");

                        for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                            if (ClipboardType.isPhone(contactInfo.value)) {

                                String phone_c = contactInfo.value.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                                if (phone_c.equalsIgnoreCase(phone_clear)) {
                                    checkExist = true;
                                }

                            }
                        }
                    }



                    if (checkExist)
                        Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                        //selectedContact.addNote(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString());
                    else {
                        //String idcontact = contactsService.getIdContactByName(selectedContact.getName());
                        if (ProfileFragment.noPhone) {

                            contactsService.updatePhone(selectedContact.getIdContact(), "+000000000000", phone);

                        } else
                            contactsService.addPhoneToContact(selectedContact.getIdContact(), phone, selectedContact.getName());


                        Realm realm = Realm.getDefaultInstance(); //+


                        if (ProfileFragment.noPhone) {
                            for (int i = 0; i < selectedContact.listOfContactInfo.size(); i++) {
                                if (selectedContact.listOfContactInfo.get(i).value.toString().equals("+000000000000")) {
                                    realm.beginTransaction();
                                    selectedContact.listOfContactInfo.get(i).value = ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim();
                                    realm.commitTransaction();
                                    //contactsService.updatePhone();
                                }
                            }
                        } else {
                            realm.beginTransaction();
                            selectedContact.addPhone(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim());
                            realm.commitTransaction();
                            //contactsService.addPhoneToContact(selectedContact.getIdContact(),((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString());
                        }

                        realm.close();
                        ContactCacheService.updateContact(selectedContact, mainView.getContext());


                        //EventBus.getDefault().post(new UpdateFile());

                        contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
                        if (contactProfileDataFragment.contactNumberEditAdapter != null)
                            contactProfileDataFragment.contactNumberEditAdapter.updateList(selectedContact.listOfContactInfo);

                        ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().clear();

                        if (ProfileFragment.noPhone)
                            noPhone = false;

                        ContactProfileDataFragment.checkRealPhone = true;
                    }

                    if(selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()){
                        updateEmail_Phone();
                    }
                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }

    public void addMailToContact(String mail) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                activityApp);
        alertDialogBuilder.setTitle("Do you want to add new info to contact?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {

                    boolean checkExist = false;
                    if (mail != null && !mail.equals("")) {

                        if (selectedContact.listOfContactInfo != null)
                            for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                                if (contactInfo.value.equalsIgnoreCase(mail.toString()))
                                    checkExist = true;
                            }


                    }
                    if (checkExist)
                        Toast.makeText(activityApp, "Data already exists", Toast.LENGTH_SHORT).show();
                        //selectedContact.addNote(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString());
                    else {

                        //contactsService.addMailToContact(selectedContact.getIdContact(), mail);


                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();

                        selectedContact.addEmail(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString());
                        realm.commitTransaction();
                        realm.close();
                        initViews();

                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            contactsService.addMailToContact(selectedContact.getIdContact(), ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString(), selectedContact.getName());

                        ContactCacheService.updateContact(selectedContact, mainView.getContext());


                        //EventBus.getDefault().post(new UpdateFile());
                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                            contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
                            if (contactProfileDataFragment.contactNumberEditAdapter != null)
                                contactProfileDataFragment.contactNumberEditAdapter.updateList(selectedContact.listOfContactInfo);
                        } else {
                            companyProfileDataFragment.companyAdapter.updateNEw();
                            companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                        }

                        ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().clear();
                    }

                    contactTimelineDataFragment.checkEmail();

                    if(selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()){
                        updateEmail_Phone();
                    }

                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }

    private void addHashtagsToProfile(ArrayList<String> hashtags) {

        String addHashtags = "";

        for (HashTag hashTag : selectedContact.getListOfHashtags()) {
            for (int indexI = 0; indexI < hashtags.size(); indexI++) {
                String hashtag = hashtags.get(indexI).toLowerCase();
                if (hashTag.getHashTagValue().compareTo(hashtag) == 0) {
                    hashtags.remove(hashtag);
                    Toast.makeText(mainView.getContext(), "Hashtag " + hashtag + " already exist", Toast.LENGTH_SHORT).show();
                }
            }
        }

        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                activityApp);
        alertDialogBuilder.setTitle("Do you want to add hashtags to contact?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {


                    Realm realm = Realm.getDefaultInstance(); //-

                    if (customTagsAdapter != null)
                        customTagsAdapter.addHashTags(hashtags);

                    LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
                    HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);
                    if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                    for (String hashtag : hashtags) {
                        TextView text = new TextView(activityApp);
                        text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                        DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                        text.setLayoutParams(new LinearLayout.LayoutParams(
                                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                        text.setTextColor(getResources().getColor(R.color.colorPrimary));
                        text.setText(hashtag.toLowerCase().trim() + " ");


                        containerHashTags.addView(text);
                        realm.beginTransaction();
                        selectedContact.getListOfHashtags().add(new HashTag(hashtag.trim().toLowerCase()));
                        realm.commitTransaction();

                        contactsService.addNoteToContact(selectedContact.getIdContact(), hashtag.trim().toLowerCase().toString(), selectedContact.getName());
                    }
                    realm.close();

                    scrollView.addView(containerHashTags);
                    scrollView.setSmoothScrollingEnabled(false);
                    scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                    scrollView.setSmoothScrollingEnabled(true);
                    ContactCacheService.updateContact(selectedContact, mainView.getContext());
                    //EventBus.getDefault().post(new UpdateFile());

                    MainActivity.typeUpdate = "EDIT";
                    MainActivity.nameToUpd.clear();
                    MainActivity.nameToUpdTypeContact.clear();
                    MainActivity.nameToUpd.add(selectedContact.getName());
                    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                        MainActivity.nameToUpdTypeContact.add(true);
                    else
                        MainActivity.nameToUpdTypeContact.add(false);

                    //EventBus.getDefault().post(new UpdateFile());

                    updateHashTags();

                    adapterC.getContactFragment().initRecyclerHashTags();

                    Toast.makeText(mainView.getContext(), "Hashtags successfully added", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }

    public void upd() {
        initContact_companyPopup(selectedContact, mainView);
    }


    private void addHashtagToProfile(String hashtag) {


        for (HashTag hashTag : selectedContact.getListOfHashtags()) {
            if (hashTag.getHashTagValue().trim().compareTo(hashtag.trim().toLowerCase()) == 0) {
                Toast.makeText(mainView.getContext(), "Hashtag already exist", Toast.LENGTH_SHORT).show();
                return;
            }

        }
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                activityApp);
        alertDialogBuilder.setTitle("Do you want to add hashtag " + hashtag.trim().toLowerCase() + " to contact?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {
                    if (customTagsAdapter != null)
                        customTagsAdapter.addHashTag(hashtag.toLowerCase().trim());


                    Realm realm = Realm.getDefaultInstance(); //-

                    LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
                    TextView text = new TextView(getActivity());
                    text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                    DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                    text.setLayoutParams(new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                    text.setTextColor(getResources().getColor(R.color.colorPrimary));
                    text.setText(hashtag.trim().toLowerCase() + " ");


                    containerHashTags.addView(text);
                    realm.beginTransaction();
                    selectedContact.getListOfHashtags().add(new HashTag(hashtag.trim().toLowerCase()));
                    realm.commitTransaction();
                    realm.close();

                    contactsService.addNoteToContact(selectedContact.getIdContact(), hashtag.toString().toLowerCase().trim(), selectedContact.getName());

                    MainActivity.typeUpdate = "EDIT";
                    MainActivity.nameToUpd.clear();
                    MainActivity.nameToUpd.add(selectedContact.getName());
                    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                        MainActivity.nameToUpdTypeContact.add(true);
                    else
                        MainActivity.nameToUpdTypeContact.add(false);


                    ContactCacheService.updateContact(selectedContact, mainView.getContext());
                    //EventBus.getDefault().post(new UpdateFile());
                    HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);
                    if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                    scrollView.addView(containerHashTags);
                    scrollView.setSmoothScrollingEnabled(false);
                    scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                    scrollView.setSmoothScrollingEnabled(true);
                    //contactAdapter.getContactFragment().initRecyclerHashTags();

                    if (adapterC != null && adapterC.getContactFragment() != null)
                        adapterC.getContactFragment().initRecyclerHashTags();
                    updateHashTags();

                    Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("No", (dialog, id) -> dialog.cancel());

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }


    public void intentEmail(String str) {
        Intent emailIntent = new Intent(Intent.ACTION_SENDTO);
        emailIntent.setData(Uri.parse("mailto:" + str));
        startActivity(Intent.createChooser(emailIntent, "Send email"));
    }


    public void intentPhone(String str) {
        startActivity(new Intent(Intent.ACTION_DIAL, Uri.fromParts("tel", str, null)));
    }


    public Contact getMainContact() {
        return selConact;
    }

    public Thread thread, thread2;

    public int[] number_of_clicks = {0};
    public boolean[] thread_started = {false};
    public int DELAY_BETWEEN_CLICKS_IN_MILLISECONDS = 250;



    public void updateEmail_Phone(){

        int count_phone = 0;
        int count_email = 0;
        if (selectedContact.getListOfContactInfo() != null) {
            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                if (contactInfo.isEmail) count_email++;
                else if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    count_phone++;
            }

            if (count_phone != 0) {
                mainView.findViewById(R.id.card_phone_contact).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.text_phone_card)).setText(String.valueOf(count_phone));
                mainView.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                mainView.findViewById(R.id.card_phone_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        boolean findPrimary = false;
                        for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                            if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000") && contactInfo.isPrimary) {
                                intentPhone(contactInfo.value);
                                findPrimary = true;
                                break;
                            }
                        }

                        if (!findPrimary) {
                            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000")) {
                                    intentPhone(contactInfo.value);
                                    break;
                                }
                            }
                        }
                    }
                });

            } else mainView.findViewById(R.id.card_phone_contact).setVisibility(View.GONE);


            if (count_email != 0) {
                mainView.findViewById(R.id.email_contact).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.text_email_card)).setText(String.valueOf(count_email));
                mainView.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                mainView.findViewById(R.id.email_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        boolean findPrimary = false;
                        for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                            if (contactInfo.isEmail && contactInfo.isPrimary) {
                                //intentEmail(contactInfo.value);
                                //ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, finalSendTo, finalSendToName, finalReplyFrom, message, ContactTimelineDataFragment.this, true);


                                SharedPreferences mSettings;
                                mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                Set<String> set = mSettings.getStringSet("accounts", null);

                                String finalReplyFrom = null;

                                if (set != null && !set.isEmpty()) {

                                    for (String s : set) {
                                        finalReplyFrom = s;
                                        break;
                                    }

                                }

                                if (finalReplyFrom == null) {



                                  /*  String senderName = "";
                                    if (clipboards.get(position).getListContactsSearch() != null && !clipboards.get(position).getListContactsSearch().isEmpty() && clipboards.get(position).getListContactsSearch().get(0) != null) {
                                        senderName = clipboards.get(position).getListContactsSearch().get(0).getName();
                                    }*/
                                    //====================================

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add( contactInfo.value);
                                    sName.add(selectedContact.getName());

                                    ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);



                                   /* try {
                                        Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                    } catch (NullPointerException e) {
                                        e.printStackTrace();
                                    }

                                    return;*/
                                    break;
                                }else {

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add( contactInfo.value);
                                    sName.add(selectedContact.getName());


                                    ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                    findPrimary = true;
                                }
                                break;
                            }
                        }

                        if (!findPrimary) {
                            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                                if (contactInfo.isEmail) {
                                    //intentEmail(contactInfo.value);

                                    SharedPreferences mSettings;
                                    mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                    Set<String> set = mSettings.getStringSet("accounts", null);

                                    String finalReplyFrom = null;

                                    if (set != null && !set.isEmpty()) {

                                        for (String s : set) {
                                            finalReplyFrom = s;
                                            break;
                                        }

                                    }

                                    if (finalReplyFrom == null) {

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add( contactInfo.value);
                                        sName.add(selectedContact.getName());

                                        ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                      /*  try {
                                            Toast.makeText(getContext(), "Choose account", Toast.LENGTH_SHORT).show();
                                        } catch (NullPointerException e) {
                                            e.printStackTrace();
                                        }

                                        return;*/
                                        break;
                                    }else {

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add( contactInfo.value);
                                        sName.add(selectedContact.getName());

                                        ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                    }


                                    break;
                                }
                            }
                        }

                    }
                });

            } else mainView.findViewById(R.id.email_contact).setVisibility(View.GONE);
        }
    }


    private void initViews() {

        //((ImageView) mainView.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);


        ((View) mainView.findViewById(R.id.lineNameProfile)).setVisibility(View.GONE);
        ((View) mainView.findViewById(R.id.lineCompanyProfile)).setVisibility(View.GONE);
        ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setVisibility(View.GONE);

        ((View) mainView.findViewById(R.id.positionVileEditPreview)).setVisibility(View.GONE);

        ((View) mainView.findViewById(R.id.lineHashProfile)).setVisibility(View.GONE);

        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);


        mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);



        try {
            Calendar current = Calendar.getInstance();
            Calendar contactDate = Calendar.getInstance();
            current.setTime(new Date());
            contactDate.setTime(selectedContact.getDateCreate());
            String timeStr = "";
            if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && current.get(Calendar.MONTH) == contactDate.get(Calendar.MONTH) && current.get(Calendar.DAY_OF_MONTH) == contactDate.get(Calendar.DAY_OF_MONTH)) {

                timeStr = Time.valueOf(selectedContact.time).getHours() + ":";
                if (Time.valueOf(selectedContact.time).getMinutes() < 10) timeStr += "0";
                timeStr += Time.valueOf(selectedContact.time).getMinutes();
            } else if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && (current.get(Calendar.MONTH) != contactDate.get(Calendar.MONTH) || current.get(Calendar.DAY_OF_MONTH) != contactDate.get(Calendar.DAY_OF_MONTH))) {


                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + contactDate.get(Calendar.DAY_OF_MONTH);
            } else {

                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + String.valueOf(contactDate.get(Calendar.YEAR))/*.substring(2)*/;

            }


            ((TextView)mainView.findViewById(R.id.cardTime)).setText(/*getUpdTime(contact.getDateCreate(), Time.valueOf(contact.time))*/ timeStr);
        } catch (Exception e) {
            System.out.println("ERROR TO GET TIME Contact Adapter");
        }




        int count_phone = 0;
        int count_email = 0;
        if (selectedContact.getListOfContactInfo() != null) {
            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                if (contactInfo.isEmail) count_email++;
                else if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    count_phone++;
            }

            if (count_phone != 0) {
                mainView.findViewById(R.id.card_phone_contact).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.text_phone_card)).setText(String.valueOf(count_phone));
                mainView.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                mainView.findViewById(R.id.card_phone_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        int count_E = 0;

                        ArrayList<ContactInfo> listEmails = new ArrayList<>();

                        for(ContactInfo i : selectedContact.getListOfContactInfo()){
                            if(i.isPhone) {
                                count_E++;
                                listEmails.add(i);
                            }
                        }

                        if(count_E == 1) {

                            boolean findPrimary = false;
                            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000") && contactInfo.isPrimary) {
                                    intentPhone(contactInfo.value);
                                    findPrimary = true;
                                    break;
                                }
                            }

                            if (!findPrimary) {
                                for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                                    if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000")) {
                                        intentPhone(contactInfo.value);
                                        break;
                                    }
                                }
                            }

                        }else{
                            openDialodDataProfile(listEmails);
                        }


                    }
                });

            } else mainView.findViewById(R.id.card_phone_contact).setVisibility(View.GONE);


            if (count_email != 0) {
                mainView.findViewById(R.id.email_contact).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.text_email_card)).setText(String.valueOf(count_email));
                mainView.findViewById(R.id.linear_card_phone_email).setVisibility(View.VISIBLE);

                mainView.findViewById(R.id.email_contact).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        int count_E = 0;

                        ArrayList<ContactInfo> listEmails = new ArrayList<>();

                        for(ContactInfo i : selectedContact.getListOfContactInfo()){
                            if(i.isEmail) {
                                count_E++;
                                listEmails.add(i);
                            }
                        }

                        if(count_E == 1) {

                        boolean findPrimary = false;
                        for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                            if (contactInfo.isEmail && contactInfo.isPrimary) {

                                SharedPreferences mSettings;
                                mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                Set<String> set = mSettings.getStringSet("accounts", null);

                                String finalReplyFrom = null;

                                if (set != null && !set.isEmpty()) {

                                    for (String s : set) {
                                        finalReplyFrom = s;
                                        break;
                                    }

                                }

                                if (finalReplyFrom == null) {

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add( contactInfo.value);
                                    sName.add(selectedContact.getName());

                                    ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                    break;
                                }else {
                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add( contactInfo.value);
                                    sName.add(selectedContact.getName());

                                    ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                    findPrimary = true;

                                }

                                break;
                            }
                        }

                        if (!findPrimary) {
                            for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {
                                if (contactInfo.isEmail) {

                                    SharedPreferences mSettings;
                                    mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                                    Set<String> set = mSettings.getStringSet("accounts", null);

                                    String finalReplyFrom = null;

                                    if (set != null && !set.isEmpty()) {

                                        for (String s : set) {
                                            finalReplyFrom = s;
                                            break;
                                        }

                                    }

                                    if (finalReplyFrom == null) {

                                        ArrayList<String> sTo = new ArrayList<>();
                                        ArrayList<String> sName = new ArrayList<>();

                                        sTo.add( contactInfo.value);
                                        sName.add(selectedContact.getName());

                                        ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);

                                        break;
                                    }

                                    ArrayList<String> sTo = new ArrayList<>();
                                    ArrayList<String> sName = new ArrayList<>();

                                    sTo.add( contactInfo.value);
                                    sName.add(selectedContact.getName());

                                    ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                                    break;
                                }
                            }
                        }

                        }else {

                            openDialodDataProfile(listEmails);
                        }

                    }
                });

            } else mainView.findViewById(R.id.email_contact).setVisibility(View.GONE);
        }



        mainView.findViewById(R.id.profileAvatar).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

              /*  View view = activityApp.getCurrentFocus();
                if (view != null) {
                    InputMethodManager imm = (InputMethodManager) activityApp.getSystemService(Context.INPUT_METHOD_SERVICE);
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }*/

                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.add(R.id.main_content, AvatarFragment.newInstance(selectedContact)).addToBackStack("avatar").commit();
            }
        });


        mainView.findViewById(R.id.starImgProfile).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int[] location = new int[2];
                mainView.findViewById(R.id.starImgProfile).getLocationOnScreen(location);


                ViewGroup.MarginLayoutParams lp = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.popupStar).getLayoutParams();
                lp.leftMargin = (int) (location[0] - 10.2 * getContext().getResources().getDisplayMetrics().density);
                lp.topMargin = (int) (7 * getContext().getResources().getDisplayMetrics().density);


                mainView.findViewById(R.id.popupStar).requestLayout();
                mainView.findViewById(R.id.popupStar).setVisibility(View.VISIBLE);

                mainView.findViewById(R.id.popupStar).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                if (!selectedContact.isFavorite) {
                    ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isImportant) {
                    ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isFinished) {
                    ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isPause) {
                    ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isCrown) {
                    ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isVip) {
                    ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isStartup) {
                    ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(null);
                }

                if (!selectedContact.isInvestor) {
                    ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(null);
                }


                mainView.findViewById(R.id.starFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isFavorite) {
                            selectedContact.isFavorite = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);

                            ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);


                            Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                        } else {

                            ContactsService.updateFaroviteContact(true, selectedContact.getIdContact(), getContext());

                            selectedContact.isFavorite = true;
                            selectedContact.isImportant = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;


                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);

                            Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());

                        ContactsFragment.UPD_FAV = true;
                    }
                });


                mainView.findViewById(R.id.impFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isImportant) {
                            selectedContact.isImportant = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }
                            selectedContact.isImportant = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_IMP = true;
                    }
                });

                mainView.findViewById(R.id.stopFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isFinished) {
                            selectedContact.isFinished = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }
                            selectedContact.isFinished = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isImportant = false;

                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;

                            ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Finished communication", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_FIN = true;
                    }
                });

                mainView.findViewById(R.id.pauseFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isPause) {
                            selectedContact.isPause = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                            Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }
                            selectedContact.isPause = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isFinished = false;
                            selectedContact.isImportant = false;

                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;

                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);

                            Toast.makeText(getContext(), "Paused communication", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_PAUSE = true;
                    }
                });

                mainView.findViewById(R.id.crownFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isCrown) {
                            selectedContact.isCrown = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }

                            selectedContact.isCrown = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isImportant = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;


                            ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Crown", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_CROWN = true;
                    }
                });

                mainView.findViewById(R.id.vipFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isVip) {
                            selectedContact.isVip = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from VIP", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }

                            selectedContact.isVip = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isImportant = false;
                            selectedContact.isCrown = false;
                            selectedContact.isStartup = false;
                            selectedContact.isInvestor = false;


                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as VIP", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_VIP = true;
                    }
                });

                mainView.findViewById(R.id.startupFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isStartup) {
                            selectedContact.isStartup = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }

                            selectedContact.isStartup = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isImportant = false;
                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isInvestor = false;


                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Startup", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_STARTUP = true;
                    }
                });

                mainView.findViewById(R.id.investorFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance(); //+
                        realm.beginTransaction();
                        if (selectedContact.isInvestor) {
                            selectedContact.isInvestor = false;
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();

                        } else {
                            if (selectedContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, selectedContact.getIdContact(), getContext());
                            }

                            selectedContact.isInvestor = true;
                            selectedContact.isFavorite = false;
                            selectedContact.isPause = false;
                            selectedContact.isFinished = false;

                            selectedContact.isImportant = false;
                            selectedContact.isCrown = false;
                            selectedContact.isVip = false;
                            selectedContact.isStartup = false;


                            ((ImageView) mainView.findViewById(R.id.investorContactIcon)).setColorFilter(null);

                            ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                            mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);

                            ((ImageView) mainView.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) mainView.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) mainView.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Investor", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        //EventBus.getDefault().post(new UpdateFile());
                        ContactsFragment.UPD_INVESTOR = true;
                    }
                });

            }
        });


        getActivity().findViewById(R.id.textExtractSocial).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {


                if (((TextView) getActivity().findViewById(R.id.textExtractSocial)).getText().equals("Extract data")) {
                    getActivity().findViewById(R.id.extratorContainer).setVisibility(View.VISIBLE);
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial)).setText("Create");

                    ArrayList<Extrator> listExtract = new ArrayList<>();
                    String usernameLink = "Error!";
                    String name = "Error!";
                    try {
                        //===============================================================================CUT LINK!
                        int index = CreateFragment.nameContactExtractFromSocial.length();
                        if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.INSTAGRAM)) {
                           /* index = CreateFragment.nameContactExtractFromSocial.indexOf('@');

                            if (index != -1) {
                                usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index, CreateFragment.nameContactExtractFromSocial.length() - 1);

                                index -= 2;
                                name = CreateFragment.nameContactExtractFromSocial.substring(0, index).trim();
                            } else if (CreateFragment.nameContactExtractFromSocial != null && !CreateFragment.nameContactExtractFromSocial.isEmpty()) {
                                name = CreateFragment.nameContactExtractFromSocial;
                            }*/


                            index = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                            if (index != -1 && index != 0) {
                                usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index, CreateFragment.nameContactExtractFromSocial.length() - 1);
                                if (usernameLink.contains("•")) {
                                    int ind2 = usernameLink.indexOf('•');
                                    usernameLink = usernameLink.substring(0, ind2 - 2);
                                }

                                index -= 2;
                                name = CreateFragment.nameContactExtractFromSocial.substring(0, index).trim();
                            } else if (CreateFragment.nameContactExtractFromSocial != null && !CreateFragment.nameContactExtractFromSocial.isEmpty()) {
                                name = CreateFragment.nameContactExtractFromSocial;

                                index = name.indexOf('•');
                                if (index != -1) {
                                    usernameLink = name.substring(0, index - 1);

                                    name = name.substring(0, index - 1).trim();
                                    index -= 2;
                                }

                            } else {
                                index = name.indexOf('•');
                                if (index != -1) {
                                    usernameLink = name.substring(0, index - 1);

                                    name = name.substring(0, index - 1).trim();
                                    index -= 2;
                                }
                            }

                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.VK)) {
                            index = ContactsFragment.allWayLink.indexOf(".com/");
                            usernameLink = ContactsFragment.allWayLink.toString().substring(index + 5, ContactsFragment.allWayLink.length());
                            name = CreateFragment.nameContactExtractFromSocial;
                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.FACEBOOK)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            if (name.contains("(") && name.contains(")")) {
                                int ind = name.indexOf("(");
                                name = name.substring(0, ind - 1);
                            }
                            index = ContactsFragment.allWayLink.lastIndexOf(".com/");
                            if (ContactsFragment.allWayLink.contains("people")) {
                                index = ContactsFragment.allWayLink.lastIndexOf("/");
                                usernameLink = "id" + ContactsFragment.allWayLink.toString().substring(index + 5, ContactsFragment.allWayLink.length());
                            } else {
                                usernameLink = ContactsFragment.allWayLink.toString().substring(index + 5, ContactsFragment.allWayLink.length());
                                if (usernameLink.contains("/")) {
                                    usernameLink = usernameLink.substring(0, usernameLink.indexOf('/'));
                                }
                            }

                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.LINKEDIN)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            usernameLink = ContactsFragment.allWayLink;
                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.TWITTER)) {
                            index = CreateFragment.nameContactExtractFromSocial.indexOf('@');
                            if (index != -1) {
                                usernameLink = CreateFragment.nameContactExtractFromSocial.substring(index, CreateFragment.nameContactExtractFromSocial.length() - 1);

                                index -= 2;
                                name = CreateFragment.nameContactExtractFromSocial.substring(0, index).trim();
                            } else if (CreateFragment.nameContactExtractFromSocial != null && !CreateFragment.nameContactExtractFromSocial.isEmpty()) {
                                name = CreateFragment.nameContactExtractFromSocial;
                            }
                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.YOUTUBE)) {
                            name = CreateFragment.nameContactExtractFromSocial;
                            usernameLink = ContactsFragment.allWayLink;
                        } else if (ContactsFragment.extractEnumsToExtractContainer.equals(ExtractEnums.MEDIUM)) {
                            name = CreateFragment.nameContactExtractFromSocial;

                            if (ContactsFragment.allWayLink.contains(".com/@")) {
                                int in = ContactsFragment.allWayLink.indexOf(".com/@") + 5;
                                usernameLink = ContactsFragment.allWayLink.substring(in);
                            } else usernameLink = ContactsFragment.allWayLink;

                            //usernameLink = ContactsFragment.allWayLink;
                        }
                        if (index < 0)
                            index = CreateFragment.nameContactExtractFromSocial.length();
                        //=====================================================================================
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    listExtract.add(new Extrator(ExtractEnums.NAME, name.trim(), null));
                    //listExtract.add(new Extrator(extractEnumsToExtractContainer, ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
                    listExtract.add(new Extrator(ContactsFragment.extractEnumsToExtractContainer, usernameLink, ContactsFragment.allWayLink));

                    ((TextView) getActivity().findViewById(R.id.textCountFoundExtrator)).setText(listExtract.size() + " data items found");

                    RecyclerView recyclerView = (RecyclerView) getActivity().findViewById(R.id.clipboardRVExtract);


                    recyclerView.setLayoutManager(new LinearLayoutManager(mainView.getContext()));
                    ContactsFragment.extratorAdapter = new ExtratorAdapter(listExtract, getActivity());
                    recyclerView.setAdapter(ContactsFragment.extratorAdapter);

                } else {
                    //ContactAdapter.contactAd = contactAdapter;
                   /* checkMerge = false;
                    checkMergeContacts = true;
                    contactsFragment.closeOtherPopup();*/
                    Contact contact = new Contact();
                    ArrayList<Extrator> listEx = ContactsFragment.extratorAdapter.getListExtract();
                    for (Extrator extrator : listEx) {
                        if (extrator.isCheck() == true) {
                            if (extrator.getType().equals(ExtractEnums.NAME))
                                contact.setName(extrator.getText().trim());

                            if (extrator.getType().equals(ExtractEnums.FACEBOOK)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setFacebookLink(extrator.getAllLink());
                                contact.hasFacebook = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.INSTAGRAM)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setInstagramLink(extrator.getAllLink());
                                contact.hasInst = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.VK)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setVkLink(extrator.getAllLink());
                                contact.hasVk = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.LINKEDIN)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setLinkedInLink(extrator.getAllLink());
                                contact.hasLinked = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.TWITTER)) {
                                if (contact.getSocialModel() == null)
                                    contact.setSocialModel(new SocialModel());
                                contact.getSocialModel().setTwitterLink(extrator.getAllLink());
                                contact.hasTwitter = true;
                            }

                            if (extrator.getType().equals(ExtractEnums.YOUTUBE)) {
                                if (extrator.getAllLink().contains("channel") || extrator.getAllLink().contains("user")) {
                                    if (contact.getSocialModel() == null)
                                        contact.setSocialModel(new SocialModel());
                                    contact.getSocialModel().setYoutubeLink(extrator.getAllLink());
                                    contact.hasYoutube = true;
                                } else {
                                    if (contact.getListOfContactInfo() == null)
                                        contact.setListOfContactInfo(new RealmList<ContactInfo>());
                                    contact.addNote(extrator.getAllLink());
                                }
                            }

                            if (extrator.getType().equals(ExtractEnums.MEDIUM)) {
                                if (extrator.getAllLink().contains("com/@")) {
                                    if (contact.getSocialModel() == null)
                                        contact.setSocialModel(new SocialModel());
                                    contact.getSocialModel().setMediumLink(extrator.getAllLink());
                                    contact.hasMedium = true;
                                } else {
                                    if (contact.getListOfContactInfo() == null)
                                        contact.setListOfContactInfo(new RealmList<ContactInfo>());
                                    contact.addNote(extrator.getAllLink());
                                }
                            }

                        }
                    }

                    ContactsFragment.createContact = true;

                    ArrayList<Contact> contactExtract = new ArrayList<>();
                    contactExtract.add(contact);
                    android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();
                    android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                    fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();

                    getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
                    ((TextView) getActivity().findViewById(R.id.textExtractSocial)).setText("Extract data");
                    getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                    getActivity().findViewById(R.id.text_reset_btn).callOnClick();
                    //contactsFragment.hideSelectMenu();

                }
            }
        });


        try {
            if (selectedContact != null && selectedContact.getListOfContactInfo() != null && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.GONE);
                /*for (ContactInfo contactInfo : selectedContact.getListOfContactInfo()) {

                    if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                        ((ImageView) mainView.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                        mainView.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                        "mailto", contactInfo.value, null));
                                emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                                emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                                startActivity(Intent.createChooser(emailIntent, "Send email"));
                            }
                        });
                    }
                }*/
            } else if (selectedContact != null && selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
                if (selectedContact.webSite != null && !selectedContact.webSite.isEmpty()) {

                    ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);


                    ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                    String web_c = selectedContact.webSite;

                    if (web_c.contains("www.")) {
                        web_c = web_c.replace("www.", "");
                    }
                    if (web_c.contains("https://")) {
                        web_c = web_c.replace("https://", "");
                    }
                    if (web_c.contains("http://")) {
                        web_c = web_c.replace("http://", "");
                    }

                    ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
                    ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                    mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            try {
                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                String uri = selectedContact.webSite;
                                if (!uri.contains("https://") && !uri.contains("http://"))
                                    uri = "https://" + uri;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uri));

                                if (getActivity() != null)
                                    getActivity().startActivity(i);
                                else
                                    activityApp.startActivity(i);
                            } catch (Exception e) {

                            }
                        }
                    });

                    mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            /*Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                    "mailto", selectedContact.webSite, null));
                            emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                            emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                            startActivity(Intent.createChooser(emailIntent, "Send email"));*/

                            try {

                                String uri = selectedContact.webSite;
                                if (!uri.contains("https://") && !uri.contains("http://"))
                                    uri = "https://" + uri;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uri));

                                if (getActivity() != null)
                                    getActivity().startActivity(i);
                                else
                                    activityApp.startActivity(i);

                            } catch (Exception e) {

                            }

                        }
                    });
                } else {
                    ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web);
                    ((TextView) mainView.findViewById(R.id.web_title)).setText("add web");
                    ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.gray));


                    mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            try {

                                FrameLayout editFrameWeb = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
                                ((TextView) editFrameWeb.findViewById(R.id.typeField)).setText("Web");

                                ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setVisibility(View.VISIBLE);
                                ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocialInsta)).setVisibility(View.GONE);
                                ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_web));
                                ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                editFrameWeb.findViewById(R.id.ok_social).setVisibility(View.GONE);

                                editFrameWeb.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                                ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setHint("Add name or address");
                                ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);


                                editFrameWeb.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                        editFrameWeb.setVisibility(View.GONE);
                                    }
                                });

                                editFrameWeb.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().length() > 0) {


                                            Realm realm = Realm.getDefaultInstance(); //+
                                            realm.beginTransaction();
                                            selectedContact.webSite = ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();
                                            realm.commitTransaction();
                                            realm.close();

                                            //System.out.println("ADD qqq");

                                            companyProfileDataFragment.companyAdapter.updateNEw();
                                            companyProfileDataFragment.companyAdapter.notifyDataSetChanged();

                                            ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                                            ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                                            String web_c = selectedContact.webSite;

                                            if (web_c.contains("www.")) {
                                                web_c = web_c.replace("www.", "");
                                            }
                                            if (web_c.contains("https://")) {
                                                web_c = web_c.replace("https://", "");
                                            }
                                            if (web_c.contains("http://")) {
                                                web_c = web_c.replace("http://", "");
                                            }

                                            ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
                                            ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                                            mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    try {

                                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                        String uri = selectedContact.webSite;
                                                        if (!uri.contains("https://") && !uri.contains("http://"))
                                                            uri = "https://" + uri;

                                                        Intent i = new Intent(Intent.ACTION_VIEW);
                                                        i.setData(Uri.parse(uri));

                                                        if (getActivity() != null)
                                                            getActivity().startActivity(i);
                                                        else
                                                            activityApp.startActivity(i);

                                                    } catch (Exception e) {

                                                    }
                                                }
                                            });

                                            mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                                                @Override
                                                public void onClick(View v) {
                                                    try {

                                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                        String uri = selectedContact.webSite;
                                                        if (!uri.contains("https://") && !uri.contains("http://"))
                                                            uri = "https://" + uri;

                                                        Intent i = new Intent(Intent.ACTION_VIEW);
                                                        i.setData(Uri.parse(uri));

                                                        if (getActivity() != null)
                                                            getActivity().startActivity(i);
                                                        else
                                                            activityApp.startActivity(i);

                                                    } catch (Exception e) {

                                                    }
                                                }
                                            });
                                        }
                                        if (companyProfileDataFragment != null && companyProfileDataFragment.companyAdapter != null)
                                            companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                                        editFrameWeb.setVisibility(View.GONE);
                                    }
                                });


                                editFrameWeb.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        String socialLinkClip = "";
                                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                                boolean checkFind = false;
                                                for (Clipboard cl2 : cl.getListClipboards()) {
                                                    if (cl2.getType().equals(ClipboardEnum.WEB)) {
                                                        socialLinkClip = cl2.getValueCopy();
                                                        checkFind = true;
                                                        break;
                                                    }
                                                }
                                                if (checkFind) break;
                                            } else {
                                                if (cl.getType().equals(ClipboardEnum.WEB)) {
                                                    socialLinkClip = cl.getValueCopy();
                                                    break;
                                                }
                                            }
                                        }
                                        ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                                    }
                                });


                                editFrameWeb.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        try {
                                            if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                String uri = selectedContact.webSite;
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                                else
                                                    activityApp.startActivity(i);
                                            }

                                        } catch (Exception e) {

                                        }
                                    }
                                });

                                editFrameWeb.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                                    @Override
                                    public boolean onTouch(View v, MotionEvent event) {
                                        return false;
                                    }
                                });

                                editFrameWeb.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        try {
                                            if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                                String uri = ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();

                                                /*if(ClipboardType.isWeb(uri)) {
                                                    if (!uri.contains("https://") && !uri.contains("http://"))
                                                        uri = "https://" + uri;

                                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                                    i.setData(Uri.parse(uri));

                                                    if (getActivity() != null)
                                                        getActivity().startActivity(i);
                                                }else {*/
                                                Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                                                intent.putExtra(SearchManager.QUERY, ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString());
                                                if (getActivity() != null)
                                                    getActivity().startActivity(intent);
                                                //    }

                                            }

                                        } catch (Exception e) {

                                        }
                                    }
                                });


                                editFrameWeb.setVisibility(View.VISIBLE);


                                openedViews.add(editFrameWeb);

                            } catch (Exception e) {

                            }
                        }
                    });


                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            //     android.support.v4.app.FragmentManager fragmentManager =  ((FragmentActivity)getActivity()).getSupportFragmentManager();
            //     fragmentManager.popBackStackImmediate();
            //  android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.get

            //  android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            //   fragmentManager.getFragment(this, "");
            //  getActivity().onBackPressed();
        }



       /* if(selectedContact.webSite!=null && !selectedContact.webSite.isEmpty()) {
            if (selectedContact.webSite.length() > 0) {
                ((ImageView) mainView.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web_blue);
                mainView.findViewById(R.id.webImg).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse("http://" + selectedContact.webSite));
                            startActivity(i);
                        } catch (Exception e) {
                            Toast.makeText(mainView.getContext(), " Incorrect web site", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }
        }*/

        getActivity().findViewById(R.id.textExtractSocial2).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().findViewById(R.id.textExtractSocial).callOnClick();
            }
        });

        getActivity().findViewById(R.id.nameContactExtractFind).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                System.out.println("Click extracts");
                if (/*(contactAdapter.getSelectContactID() == null || contactAdapter.getSelectContactID() == "") && !ProfileFragment.profile && !ContactAdapter.checkMergeContacts &&*/ !ContactsFragment.createContact) {
                    if (ContactsFragment.contactFindExtractSocial != null) {

                        /*android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();
                        android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                        fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(ContactCacheService.getContactById(ContactsFragment.contactFindExtractSocial.getId()), false), "ExtractProfile").addToBackStack("prof").commit();*/

                        if(ContactsFragment.contactFindExtractSocial.listOfContacts == null || ContactsFragment.contactFindExtractSocial.listOfContacts.isEmpty()){
                            showProfilePopUp(ContactsFragment.contactFindExtractSocial.getId());
                        }else{
                            showCompanyPopup(ContactsFragment.contactFindExtractSocial.getId());
                        }

                        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
                        ContactsFragment.contactFindExtractSocial = null;
                        //ContactAdapter.contactAd = contactAdapter;
                    }
                }
            }
        });

        mainView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("CLicl close");
                if (openedViews != null) closeOtherPopup();


            }
        });

        mainView.findViewById(R.id.socialsArrowDown).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("SOCIAL CLICK");
                showSocialPopup(selectedContact);
            }
        });


        mainView.findViewById(R.id.arrowShowHashtags2).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("ARROW CLICK");

                if (socialPopup != null) {
                    if (socialPopup.getVisibility() == View.VISIBLE)
                        return;
                    showPopupUserHashtags(selectedContact);
                } else
                    showPopupUserHashtags(selectedContact);
            }
        });

        getActivity().findViewById(R.id.plane_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

               /* if(((EditText)getActivity().findViewById(R.id.magic_edit_text)).getText().length() > 0){
                    System.out.println("ADD HISTORY 2");
                    EventBus.getDefault().post(new AddHistoryEntry(((EditText)getActivity().findViewById(R.id.magic_edit_text)).getText().toString()));
                }*/


               if(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim().length()  == 0) return;


                //System.out.println("SIZE LAST2 = "+contactProfileDataFragment.selectedContact.size());
                //String mag = ((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString().trim();
                String[] magicSplit = ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim().split(" ");

                String[] magicSplitEdit = ((EditText) activityApp.findViewById(R.id.hashTagsEdit)).getText().toString().split(" ");


                ArrayList<String> listOfHashtags = new ArrayList<>();

                ArrayList<String> listOfHashtagsEdit = new ArrayList<>();

                for (int indexI = 0; indexI < magicSplit.length; indexI++) {
                    if (magicSplit[indexI].trim().length() > 1 && String.valueOf(magicSplit[indexI].trim().charAt(0)).compareTo("#") == 0) {
                        if (!listOfHashtags.contains(magicSplit[indexI].trim().toLowerCase()))
                            listOfHashtags.add(magicSplit[indexI].trim().toLowerCase());
                    } else {
                        if (magicSplit[indexI].trim().length() == 1 && String.valueOf(magicSplit[indexI].trim().charAt(0)).compareTo("#") == 0)
                            continue;
                        listOfHashtags.clear();
                        break;
                    }
                }

                for (int indexI = 0; indexI < magicSplitEdit.length; indexI++) {
                    if (magicSplitEdit[indexI].trim().length() > 1 && String.valueOf(magicSplitEdit[indexI].trim().charAt(0)).compareTo("#") == 0)
                        listOfHashtagsEdit.add(magicSplitEdit[indexI].trim().toLowerCase());
                }

                if (listOfHashtags.size() > 0) {
                    if (listOfHashtags.size() == 1) {
                        if (!nowEdit)
                            addHashtagToProfile(magicSplit[0]);
                        else {
                            if (!listOfHashtagsEdit.contains(listOfHashtags.get(0).toLowerCase().trim().toString()))
                                ((EditText) activityApp.findViewById(R.id.hashTagsEdit)).append(" " + listOfHashtags.get(0).trim().toString());
                            else
                                Toast.makeText(mainView.getContext(), "Hashtag already exist", Toast.LENGTH_SHORT).show();

                        }

                    } else {
                        if (!nowEdit)
                            addHashtagsToProfile(listOfHashtags);
                        else {
                            //((EditText) getActivity().findViewById(R.id.hashTagsEdit)).append(((EditText) getActivity().findViewById(R.id.magic_edit_text)).getText().toString());

                            for (int i = 0; i < listOfHashtags.size(); i++) {
                                if (!listOfHashtagsEdit.contains(listOfHashtags.get(i)))
                                    ((EditText) activityApp.findViewById(R.id.hashTagsEdit)).append(" " + listOfHashtags.get(i).toString());
                            }
                        }

                    }
                    ContactsFragment.UPD_ALL = true;
                    ((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().clear();
                } else {
                    if (ClipboardType.isEmail(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim()) /*&& (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())*/) {
                        addMailToContact(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim());
                    } else if (ClipboardType.isPhone(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim()) && (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())) {
                        addPhoneToContact(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim());
                    } else {
                        addNoteToContact(((EditText) activityApp.findViewById(R.id.magic_edit_text)).getText().toString().trim());
                    }
                    //    }
                }


            }
        });

        /*if(!selectedContact.isValid()){
            //android.support.v4.app.FragmentManager fm = getActivity().getSupportFragmentManager();
            //fm.popBackStackImmediate();
            //getActivity().onBackPressed();
        }*/


        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();


        if (selectedContact != null && selectedContact.getListOfHashtags() != null) {
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {
                TextView text = new TextView(getActivity());
                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                text.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                text.setText(hashTag.getHashTagValue() + " ");
                System.out.println("HASHTAG PROFILE");
                text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
                text.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View v) {
                        deleteHashTagsFromUser(text.getText().toString(), selectedContact);
                        return true;
                    }
                });
                containerHashTags.addView(text);
            }
        }

        if (selectedContact != null && (selectedContact.getListOfHashtags() == null || selectedContact.getListOfHashtags().size() == 0)) {
            System.out.println("Add Hashtah TExt added");
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText("hashtags");
            text.setOnClickListener(v -> {
                //containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);
        }


        HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);

        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();

        scrollView.addView(containerHashTags);
        scrollView.setSmoothScrollingEnabled(false);
        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
        scrollView.setSmoothScrollingEnabled(true);

        frameSelectBar = (FrameLayout) getActivity().findViewById(R.id.frame_select_bar);
        closePopups = (LinearLayout) mainView.findViewById(R.id.close_popups);
        popupProfileEdit = (FrameLayout) mainView.findViewById(R.id.popupEditProfile);
        popupProfileEditPreview = (FrameLayout) mainView.findViewById(R.id.popupPreviewEdit);
        contactsService = new ContactsService(getActivity().getContentResolver(), false);


        try {
            ((TextView) mainView.findViewById(R.id.name)).setText(selectedContact.getName());
        } catch (IllegalStateException e) {
            getFragmentManager().popBackStack();
        }

        mainView.findViewById(R.id.company).setVisibility(View.GONE);
        mainView.findViewById(R.id.company_title).setVisibility(View.GONE);

        if (frameSelectBar.getVisibility() == View.VISIBLE) {
            System.out.println("HIDE SELECT MENU");
            frameSelectBar.setVisibility(View.GONE);
            hideSelect = false;
        }
        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
            mainView.findViewById(R.id.profilePerson).setVisibility(View.GONE);
            mainView.findViewById(R.id.profile_company).setVisibility(View.VISIBLE);


            //mainView.findViewById(R.id.profileCompany).setVisibility(View.VISIBLE);


            ((TextView) mainView.findViewById(R.id.companyNumb)).setText(String.valueOf(selectedContact.listOfContacts.size()));


            // mainView.findViewById(R.id.companyNumb).setVisibility(View.VISIBLE);

            ((MainActivity) mainView.getContext()).setCompanyToContent();

        } else {
            mainView.findViewById(R.id.profilePerson).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.profile_company).setVisibility(View.GONE);
            ((MainActivity) mainView.getContext()).setProfileToContent();
        }

        if (selectedContact.getCompany() != null) {
            mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
            ((TextView) mainView.findViewById(R.id.company_title)).setText(selectedContact.getCompany());
            if (selectedContact.getCompanyPossition() != null) {
                Double ems = selectedContact.getCompanyPossition().length() / 2.5;
                int ems_count = ems.intValue();
                if (ems_count < 6) {
                    ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6 + (6 - ems_count));
                }
            } else {
                ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(12);
            }

            ((TextView) mainView.findViewById(R.id.company_title)).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    findByCompany(selectedContact.getCompany());
                }
            });
        }
        if (selectedContact.getCompanyPossition() != null) {
            mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
            ((TextView) mainView.findViewById(R.id.company)).setText(selectedContact.getCompanyPossition());
            if (selectedContact.getCompany() != null) {
                Double ems = selectedContact.getCompany().length() / 2.5;
                int ems_count = ems.intValue();
                if (ems_count < 6) {
                    ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6 + (6 - ems_count));
                }
            } else {
                ((TextView) mainView.findViewById(R.id.company)).setMaxEms(12);
            }

        }

        //((TextView) mainView.findViewById(R.id.time)).setText(/*getUpdTime*/(selectedContact.time));


        try {
            mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(selectedContact.getPhotoURL()));
            if (((BitmapDrawable) ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                circle.setColor(selectedContact.color);
                mainView.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
                    mainView.findViewById(R.id.profilePopupAvatar).setVisibility(View.GONE);
                    mainView.findViewById(R.id.companyPopupAvatar).setBackgroundColor(selectedContact.color);
                }
                ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                String initials = "";
                String names[] = selectedContact.getName().split("\\s+");

                for (String namePart : names)
                    initials += namePart.charAt(0);

                mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.profilePopupInitials)).setText(initials);
            }
        } catch (Exception e) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(selectedContact.color);
            mainView.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
                mainView.findViewById(R.id.profilePopupAvatar).setVisibility(View.GONE);
                mainView.findViewById(R.id.companyPopupAvatar).setBackgroundColor(selectedContact.color);
            }
            ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = selectedContact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) mainView.findViewById(R.id.profilePopupInitials)).setText(initials);
        }

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
            mainView.findViewById(R.id.linear_contacts_company_profile).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.messengersLayoutProfile).setVisibility(View.GONE);

            ((TextView) mainView.findViewById(R.id.companyNumb)).setText(String.valueOf(selectedContact.listOfContacts.size()));

            mainView.findViewById(R.id.contactsArrowDown).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.socialsArrowDown).setVisibility(View.GONE);

            mainView.findViewById(R.id.socialsArrowDown_2).setVisibility(View.VISIBLE);

            mainView.findViewById(R.id.socialsArrowDown_2).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    showSocialPopup(selectedContact);

                    companyProfileDataFragment.addView(socialPopup);
                }
            });


            popupContactsCompany = activityApp.findViewById(R.id.popupContactsCompany);


            ((TextView) popupContactsCompany.findViewById(R.id.companyNumb)).setText(String.valueOf(selectedContact.listOfContacts.size()));


            mainView.findViewById(R.id.contactsArrowDown).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {




                   /* if(contact.listOfContacts.size() == 1){
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText("1 contact");
                    }else
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText(String.valueOf(contact.listOfContacts.size())+" contacts");*/


                    RecyclerView recyclerViewContacts = popupContactsCompany.findViewById(R.id.recycler_company_preview_contacts);

                    RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(getContext(), 2);

                    recyclerViewContacts.setLayoutManager(new LinearLayoutManager(getActivity()));

                    Contacts_company_preview_adapter contacts_company_preview_adapter = new Contacts_company_preview_adapter(selectedContact.listOfContacts, getContext(), ProfileFragment.this);

                    recyclerViewContacts.setAdapter(contacts_company_preview_adapter);

                    initAdapterCompanyContacts(contacts_company_preview_adapter);

                    //popupContactsCompany.findViewById(R.id.buttons_company_preview).setVisibility(View.GONE);

                    //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.VISIBLE);

                    popupContactsCompany.setVisibility(View.VISIBLE);

                    openedViews.add(popupContactsCompany);


                    popupContactsCompany.findViewById(R.id.closeArrowSocial).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            popupContactsCompany.setVisibility(View.GONE);
                        }
                    });

                    //openedViews.add(popupContactsCompany);
                    companyProfileDataFragment.addView(popupContactsCompany);


                    popupContactsCompany.findViewById(R.id.cancelEditField).setOnClickListener(v1 -> {
                        //companyProfilePopup.findViewById(R.id.buttons_company_preview).setVisibility(View.VISIBLE);

                        //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.GONE);
                        popupContactsCompany.setVisibility(View.GONE);
                    });


                    popupContactsCompany.findViewById(R.id.sortElements).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            sortListCompany(contacts_company_preview_adapter);

                            initContact_companyPopup(selectedContact, mainView);

                            companyProfileDataFragment.initAdapter();

                            try {
                                if (companyContactsFragment != null)
                                    companyContactsFragment.initAdapter();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });

                    popupContactsCompany.findViewById(R.id.populHashTag).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                        }
                    });

                    popupContactsCompany.findViewById(R.id.sortByTime).setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                            sortByTimeCompany(contacts_company_preview_adapter);

                            initContact_companyPopup(selectedContact, mainView);

                            companyProfileDataFragment.initAdapter();

                            try {
                                if (companyContactsFragment != null)
                                    companyContactsFragment.initAdapter();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                }
            });


        } else {
            mainView.findViewById(R.id.linear_contacts_company_profile).setVisibility(View.GONE);
            mainView.findViewById(R.id.messengersLayoutProfile).setVisibility(View.VISIBLE);

            mainView.findViewById(R.id.contactsArrowDown).setVisibility(View.GONE);
            mainView.findViewById(R.id.socialsArrowDown).setVisibility(View.VISIBLE);

            mainView.findViewById(R.id.socialsArrowDown_2).setVisibility(View.GONE);
        }


        initIconColor(selectedContact, mainView);

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
            initContact_companyPopup(selectedContact, mainView);
        }


        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {

            long id = selectedContact.getId();


            //===============================================================================================================================================================

            Runnable runs = new Runnable() {

                @Override
                public void run() {


                    Contact contact = ContactCacheService.getContactByIdAndWithoutRealm(id);

                    /*Contact contact = new Contact();
                    contact.setName(contactMain.getName());*/

                    if (contact == null || contact.getIdContact() == null) return;

                    Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
                    if (c == null || c.getCount() == 0) {
                        /*System.out.println("SEARCH NULL CONTACT");
                        String idN = contactsService.getIdContactByName(contact.getName());
                        if (idN == null) {
                            return;
                        } else {
                            //realm.beginTransaction();
                            contact.setIdContact(idN);
                            //realm.commitTransaction();
                        }*/
                        return;
                    } else {
                        // remove
                       /* boolean checkName = false;
                        while (c.moveToNext()) {
                            //System.out.println("Cursor name = "+c.getString(0));
                            if (contact.getName().equalsIgnoreCase(c.getString(0))) {
                                checkName = true;
                                break;
                            }
                        }
                        if (!checkName) {
                            return;
                        }*/
                        //
                    }

                    ArrayList<DataUpdate> listUpdatingData;
                    listUpdatingData = new ArrayList<>();
                    Cursor organizationCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ORGANIZATION, contact.getIdContact());

                    Realm realm2 = Realm.getDefaultInstance();

                    ArrayList<Contact> listOFCompanies = ContactCacheService.getCompaniesRealm(realm2);

                    boolean showUpdate = false;

                    String companyOfContact = null;
                    if (contact.getCompany() != null)
                        companyOfContact = contact.getCompany();

                    String positionContact = null;

                    if (contact.getCompanyPossition() != null)
                        positionContact = contact.getCompanyPossition();

                    //realm.beginTransaction();
                    contact.setCompanyPossition(null);
                    //realm.commitTransaction();

                    int nameHash = contact.getName().hashCode();

                    boolean found = false;

                    while (organizationCursor != null && organizationCursor.moveToNext()) {
                        String orgName = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA));
                        String companyPossition = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.TITLE));

                        //System.out.println("COMPANY3 = " + orgName + ", name = " + getName() + ", id = " + getId());

                        //realm.beginTransaction();
                        contact.setCompanyPossition(companyPossition);


                        //realm.commitTransaction();

                        if (orgName != null && !orgName.isEmpty()) {

                            //contact.setCompany(orgName);

                            //System.out.println("COMPANY2 = " + orgName + ", name = " + getName() + ", id = " + getId());

                            String oldCompany = null;
                            if (contact.getCompany() != null && !contact.getCompany().isEmpty() && !contact.getCompany().trim().equalsIgnoreCase(orgName.trim()))
                                oldCompany = contact.getCompany();

                            //realm.beginTransaction();
                            contact.setCompany(orgName.trim());
                            //realm.commitTransaction();

                            /*for (Contact searchCompanyContact : listOFCompanies) {
                                if (searchCompanyContact.isValid() && searchCompanyContact.getName().equalsIgnoreCase(orgName.trim())) {
                                    if (oldCompany != null) {
                                        for (Contact comp : listOFCompanies) {
                                            if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {
                                                if (comp.listOfContacts.size() == 1) {
                                                    EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                                }
                                                ContactCacheService.removeContactFromCompany(comp, contact);
                                                break;
                                            }
                                        }
                                    }

                                    if (!searchCompanyContact.listOfContacts.contains(contact)) {
                                        if (searchCompanyContact.getName().equals("1337")) {
                                            //System.out.println("name = " + getName());
                                        }
                                        //System.out.println("COM{A, name = " + getName() + ", com = " + searchCompanyContact.getName());
                                        realm.beginTransaction();
                                        searchCompanyContact.listOfContacts.add(contact);
                                        realm.commitTransaction();
                                    }
                                    found = true;
                                }
                            }*/

                            /*if (!found) {
                                Date date1 = contact.getDateCreate();
                                Calendar cal1 = Calendar.getInstance();
                                cal1.setTime(date1);
                                Time time1 = contactsService.getRandomDate();
                                time1.setHours(cal1.get(Calendar.HOUR_OF_DAY));
                                time1.setMinutes(cal1.get(Calendar.MINUTE));
                                time1.setSeconds(cal1.get(Calendar.SECOND));
                                Contact companyContact = new Contact(0, orgName.trim(), null, false, true, true, time1.toString(), null, date1);
                                companyContact.time = contact.time.toString();
                                companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                                if (oldCompany != null) {
                                    for (Contact comp : listOFCompanies) {
                                        if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {

                                            if (comp.listOfContacts.size() == 1) {

                                            *//*ContactAdapter cont = ContactAdapter.contactAd;
                                            cont.removeContactById(comp);*//*
                             *//* getActivity().runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    contactAdapter.removeContactById(comp);
                                                    contactAdapter.notifyDataSetChanged();
                                                }
                                            });*//*
                                                //ContactsFragment.UPD_ALL = true;
                                                EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                            }
                                            ContactCacheService.removeContactFromCompany(comp, contact);
                                            break;
                                        }
                                    }
                                }
                                companyContact.listOfContacts.add(contact);
                                ContactCacheService.updateCompany(companyContact);
                                listOFCompanies.add(ContactCacheService.getCompany(companyContact.getName()));
                                //ContactAdapter cont = ContactAdapter.contactAd;
                                //cont.addContact(companyContact);
                                //if(typeEnum.equals(FillDataEnums.PROFILE) || typeEnum.equals(FillDataEnums.PREVIEW)) {
                                EventBus.getDefault().post(new AddContact(companyContact.getId()));
                                ContactsFragment.UPD_ALL = true;
                           *//* }else if(typeEnum.equals(FillDataEnums.NEW)){
                                companyNewReturn = companyContact;
                            }*//*
                            }*/
                        }
                    }

                    boolean checkNull = false;
                    if (organizationCursor != null && organizationCursor.getCount() > 0) {
                        organizationCursor.moveToFirst();
                        do {
                            if (organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)) != null && !organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)).equals("")) {
                                checkNull = true;
                                break;
                            }
                        } while (organizationCursor.moveToNext());

                    }

                    if (!checkNull) {
                        if (contact.getCompany() != null) {

                            for (Contact comp : listOFCompanies) {
                                if (comp.isValid() && comp.getName().equalsIgnoreCase(contact.getCompany())) {

                                    /*if (comp.listOfContacts.size() == 1) {
                                        //ContactAdapter cont = ContactAdapter.contactAd;
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            contactAdapter.removeContactById(comp);
                                            contactAdapter.notifyDataSetChanged();
                                        }
                                    });
                                        EventBus.getDefault().post(new RemoveContact(comp.getId()));


                                        //cont.notifyDataSetChanged();
                                        //ContactsFragment.UPD_ALL = true;
                                    }*/

                                    //ContactCacheService.removeContactFromCompany(comp, contact);
                                    //realm.beginTransaction();
                                    contact.setCompany(null);
                                    //realm.commitTransaction();
                                    break;
                                }
                            }
                        }
                    }

                    realm2.close();


                    if ((companyOfContact == null && contact.getCompany() != null) || (companyOfContact != null && contact.getCompany() == null) || (companyOfContact != null && contact.getCompany() != null && !companyOfContact.equals(contact.getCompany()))) {
                        showUpdate = true;
                        System.out.println("showUpdate 1");
                        if (contact.getCompany() != null) {
                            String nameC = contact.getCompany();
                            listUpdatingData.add(new DataUpdate(nameC, ClipboardEnum.COMPANY));
                            String pos = null;
                            if (contact.getCompanyPossition() != null) {
                                pos = contact.getCompanyPossition();
                            }

                            String finalPos = pos;
                            /*try {
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
                                        ((TextView) mainView.findViewById(R.id.company_title)).setText(nameC);
                                        if (finalPos != null) {
                                            Double ems = finalPos.length() / 2.5;
                                            int ems_count = ems.intValue();
                                            if (ems_count < 6) {
                                                ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6 + (6 - ems_count));
                                            }
                                        } else {
                                            ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(12);
                                        }

                                        ((TextView) mainView.findViewById(R.id.company_title)).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {

                                                findByCompany(nameC);
                                            }
                                        });

                                    }
                                });
                            } catch (Exception e) {

                            }*/

                        } else {
                            /*getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    mainView.findViewById(R.id.company_title).setVisibility(View.GONE);
                                    ((TextView) mainView.findViewById(R.id.company_title)).setText("");
                                }
                            });*/
                        }
                    }

                    if ((positionContact == null && contact.getCompanyPossition() != null) || (positionContact != null && contact.getCompanyPossition() == null) || (positionContact != null && contact.getCompanyPossition() != null && !positionContact.equals(contact.getCompanyPossition()))) {
                        //contact.setCompanyPossition(positionContact);
                        showUpdate = true;
                        System.out.println("showUpdate 2");
                        if (contact.getCompanyPossition() != null) {
                            String pos = contact.getCompanyPossition();
                            String co = null;
                            if (contact.getCompany() != null) {
                                co = contact.getCompany();
                            }
                            listUpdatingData.add(new DataUpdate(pos, ClipboardEnum.POSITION));
                            //String finalCo = co;
                            /*getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {

                                    mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
                                    ((TextView) mainView.findViewById(R.id.company)).setText(pos);
                                    if (finalCo != null) {
                                        Double ems = finalCo.length() / 2.5;
                                        int ems_count = ems.intValue();
                                        if (ems_count < 6) {
                                            ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6 + (6 - ems_count));
                                        }
                                    } else {
                                        ((TextView) mainView.findViewById(R.id.company)).setMaxEms(12);
                                    }


                                }
                            });*/
                        } else {


                          /*  mainView.findViewById(R.id.company).setVisibility(View.GONE);
                            ((TextView) mainView.findViewById(R.id.company)).setText("");*/

                        }
                    }

                    String contactName = ContactsService.getDisplayName(getContext(), contact.getIdContact());

                    if (contactName == null || contactName.equals("")) {

                    } else if (!contact.getName().equals(contactName)) {
                        //realm.beginTransaction();
                        contact.setName(contactName);
                        //realm.commitTransaction();
                        showUpdate = true;
                        System.out.println("showUpdate 3");
                        listUpdatingData.add(new DataUpdate(contactName, ClipboardEnum.NAME));
                        String finalContactName = contactName;
                       /* getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ((TextView) mainView.findViewById(R.id.name)).setText(finalContactName);
                            }
                        });*/
                    }

                    //phones


                    ArrayList<String> listPhones = new ArrayList<>();
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                            listPhones.add(contact.getListOfContactInfo().get(i).value);
                        }
                    }


                    ArrayList<String> phone = contactsService.getContactPhones(contact.getIdContact());
                    //System.out.println("ID FILL = "+idContact);
                    //realm.beginTransaction();
                    if (phone != null && phone.size() > 0) {
                        for (int i = 0; i < phone.size(); i++) {

                            String phonee = phone.get(i).trim();
                            phonee = phonee.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");

                            boolean phoneFind = false;
                            for (int j = 0; j < listPhones.size(); j++) {
                                String phone1 = listPhones.get(j);
                                phone1 = phone1.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                                if (phone1.equals(phonee)) {
                                    phoneFind = true;
                                    //listPhones.remove(j);
                                    break;
                                }
                            }

                            if (!phoneFind) {
                                if (!phone.get(i).equals("+000000000000")) {
                                    showUpdate = true;
                                    System.out.println("showUpdate 4");
                                    listUpdatingData.add(new DataUpdate(phone.get(i), ClipboardEnum.PHONE));
                                    contact.addPhone(phone.get(i));
                                }
                            }
                        }
                    } else if (listPhones.isEmpty()) {
                        //contact.addPhone("+000000000000");
                        //contactsService.addPhoneToContact(contact.getIdContact(), "+000000000000", contact.getName());
                        //setName(contactName.trim());
                    }

                    if (listPhones != null && listPhones.size() > 0) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            for (String str : listPhones) {
                                if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                    //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                    //showUpdate = true;
                                    //i--;
                                    break;
                                }
                            }
                        }
                    }


                    //realm.commitTransaction();


                    //email
                    //realm.beginTransaction();
                    ArrayList<String> listEmail = new ArrayList<>();
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("email")) {
                            listEmail.add(contact.getListOfContactInfo().get(i).value);
                        }
                    }

                    ArrayList<String> addr = contactsService.getContactEmails(contact.getIdContact());
                    for (String str : addr) {
                        boolean emailfind = false;
                        for (int i = 0; i < listEmail.size(); i++) {
                            if (str.equalsIgnoreCase(listEmail.get(i))) {
                                emailfind = true;
                                listEmail.remove(i);
                                break;
                            }
                        }
                        if (!emailfind) {
                            showUpdate = true;
                            System.out.println("showUpdate 5");
                            listUpdatingData.add(new DataUpdate(str, ClipboardEnum.EMAIL));
                            contact.addEmail(str);
                        }
                    }

                    if (listEmail != null && listEmail.size() > 0) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            for (String str : listEmail) {
                                if (contact.getListOfContactInfo().get(i).value.equals(str)) {

                                    //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                    //showUpdate = true; //new remove
                                    //System.out.println("showUpdate 6");
                                    //i--;

                                    break;
                                }
                            }
                        }
                    }

                    //realm.commitTransaction();


                    //address


                    //realm.beginTransaction();


                    ArrayList<String> listAddress = new ArrayList<>();
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("address")) {
                            listAddress.add(contact.getListOfContactInfo().get(i).value);
                        }
                    }

                    Cursor adressCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_ADRESS, contact.getIdContact());
                    while (adressCursor != null && adressCursor.moveToNext()) {
                        String adress = adressCursor.getString(adressCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                        boolean findAddress = false;
                        for (String str : listAddress) {
                            if (str.equalsIgnoreCase(adress)) {
                                findAddress = true;
                                listAddress.remove(str);
                                break;
                            }
                        }
                        if (!findAddress) {
                            showUpdate = true;
                            System.out.println("showUpdate 7");
                            listUpdatingData.add(new DataUpdate(adress, ClipboardEnum.ADDRESS));
                            contact.addAddress(adress);
                        }

                    }

                    if (listAddress != null && listAddress.size() > 0) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            for (String str : listAddress) {
                                if (contact.getListOfContactInfo().get(i).value.equals(str)) {

                                    //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                    //showUpdate = true; //new remove
                                    //System.out.println("showUpdate 8");
                                    //i--;

                                    break;
                                }
                            }
                        }
                    }

                    //realm.commitTransaction();

                    //hash
                    ArrayList<String> listOfHash = new ArrayList<>();
                    RealmList<HashTag> hashList = new RealmList<>();

                    ArrayList<HashTag> listHashOfContacts = new ArrayList<>();
                    if (contact.getListOfHashtags() != null)
                        listHashOfContacts.addAll(contact.getListOfHashtags());

                    Cursor noteCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                    //realm.beginTransaction();
                    //SocialModel socialModel = realm.createObject(SocialModel.class);
                    SocialModel socialModel = new SocialModel();
                    //realm.commitTransaction();
                    boolean hasFacebook = false;
                    boolean hasInst = false;
                    boolean hasLinked = false;
                    boolean hasVk = false;
                    boolean hasSkype = false;
                    boolean hasTelegram = contact.hasTelegram;
                    boolean hasViber = contact.hasViber;
                    boolean hasWhatsapp = contact.hasWhatsapp;
                    boolean hasYoutube = false;
                    boolean hasTwitter = false;
                    boolean hasMedium = false;
                    //realm.beginTransaction();
                    if (noteCursor != null && noteCursor.getCount() > 0) {
                        while (noteCursor.moveToNext()) {
                            String note = noteCursor.getString(noteCursor.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                            if (note != null && note.length() > 0) {
                                if (note.charAt(0) == '#') {
                                    if (!listOfHash.contains(note.toLowerCase().trim())) {
                                        //HashTag hashtag = realm.createObject(HashTag.class);
                                        HashTag hashtag = new HashTag();
                                        hashtag.setDate(new Date());
                                        hashtag.setHashTagValue(note.toLowerCase().trim());
                                        hashList.add(hashtag);
                                        listOfHash.add(note.toLowerCase().trim());
                                    }
                                } else if (/*(note.length() > 26 && note.toString().substring(0, 26).equalsIgnoreCase("https://www.instagram.com/")) || (note.length() > 18 && note.toString().substring(0, 18).equalsIgnoreCase("www.instagram.com/") ||
                                        (note.length() > 14 && note.toString().substring(0, 14).equalsIgnoreCase("instagram.com/")) || (note.length() > 22 && note.toString().substring(0, 22).equalsIgnoreCase("https://instagram.com/")))*/ClipboardType.isInsta(note)) {
                                    //SocialModel socialModel = contact.getSocialModel();


                                    String username = note;
                                    if (username.contains("?utm")) {
                                        int ind = username.indexOf('?');
                                        if (ind != -1)
                                            username = username.substring(0, ind);

                                        //contactsService.updateNote(contact.getIdContact(), note, username);
                                    }

                                    if (socialModel != null) {
                                        if (socialModel.getInstagramLink() == null || socialModel.getInstagramLink().isEmpty()) {
                                            socialModel.setInstagramLink(username);
                                            hasInst = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else if (ClipboardType.isVk(note)) {
                                    //SocialModel socialModel = contact.getSocialModel();


                                    if (socialModel != null) {
                                        if (socialModel.getVkLink() == null || socialModel.getVkLink().isEmpty()) {
                                            socialModel.setVkLink(note);
                                            hasVk = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }

                                } else if (ClipboardType.isFacebook(note)) {
                                    //SocialModel socialModel = contact.getSocialModel();


                                    if (socialModel != null) {
                                        if (socialModel.getFacebookLink() == null || socialModel.getFacebookLink().isEmpty()) {
                                            socialModel.setFacebookLink(note);
                                            hasFacebook = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }

                                } else if (ClipboardType.isLinkedIn(note)) {
                                    //SocialModel socialModel = contact.getSocialModel();


                                    if (socialModel != null) {
                                        if (socialModel.getLinkedInLink() == null || socialModel.getLinkedInLink().isEmpty()) {
                                            socialModel.setLinkedInLink(note);
                                            hasLinked = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }

                                } else if (note.contains("viber.com") || note.contains("https://www.viber.com")) {
                                    //SocialModel socialModel = contact.getSocialModel();
                                    hasViber = true;

                                    socialModel.setViberLink(note);

                                } else if (note.toString().contains("whatsapp.com") || note.toString().contains("https://www.whatsapp.com")) {
                                    //SocialModel socialModel = contact.getSocialModel();
                                    hasWhatsapp = true;

                                    socialModel.setWhatsappLink(note);

                                } else if (ClipboardType.isTelegram(note)) {
                                    //SocialModel socialModel = contact.getSocialModel();

                                    // //hasTelegram = true;

                                    // //socialModel.setTelegramLink(note);

                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }

                                } else if (note.toString().contains("skype.com") || note.toString().contains("https://www.skype.com") || note.contains("Skype: ")) {
                                    //SocialModel socialModel = contact.getSocialModel();
                                    if (note.contains("Skype: ")) {
                                        hasSkype = true;
                                        String username = note.substring(7, note.length());

                                        socialModel.setSkypeLink(username);
                                    } else {
                                        hasSkype = true;
                                        String username = note.substring(note.indexOf(".com") + 5, note.length());
                                        if (username.charAt(username.length() - 1) == '/')
                                            username = username.substring(0, username.length() - 1);

                                        socialModel.setSkypeLink(username);
                                    }

                                } else if (ClipboardType.isYoutube(note)) {

                                    if (note.contains("user") || note.contains("channel")) {
                                        if (socialModel != null) {
                                            if (socialModel.getYoutubeLink() == null || socialModel.getYoutubeLink().isEmpty()) {
                                                socialModel.setYoutubeLink(note);
                                                hasYoutube = true;
                                            } else {
                                                if (contact.getListOfContactInfo() == null) {
                                                    contact.addNote(note);
                                                } else {
                                                    boolean checkS = false;
                                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                                            checkS = true;
                                                            break;
                                                        } else if (note.contains("?")) {

                                                            int ind = note.indexOf('?');
                                                            if (ind != -1) {

                                                                if (contactInfo.value.equalsIgnoreCase(note.substring(0, ind))) {

                                                                    contactsService.updateNote(contact.getIdContact(), note, note.substring(0, ind));
                                                                    checkS = true;
                                                                    break;
                                                                }


                                                            }


                                                        }
                                                    }
                                                    if (!checkS)
                                                        contact.addNote(note);

                                                }
                                            }
                                        }
                                    } else {

                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {

                                                    checkS = true;
                                                    break;
                                                } else if (note.contains("?")) {

                                                    int ind = note.indexOf('?');
                                                    if (ind != -1) {

                                                        if (contactInfo.value.equalsIgnoreCase(note.substring(0, ind))) {

                                                            contactsService.updateNote(contact.getIdContact(), note, note.substring(0, ind));
                                                            checkS = true;
                                                            break;
                                                        }


                                                    }


                                                }
                                            }
                                            if (!checkS) {
                                                contact.addNote(note);
                                                System.out.println("ADD YOUTUBE");
                                            }

                                        }
                                    }
                                } else if (ClipboardType.isTwitter(note)) {


                                    if (socialModel != null) {
                                        if (socialModel.getTwitterLink() == null || socialModel.getTwitterLink().isEmpty()) {
                                            socialModel.setTwitterLink(note);
                                            hasTwitter = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else if (ClipboardType.isMedium(note)) {


                                    if (note.contains("com/@")) {
                                        if (socialModel != null) {
                                            if (socialModel.getMediumLink() == null || socialModel.getMediumLink().isEmpty()) {
                                                socialModel.setMediumLink(note);
                                                hasMedium = true;
                                            } else {
                                                if (contact.getListOfContactInfo() == null) {
                                                    contact.addNote(note);
                                                } else {
                                                    boolean checkS = false;
                                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                                            checkS = true;
                                                            break;
                                                        }
                                                    }
                                                    if (!checkS)
                                                        contact.addNote(note);

                                                }
                                            }
                                        }
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }

                                } else {
                                    boolean checkS = false;
                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                            checkS = true;
                                            break;
                                        }
                                    }
                                    if (!checkS) {
                                        contact.addNote(note);
                                        showUpdate = true;
                                        if (ClipboardType.isWeb(note)) {
                                            listUpdatingData.add(new DataUpdate(note, ClipboardEnum.WEB));
                                        } else {
                                            listUpdatingData.add(new DataUpdate(note, ClipboardEnum.NOTE));
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (noteCursor != null)
                        noteCursor.close();

                    //realm.commitTransaction();


                    //====================
                    //realm.beginTransaction();
                    Cursor notesC = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                    ArrayList<String> listInfoOfContact = new ArrayList<>();
                    ArrayList<String> listNotes = new ArrayList<>();


                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        listInfoOfContact.add(contact.getListOfContactInfo().get(i).value);
                    }

                    if (notesC != null && notesC.getCount() > 0) {
                        while (notesC.moveToNext()) {
                            String note = notesC.getString(notesC.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                            listNotes.add(note);
                            for (String str : listInfoOfContact) {
                                if (str.equals(note)) {
                                    listInfoOfContact.remove(str);
                                    break;
                                }
                            }
                        }
                    }


                    if (listInfoOfContact != null && listInfoOfContact.size() > 0) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            for (String str : listInfoOfContact) {
                                if (contact.getListOfContactInfo().get(i).value.equals(str) && contact.getListOfContactInfo().get(i).type.equals("note")) {



                                    break;
                                }
                            }
                        }
                    }


                    if (contact.hasFacebook != hasFacebook) {

                        showUpdate = true;

                        contact.hasFacebook = hasFacebook;

                    }
                    if (contact.hasVk != hasVk) {
                        showUpdate = true;

                        contact.hasVk = hasVk;
                    }
                    if (contact.hasInst != hasInst) {
                        showUpdate = true;

                        contact.hasInst = hasInst;
                    }
                    if (contact.hasLinked != hasLinked) {
                        showUpdate = true;

                        contact.hasLinked = hasLinked;
                    }
                    if (contact.hasTwitter != hasTwitter) {
                        showUpdate = true;

                        contact.hasTwitter = hasTwitter;
                    }
                    if (contact.hasYoutube != hasYoutube) {
                        showUpdate = true;


                        contact.hasYoutube = hasYoutube;
                    }

                    if (contact.hasMedium != hasMedium) {
                        showUpdate = true;


                        contact.hasMedium = hasMedium;
                    }

                    if (contact.hasSkype != hasSkype) {
                        showUpdate = true;
                        System.out.println("showUpdate 18");

                        contact.hasSkype = hasSkype;
                    }

                    if (contact.getSocialModel() != null && (contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) && socialModel.getFacebookLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getFacebookLink(), ClipboardEnum.FACEBOOK));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty()) && socialModel.getInstagramLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getInstagramLink(), ClipboardEnum.INSTAGRAM));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) && socialModel.getLinkedInLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getLinkedInLink(), ClipboardEnum.LINKEDIN));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getVkLink() == null || contact.getSocialModel().getVkLink().isEmpty()) && socialModel.getVkLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getVkLink(), ClipboardEnum.VK));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) && socialModel.getTwitterLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getTwitterLink(), ClipboardEnum.TWITTER));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getYoutubeLink() == null || contact.getSocialModel().getYoutubeLink().isEmpty()) && socialModel.getYoutubeLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getYoutubeLink(), ClipboardEnum.YOUTUBE));
                    }
                    if (contact.getSocialModel() != null && (contact.getSocialModel().getMediumLink() == null || contact.getSocialModel().getMediumLink().isEmpty()) && socialModel.getMediumLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getMediumLink(), ClipboardEnum.MEDIUM));
                    }
                    if (contact.getSocialModel() != null && ((contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) || ((contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) && (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) && !contact.getSocialModel().getSkypeLink().equalsIgnoreCase(socialModel.getSkypeLink()))) && socialModel.getSkypeLink() != null) {
                        listUpdatingData.add(new DataUpdate(socialModel.getSkypeLink(), ClipboardEnum.SKYPE));
                        showUpdate = true;
                    }

                    /*if((contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) && socialModel.getFacebookLink() != null){
                        listUpdatingData.add(new DataUpdate(socialModel.getFacebookLink(), ClipboardEnum.FACEBOOK));
                    }
                    if((contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) && socialModel.getFacebookLink() != null){
                        listUpdatingData.add(new DataUpdate(socialModel.getFacebookLink(), ClipboardEnum.FACEBOOK));
                    }
                    if((contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) && socialModel.getFacebookLink() != null){
                        listUpdatingData.add(new DataUpdate(socialModel.getFacebookLink(), ClipboardEnum.FACEBOOK));
                    }*/

                    if (hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                        socialModel.setTelegramLink(contact.getSocialModel().getTelegramLink());
                    } else {
                        if (!hasTelegram) {
                            hasTelegram = false;
                            socialModel.setTelegramLink(null);
                        }
                    }

                    if (hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                        socialModel.setViberLink(contact.getSocialModel().getViberLink());
                    } else {
                        if (!hasViber) {
                            hasViber = false;
                            socialModel.setViberLink(null);
                        }
                    }

                    if (hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                        socialModel.setWhatsappLink(contact.getSocialModel().getWhatsappLink());
                    } else {
                        if (!hasWhatsapp) {
                            hasWhatsapp = false;
                            socialModel.setWhatsappLink(null);
                        }
                    }

                    /*if (hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                        socialModel.setSkypeLink(contact.getSocialModel().getSkypeLink());
                    } else {
                        if (!hasSkype) {
                            hasSkype = false;
                            socialModel.setSkypeLink(null);
                        }
                    }*/

                    /*if (contact.hasSkype != hasSkype) {
                        showUpdate = true;
                        contact.hasSkype = hasSkype;
                    }
                    if (contact.hasTelegram != hasTelegram) {
                        showUpdate = true;
                        contact.hasTelegram = hasTelegram;
                    }
                    if (contact.hasViber != hasViber) {
                        showUpdate = true;
                        contact.hasViber = hasViber;
                    }
                    if (contact.hasWhatsapp != hasWhatsapp) {
                        showUpdate = true;
                        contact.hasWhatsapp = hasWhatsapp;
                    }*/


                    if (socialModel.getFacebookLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getFacebookLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getVkLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getVkLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getLinkedInLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getLinkedInLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getInstagramLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getInstagramLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getTwitterLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getTwitterLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getYoutubeLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getYoutubeLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getMediumLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getMediumLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }
                    if (socialModel.getSkypeLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getSkypeLink())) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }

                    if (socialModel.getViberLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getViberLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }

                    if (socialModel.getWhatsappLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getWhatsappLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }

                    if (socialModel.getTelegramLink() != null) {
                        for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                            if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getTelegramLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                                //showUpdate = true;
                                contact.getListOfContactInfo().remove(i);

                                break;
                            }
                        }
                    }


                    contact.setSocialModel(socialModel);
                    //realm.commitTransaction();


                    //realm.beginTransaction();
                    contact.setListOfHashtags(hashList);
                    //ealm.commitTransaction();

                    if (contact.getListOfHashtags().size() != listHashOfContacts.size()) {
                        //

                        showUpdate = true;
                        System.out.println("showUpdate 10");
                    } else {
                        for (HashTag h1 : listHashOfContacts) {
                            boolean check = false;
                            for (HashTag h2 : contact.getListOfHashtags()) {
                                if (h1.getHashTagValue().equalsIgnoreCase(h2.getHashTagValue())) {
                                    check = true;
                                    break;
                                }
                            }
                            if (!check) {
                                showUpdate = true;
                                System.out.println("showUpdate 11");
                                break;
                            }
                        }
                    }

                    if (listHashOfContacts == null && contact.getListOfHashtags() != null) {
                        System.out.println("HASH 1");
                        String str = "";
                        for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                            str += contact.getListOfHashtags().get(i).getHashTagValue() + " ";
                        }
                        listUpdatingData.add(new DataUpdate(str, ClipboardEnum.HASHTAG));
                    } else if (listHashOfContacts != null && contact.getListOfHashtags() != null) {
                        System.out.println("HASH 2");
                        String hst = "";
                        for (int i = 0; i < contact.getListOfHashtags().size(); i++) {
                            boolean checkH = false;
                            for (HashTag h : listHashOfContacts) {
                                if (contact.getListOfHashtags().get(i).getHashTagValue().equalsIgnoreCase(h.getHashTagValue())) {
                                    checkH = true;
                                    break;
                                }
                            }
                            if (!checkH)
                                hst += contact.getListOfHashtags().get(i).getHashTagValue() + " ";
                        }
                        if (hst.length() > 0)
                            listUpdatingData.add(new DataUpdate(hst, ClipboardEnum.HASHTAG));
                    }


                    String photoURL = ContactsService.getPhotoURI(getContext(), contact.getIdContact());

                    if ((photoURL == null && contact.getPhotoURL() != null) || (photoURL != null && contact.getPhotoURL() == null) || (photoURL != null && contact.getPhotoURL() != null && !photoURL.equals(contact.getPhotoURL()))) {
                        showUpdate = true;
                        System.out.println("showUpdate 12");
                        System.out.println("UPDATE PHOTO");

                        //realm.beginTransaction();
                        contact.setPhotoURL(photoURL);
                        //realm.commitTransaction();

                        int colotC = contact.color;
                        String nameContact = contact.getName();
                        boolean comps = false;
                        if (contact.listOfContacts != null && !contact.listOfContacts.isEmpty()) {
                            comps = true;
                        }
                        boolean finalComps = comps;



                    }


                    boolean finalShowUpdate = showUpdate;


                    try {
                        if (finalShowUpdate) {
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    if (finalShowUpdate) {


                                        /*if (thread.isInterrupted()) {
                                            System.out.println("CHECK STOP SUCCESS");
                                            return;
                                        }*/

                                        if (stopThread) {

                                            return;
                                        }
                                        //mainView.findViewById(R.id.updateTextView).setVisibility(View.VISIBLE);
                                        //EventBus.getDefault().post(new UpdateFile());

                                       /* mainView.findViewById(R.id.updateTextView).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
*/

                                        AlertDialog alertDialog = new AlertDialog.Builder(getActivity()).create();

                                        alertDialog.setTitle("Updating");

                                        alertDialog.setMessage("Some of data was updated via address book. Do u want to make changes inside app also?");

                                        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new DialogInterface.OnClickListener() {

                                            public void onClick(DialogInterface dialog, int id) {
                                                updateContactAfterCheckSynk();
                                                //...

                                            }
                                        });

                                        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Create New", new DialogInterface.OnClickListener() {

                                            public void onClick(DialogInterface dialog, int id) {
                                                alertDialog.hide();
                                                ContactsFragment.createContact = true;
                                                ArrayList<Contact> contactExtract = new ArrayList<>();
                                                        /*contact.setId(-1);
                                                        contact.setIdContact(null);*/
                                                if (contact.getListOfContactInfo() != null && !contact.getListOfContactInfo().isEmpty()) {
                                                    for (ContactInfo i : contact.getListOfContactInfo()) {
                                                        i.generateNewId();
                                                    }
                                                }
                                                contactExtract.add(contact);
                                                //Contact contact1 = new Contact();
                                                //contact1.setName("");
                                                //contactExtract.add(contact1);
                                                //contactExtract.add(contact1);
                                                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                                                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                                                fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();
                                                //...

                                            }
                                        });

                                        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "No", new DialogInterface.OnClickListener() {

                                            public void onClick(DialogInterface dialog, int id) {
                                                alertDialog.hide();
                                                //...

                                            }
                                        });

                                        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
                                            @Override
                                            public void onShow(DialogInterface dialog) {
                                                Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                                                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                                                        LinearLayout.LayoutParams.WRAP_CONTENT,
                                                        LinearLayout.LayoutParams.WRAP_CONTENT
                                                );
                                                params.setMargins(0, 0, 50, 0);
                                                negButton.setLayoutParams(params);
                                            }
                                        });

                                        if (stopThread) {

                                            return;
                                        }

                                        //alertDialog.show();
                                        openDialodUpdate(listUpdatingData, contact);

                                        //System.out.println("NAME SYNK = " + contact.getName());


                                           /* }
                                        });*/

                                    }
                                }
                            });

                            /*try {
                                Thread.sleep(2500);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }*/


                            /*getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    if (finalShowUpdate) {
                                        mainView.findViewById(R.id.updateTextView).setVisibility(View.GONE);
                                    }
                                }
                            });*/
                        }
                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    }


                }
            };

            thread = new Thread(runs);
            thread.start();


        }
        //==============================================


    }


    public void openDialodUpdate(ArrayList<DataUpdate> list, Contact contact) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        View view = getLayoutInflater().inflate(R.layout.doalog_update, null);
        //list = new ArrayList<>();
        final float scale = getResources().getDisplayMetrics().density;
       /* listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());
        listUpdatingData.add(new DataUpdate());*/
        builder.setView(view);
        AlertDialog alertDialog = builder.create();

        RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.recycleUpdate);
        TextView countValues = view.findViewById(R.id.textCount);
        countValues.setText(list.size() + " new fields added");
        ViewGroup.LayoutParams params = recyclerView.getLayoutParams();
        countValues.setVisibility(View.VISIBLE);
        if (list.size() == 0) {
            params.height = 0;
            countValues.setVisibility(View.GONE);
        } else if (list.size() == 1) {
            params.height = (int) ((int) 55 * scale);
        } else if (list.size() == 2) {
            params.height = (int) ((int) 110 * scale);
        } else {
            params.height = (int) ((int) 165 * scale);
        }
        recyclerView.setLayoutParams(params);

        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));

        DialogAdapter dialogAdapter = new DialogAdapter(list, getContext());
        recyclerView.setAdapter(dialogAdapter);

        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {
                updateContactAfterCheckSynk();
                //...

            }
        });

        alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Create New", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {
                alertDialog.hide();
                ContactsFragment.createContact = true;
                ArrayList<Contact> contactExtract = new ArrayList<>();
                contact.setId(-1);
                contact.setIdContact(null);
                if (contact.getListOfContactInfo() != null && !contact.getListOfContactInfo().isEmpty()) {
                    for (ContactInfo i : contact.getListOfContactInfo()) {
                        i.generateNewId();
                    }
                }
                contactExtract.add(contact);
                //Contact contact1 = new Contact();
                //contact1.setName("");
                //contactExtract.add(contact1);
                //contactExtract.add(contact1);
                android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
                fragmentTransaction.replace(R.id.main_content, CreateFragment.newInstance(contactExtract)).addToBackStack("contacts").commit();
                //...

            }
        });

        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "No", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {
               /* alertDialog.hide();
                //...*/

            }
        });

        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 50, 0);
                negButton.setLayoutParams(params);
            }
        });

        alertDialog.show();

    }

    public void updateContactAfterCheckSynk() {

        long id = selectedContact.getId();

        Runnable runs = new Runnable() {
            @Override
            public void run() {


                Realm realm = Realm.getDefaultInstance(); //-

                Contact contact = ContactCacheService.getContactByIdSynk(id, realm);

                Cursor c = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_NAME, contact.getIdContact());
                if (c == null || c.getCount() == 0) {
                    /*System.out.println("SEARCH NULL CONTACT");
                    String idN = contactsService.getIdContactByName(contact.getName());
                    if (idN == null) {
                        return;
                    } else {
                        realm.beginTransaction();
                        contact.setIdContact(idN);
                        realm.commitTransaction();
                    }*/
                    return;
                }

                Realm realm2 = Realm.getDefaultInstance();

                Cursor organizationCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ORGANIZATION, contact.getIdContact());

                ArrayList<Contact> listOFCompanies = ContactCacheService.getCompaniesRealm(realm2);

                boolean showUpdate = false;

                String companyOfContact = null;
                if (contact.getCompany() != null)
                    companyOfContact = contact.getCompany();

                String positionContact = null;

                if (contact.getCompanyPossition() != null)
                    positionContact = contact.getCompanyPossition();

                realm.beginTransaction();
                contact.setCompanyPossition(null);
                realm.commitTransaction();

                int nameHash = contact.getName().hashCode();

                boolean found = false;

                while (organizationCursor != null && organizationCursor.moveToNext()) {
                    String orgName = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA));
                    String companyPossition = organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.TITLE));

                    //System.out.println("COMPANY3 = " + orgName + ", name = " + getName() + ", id = " + getId());

                    realm.beginTransaction();
                    contact.setCompanyPossition(companyPossition);

                    realm.commitTransaction();

                    if (orgName != null && !orgName.isEmpty()) {

                        //System.out.println("COMPANY2 = " + orgName + ", name = " + getName() + ", id = " + getId());

                        String oldCompany = null;
                        if (contact.getCompany() != null && !contact.getCompany().isEmpty() && !contact.getCompany().trim().equalsIgnoreCase(orgName.trim()))
                            oldCompany = contact.getCompany();

                        realm.beginTransaction();
                        contact.setCompany(orgName.trim());
                        realm.commitTransaction();

                        for (Contact searchCompanyContact : listOFCompanies) {
                            if (searchCompanyContact.isValid() && searchCompanyContact.getName().equalsIgnoreCase(orgName.trim())) {
                                if (oldCompany != null) {
                                    for (Contact comp : listOFCompanies) {
                                        if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {
                                            if (comp.listOfContacts.size() == 1) {
                                                EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                            }
                                            ContactCacheService.removeContactFromCompany(comp, contact);
                                            break;
                                        }
                                    }
                                }

                                if (!searchCompanyContact.listOfContacts.contains(contact)) {
                                    if (searchCompanyContact.getName().equals("1337")) {
                                        //System.out.println("name = " + getName());
                                    }
                                    //System.out.println("COM{A, name = " + getName() + ", com = " + searchCompanyContact.getName());
                                    realm.beginTransaction();
                                    searchCompanyContact.listOfContacts.add(contact);
                                    realm.commitTransaction();
                                }
                                found = true;
                            }
                        }

                        if (!found) {
                            Date date1 = contact.getDateCreate();
                            Calendar cal1 = Calendar.getInstance();
                            cal1.setTime(date1);
                            Time time1 = contactsService.getRandomDate();
                            time1.setHours(cal1.get(Calendar.HOUR_OF_DAY));
                            time1.setMinutes(cal1.get(Calendar.MINUTE));
                            time1.setSeconds(cal1.get(Calendar.SECOND));
                            Contact companyContact = new Contact(0, orgName.trim(), null, false, true, true, time1.toString(), null, date1);
                            companyContact.time = contact.time.toString();
                            companyContact.color = Color.rgb(Math.abs(nameHash * 28439) % 255, Math.abs(nameHash * 211239) % 255, Math.abs(nameHash * 42368) % 255);
                            if (oldCompany != null) {
                                for (Contact comp : listOFCompanies) {
                                    if (comp.isValid() && comp.getName().equalsIgnoreCase(oldCompany.trim())) {

                                        if (comp.listOfContacts.size() == 1) {

                                            /*ContactAdapter cont = ContactAdapter.contactAd;
                                            cont.removeContactById(comp);*/
                                           /* getActivity().runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    contactAdapter.removeContactById(comp);
                                                    contactAdapter.notifyDataSetChanged();
                                                }
                                            });*/
                                            //ContactsFragment.UPD_ALL = true;
                                            EventBus.getDefault().post(new RemoveContact(comp.getId()));
                                        }
                                        ContactCacheService.removeContactFromCompany(comp, contact);
                                        break;
                                    }
                                }
                            }
                            companyContact.listOfContacts.add(contact);
                            ContactCacheService.updateCompany(companyContact);
                            listOFCompanies.add(ContactCacheService.getCompany(companyContact.getName()));
                            //ContactAdapter cont = ContactAdapter.contactAd;
                            //cont.addContact(companyContact);
                            //if(typeEnum.equals(FillDataEnums.PROFILE) || typeEnum.equals(FillDataEnums.PREVIEW)) {
                            EventBus.getDefault().post(new AddContact(companyContact.getId()));
                            ContactsFragment.UPD_ALL = true;
                           /* }else if(typeEnum.equals(FillDataEnums.NEW)){
                                companyNewReturn = companyContact;
                            }*/
                        }
                    }
                }
                boolean checkNull = false;
                if (organizationCursor != null && organizationCursor.getCount() > 0) {
                    organizationCursor.moveToFirst();
                    do {
                        if (organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)) != null && !organizationCursor.getString(organizationCursor.getColumnIndex(ContactsContract.CommonDataKinds.Organization.DATA)).equals("")) {
                            checkNull = true;
                            break;
                        }
                    } while (organizationCursor.moveToNext());

                }

                if (!checkNull) {
                    if (contact.getCompany() != null) {

                        for (Contact comp : listOFCompanies) {
                            if (comp.isValid() && comp.getName().equalsIgnoreCase(contact.getCompany())) {

                                if (comp.listOfContacts.size() == 1) {
                                    //ContactAdapter cont = ContactAdapter.contactAd;
                                    /*getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            contactAdapter.removeContactById(comp);
                                            contactAdapter.notifyDataSetChanged();
                                        }
                                    });*/
                                    EventBus.getDefault().post(new RemoveContact(comp.getId()));


                                    //cont.notifyDataSetChanged();
                                    //ContactsFragment.UPD_ALL = true;
                                }

                                ContactCacheService.removeContactFromCompany(comp, contact);
                                realm.beginTransaction();
                                contact.setCompany(null);
                                realm.commitTransaction();
                                break;
                            }
                        }
                    }
                }

                realm2.close();


                if ((companyOfContact == null && contact.getCompany() != null) || (companyOfContact != null && contact.getCompany() == null) || (companyOfContact != null && contact.getCompany() != null && !companyOfContact.equals(contact.getCompany()))) {
                    showUpdate = true;
                    if (contact.getCompany() != null) {
                        String nameC = contact.getCompany();
                        String pos = null;
                        if (contact.getCompanyPossition() != null) {
                            pos = contact.getCompanyPossition();
                        }

                        String finalPos = pos;
                        try {
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
                                    ((TextView) mainView.findViewById(R.id.company_title)).setText(nameC);
                                    if (finalPos != null) {
                                        Double ems = finalPos.length() / 2.5;
                                        int ems_count = ems.intValue();
                                        if (ems_count < 6) {
                                            ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6 + (6 - ems_count));
                                        }
                                    } else {
                                        ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(12);
                                    }

                                    ((TextView) mainView.findViewById(R.id.company_title)).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {

                                            findByCompany(nameC);
                                        }
                                    });

                                }
                            });
                        } catch (Exception e) {

                        }

                    } else {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                mainView.findViewById(R.id.company_title).setVisibility(View.GONE);
                                ((TextView) mainView.findViewById(R.id.company_title)).setText("");
                            }
                        });
                    }
                }

                if ((positionContact == null && contact.getCompanyPossition() != null) || (positionContact != null && contact.getCompanyPossition() == null) || (positionContact != null && contact.getCompanyPossition() != null && !positionContact.equals(contact.getCompanyPossition()))) {
                    //contact.setCompanyPossition(positionContact);
                    showUpdate = true;
                    if (contact.getCompanyPossition() != null) {
                        String pos = contact.getCompanyPossition();
                        String co = null;
                        if (contact.getCompany() != null) {
                            co = contact.getCompany();
                        }
                        String finalCo = co;
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {

                                mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
                                ((TextView) mainView.findViewById(R.id.company)).setText(pos);
                                if (finalCo != null) {
                                    Double ems = finalCo.length() / 2.5;
                                    int ems_count = ems.intValue();
                                    if (ems_count < 6) {
                                        ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6 + (6 - ems_count));
                                    }
                                } else {
                                    ((TextView) mainView.findViewById(R.id.company)).setMaxEms(12);
                                }


                            }
                        });
                    } else {

                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                mainView.findViewById(R.id.company).setVisibility(View.GONE);
                                ((TextView) mainView.findViewById(R.id.company)).setText("");
                            }
                        });
                    }
                }


                String contactName = ContactsService.getDisplayName(getContext(), contact.getIdContact());
                if (contactName == null || contactName.equals("")) {

                } else if (!contact.getName().equals(contactName)) {
                    realm.beginTransaction();
                    contact.setName(contactName);
                    realm.commitTransaction();
                    showUpdate = true;

                    String finalContactName = contactName;
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            ((TextView) mainView.findViewById(R.id.name)).setText(finalContactName);
                        }
                    });
                }

                //phones


                ArrayList<String> listPhones = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                        listPhones.add(contact.getListOfContactInfo().get(i).value);
                    }
                }


                ArrayList<String> phone = contactsService.getContactPhones(contact.getIdContact());
                //System.out.println("ID FILL = "+idContact);
                realm.beginTransaction();
                if (phone != null && phone.size() > 0) {
                    for (int i = 0; i < phone.size(); i++) {

                        String phonee = phone.get(i).trim();
                        phonee = phonee.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");

                        boolean phoneFind = false;
                        for (int j = 0; j < listPhones.size(); j++) {
                            String phone1 = listPhones.get(j);
                            phone1 = phone1.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                            if (phone1.equals(phonee)) {
                                phoneFind = true;
                                //listPhones.remove(j);
                                break;
                            }
                        }

                        if (!phoneFind) {
                            showUpdate = true;
                            contact.addPhone(phone.get(i));
                        }
                    }
                } else if (listPhones.isEmpty()) {
                    contact.addPhone("+000000000000");
                    contactsService.addPhoneToContact(contact.getIdContact(), "+000000000000", contact.getName());
                    //setName(contactName.trim());
                }

                if (listPhones != null && listPhones.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listPhones) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;
                                break;
                            }
                        }
                    }
                }


                realm.commitTransaction();


                //email
                realm.beginTransaction();
                ArrayList<String> listEmail = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("email")) {
                        listEmail.add(contact.getListOfContactInfo().get(i).value);
                    }
                }

                ArrayList<String> addr = contactsService.getContactEmails(contact.getIdContact());
                for (String str : addr) {
                    boolean emailfind = false;
                    for (int i = 0; i < listEmail.size(); i++) {
                        if (str.equalsIgnoreCase(listEmail.get(i))) {
                            emailfind = true;
                            listEmail.remove(i);
                            break;
                        }
                    }
                    if (!emailfind) {
                        showUpdate = true;
                        contact.addEmail(str);
                    }
                }

                if (listEmail != null && listEmail.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listEmail) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {

                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;

                                //new remove
                                break;
                            }
                        }
                    }
                }

                realm.commitTransaction();


                //address


                realm.beginTransaction();


                ArrayList<String> listAddress = new ArrayList<>();
                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    if (contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("address")) {
                        listAddress.add(contact.getListOfContactInfo().get(i).value);
                    }
                }

                Cursor adressCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.CONTACT_ADRESS, contact.getIdContact());
                while (adressCursor != null && adressCursor.moveToNext()) {
                    String adress = adressCursor.getString(adressCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.STREET));
                    boolean findAddress = false;
                    for (String str : listAddress) {
                        if (str.equalsIgnoreCase(adress)) {
                            findAddress = true;
                            listAddress.remove(str);
                            break;
                        }
                    }
                    if (!findAddress) {
                        showUpdate = true;
                        contact.addAddress(adress);
                    }

                }

                if (listAddress != null && listAddress.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listAddress) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str)) {
                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;

                                //new remove
                                break;
                            }
                        }
                    }
                }

                realm.commitTransaction();

                //hash
                ArrayList<String> listOfHash = new ArrayList<>();
                RealmList<HashTag> hashList = new RealmList<>();

                ArrayList<HashTag> listHashOfContacts = new ArrayList<>();
                if (contact.getListOfHashtags() != null)
                    listHashOfContacts.addAll(contact.getListOfHashtags());

                Cursor noteCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                realm.beginTransaction();
                SocialModel socialModel = realm.createObject(SocialModel.class);
                realm.commitTransaction();
                boolean hasFacebook = false;
                boolean hasInst = false;
                boolean hasLinked = false;
                boolean hasVk = false;
                boolean hasSkype = false;
                boolean hasTelegram = contact.hasTelegram;
                boolean hasViber = contact.hasViber;
                boolean hasWhatsapp = contact.hasWhatsapp;
                boolean hasYoutube = false;
                boolean hasTwitter = false;
                boolean hasMedium = false;
                realm.beginTransaction();
                if (noteCursor != null && noteCursor.getCount() > 0) {
                    while (noteCursor.moveToNext()) {
                        String note = noteCursor.getString(noteCursor.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        if (note != null && note.length() > 0) {
                            if (note.charAt(0) == '#') {
                                if (!listOfHash.contains(note.toLowerCase().trim())) {
                                    HashTag hashtag = realm.createObject(HashTag.class);
                                    hashtag.setDate(new Date());
                                    hashtag.setHashTagValue(note.toLowerCase().trim());
                                    hashList.add(hashtag);
                                    listOfHash.add(note.toLowerCase().trim());
                                }


                            } else if (/*(note.length() > 26 && note.toString().substring(0, 26).equalsIgnoreCase("https://www.instagram.com/")) || (note.length() > 18 && note.toString().substring(0, 18).equalsIgnoreCase("www.instagram.com/") ||
                                    (note.length() > 14 && note.toString().substring(0, 14).equalsIgnoreCase("instagram.com/")) || (note.length() > 22 && note.toString().substring(0, 22).equalsIgnoreCase("https://instagram.com/")))*/ ClipboardType.isInsta(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                String username = note;
                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);

                                    contactsService.updateNote(contact.getIdContact(), note, username);
                                }

                                if (socialModel != null) {
                                    if (socialModel.getInstagramLink() == null || socialModel.getInstagramLink().isEmpty()) {
                                        socialModel.setInstagramLink(username);
                                        hasInst = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isVk(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getVkLink() == null || socialModel.getVkLink().isEmpty()) {
                                        socialModel.setVkLink(note);
                                        hasVk = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isFacebook(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getFacebookLink() == null || socialModel.getFacebookLink().isEmpty()) {
                                        socialModel.setFacebookLink(note);
                                        hasFacebook = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (ClipboardType.isLinkedIn(note)) {
                                //SocialModel socialModel = contact.getSocialModel();


                                if (socialModel != null) {
                                    if (socialModel.getLinkedInLink() == null || socialModel.getLinkedInLink().isEmpty()) {
                                        socialModel.setLinkedInLink(note);
                                        hasLinked = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }

                            } else if (note.contains("viber.com") || note.contains("https://www.viber.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasViber = true;

                                socialModel.setViberLink(note);

                            } else if (note.toString().contains("whatsapp.com") || note.toString().contains("https://www.whatsapp.com")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                hasWhatsapp = true;

                                socialModel.setWhatsappLink(note);

                            } else if ((note.toString().contains("telegram.org") || note.toString().contains("https://telegram.org")) || ClipboardType.isTelegram(note)) {
                                //SocialModel socialModel = contact.getSocialModel();
                                //hasTelegram = true;

                                //socialModel.setTelegramLink(note);

                                if (contact.getListOfContactInfo() == null) {
                                    contact.addNote(note);
                                } else {
                                    boolean checkS = false;
                                    for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                        if (contactInfo.value.equalsIgnoreCase(note)) {
                                            checkS = true;
                                            break;
                                        }
                                    }
                                    if (!checkS)
                                        contact.addNote(note);

                                }


                            } else if (note.toString().contains("skype.com") || note.toString().contains("https://www.skype.com") || note.contains("Skype: ")) {
                                //SocialModel socialModel = contact.getSocialModel();
                                if (note.contains("Skype: ")) {
                                    hasSkype = true;
                                    String username = note.substring(7, note.length());
                                    socialModel.setSkypeLink(username);
                                } else {
                                    hasSkype = true;
                                    String username = note.substring(note.indexOf(".com") + 5, note.length());
                                    if (username.charAt(username.length() - 1) == '/')
                                        username = username.substring(0, username.length() - 1);

                                    socialModel.setSkypeLink(username);
                                }

                            } else if (ClipboardType.isYoutube(note)) {

                                if (note.contains("user") || note.contains("channel")) {
                                    if (socialModel != null) {
                                        if (socialModel.getYoutubeLink() == null || socialModel.getYoutubeLink().isEmpty()) {
                                            socialModel.setYoutubeLink(note);
                                            hasYoutube = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    } else if (note.contains("?")) {

                                                        int ind = note.indexOf('?');
                                                        if (ind != -1) {

                                                            if (contactInfo.value.equalsIgnoreCase(note.substring(0, ind))) {
                                                                System.out.println("FIND YOUTUBE 2");
                                                                contactsService.updateNote(contact.getIdContact(), note, note.substring(0, ind));
                                                                checkS = true;
                                                                break;
                                                            }


                                                        }


                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }
                            } else if (ClipboardType.isTwitter(note)) {


                                if (socialModel != null) {
                                    if (socialModel.getTwitterLink() == null || socialModel.getTwitterLink().isEmpty()) {
                                        socialModel.setTwitterLink(note);
                                        hasTwitter = true;
                                    } else {
                                        if (contact.getListOfContactInfo() == null) {
                                            contact.addNote(note);
                                        } else {
                                            boolean checkS = false;
                                            for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                if (contactInfo.value.equalsIgnoreCase(note)) {
                                                    checkS = true;
                                                    break;
                                                }
                                            }
                                            if (!checkS)
                                                contact.addNote(note);

                                        }
                                    }
                                }
                            } else if (ClipboardType.isMedium(note)) {

                                if (note.contains("com/@")) {
                                    if (socialModel != null) {
                                        if (socialModel.getMediumLink() == null || socialModel.getMediumLink().isEmpty()) {
                                            socialModel.setMediumLink(note);
                                            hasMedium = true;
                                        } else {
                                            if (contact.getListOfContactInfo() == null) {
                                                contact.addNote(note);
                                            } else {
                                                boolean checkS = false;
                                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                                        checkS = true;
                                                        break;
                                                    }
                                                }
                                                if (!checkS)
                                                    contact.addNote(note);

                                            }
                                        }
                                    }
                                } else {
                                    if (contact.getListOfContactInfo() == null) {
                                        contact.addNote(note);
                                    } else {
                                        boolean checkS = false;
                                        for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                            if (contactInfo.value.equalsIgnoreCase(note)) {
                                                checkS = true;
                                                break;
                                            }
                                        }
                                        if (!checkS)
                                            contact.addNote(note);

                                    }
                                }
                            } else {
                                boolean checkS = false;
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.value.equalsIgnoreCase(note)) {
                                        checkS = true;
                                        break;
                                    }
                                }
                                if (!checkS) {
                                    contact.addNote(note);
                                    showUpdate = true;
                                }
                            }
                        }
                    }
                }

                if (noteCursor != null)
                    noteCursor.close();

                realm.commitTransaction();


                //====================
                realm.beginTransaction();
                Cursor notesC = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.NOTE, contact.getIdContact());

                ArrayList<String> listInfoOfContact = new ArrayList<>();
                ArrayList<String> listNotes = new ArrayList<>();


                for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                    listInfoOfContact.add(contact.getListOfContactInfo().get(i).value);
                }

                if (notesC != null && notesC.getCount() > 0) {
                    while (notesC.moveToNext()) {
                        String note = notesC.getString(notesC.getColumnIndex(ContactsContract.CommonDataKinds.Note.NOTE));
                        listNotes.add(note);
                        for (String str : listInfoOfContact) {
                            if (str.equals(note)) {
                                listInfoOfContact.remove(str);
                                break;
                            }
                        }
                    }
                }


                if (listInfoOfContact != null && listInfoOfContact.size() > 0) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        for (String str : listInfoOfContact) {
                            if (contact.getListOfContactInfo().get(i).value.equals(str) && contact.getListOfContactInfo().get(i).type.equals("note")) {

                                //contact.listOfContactInfo.remove(contact.getListOfContactInfo().get(i));
                                //showUpdate = true;
                                //i--;

                                //new remove
                                break;
                            }
                        }
                    }
                }

                    /*System.out.println("L0");
                    if(socialModel.getFacebookLink() != null){
                        System.out.println("L1");
                        showUpdate = true;
                        if(!listNotes.contains(socialModel.getFacebookLink())){
                            System.out.println("L2");
                            boolean find = false;
                            for(int i = 0;i<contact.getListOfContactInfo().size();i++){
                                if(ClipboardType.isFacebook(contact.getListOfContactInfo().get(i).value)){
                                    System.out.println("L3");
                                    socialModel.setFacebookLink(contact.getListOfContactInfo().get(i).value);
                                    contact.getListOfContactInfo().remove(contact.getListOfContactInfo().get(i));
                                    find = true;
                                    break;
                                }
                            }
                            if(!find){
                                System.out.println("L4");
                                socialModel.setFacebookLink(null);
                                hasFacebook = false;
                            }
                        }
                    }*/


                realm.commitTransaction();

                //=-=-----------------

                realm.beginTransaction();
                if (contact.hasFacebook != hasFacebook) {
                    showUpdate = true;
                    contact.hasFacebook = hasFacebook;
                }
                if (contact.hasVk != hasVk) {
                    showUpdate = true;
                    contact.hasVk = hasVk;
                }
                if (contact.hasInst != hasInst) {
                    showUpdate = true;
                    contact.hasInst = hasInst;
                }
                if (contact.hasLinked != hasLinked) {
                    showUpdate = true;
                    contact.hasLinked = hasLinked;
                }
                if (contact.hasTwitter != hasTwitter) {
                    showUpdate = true;
                    contact.hasTwitter = hasTwitter;
                }
                if (contact.hasYoutube != hasYoutube) {
                    showUpdate = true;
                    contact.hasYoutube = hasYoutube;
                }
                if (contact.hasMedium != hasMedium) {
                    showUpdate = true;
                    contact.hasMedium = hasMedium;
                }
                if (contact.hasSkype != hasSkype) {
                    showUpdate = true;
                    contact.hasSkype = hasSkype;
                }
                if (hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty()) {
                    socialModel.setTelegramLink(contact.getSocialModel().getTelegramLink());
                } else {
                    if (!hasTelegram) {
                        hasTelegram = false;
                        socialModel.setTelegramLink(null);
                    }
                }

                if (hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
                    socialModel.setViberLink(contact.getSocialModel().getViberLink());
                } else {
                    if (!hasViber) {
                        hasViber = false;
                        socialModel.setViberLink(null);
                    }
                }

                if (hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
                    socialModel.setWhatsappLink(contact.getSocialModel().getWhatsappLink());
                } else {
                    if (!hasWhatsapp) {
                        hasWhatsapp = false;
                        socialModel.setWhatsappLink(null);
                    }
                }

                if (contact.getSocialModel() != null && ((contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) || ((contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) && (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) && !contact.getSocialModel().getSkypeLink().equalsIgnoreCase(socialModel.getSkypeLink()))) && socialModel.getSkypeLink() != null) {
                    showUpdate = true;
                }

                /*if (hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                    socialModel.setSkypeLink(contact.getSocialModel().getSkypeLink());
                } else {
                    if (!hasSkype) {
                        hasSkype = false;
                        socialModel.setSkypeLink(null);
                    }
                }*/

                    /*if (contact.hasSkype != hasSkype) {
                        showUpdate = true;
                        contact.hasSkype = hasSkype;
                    }
                    if (contact.hasTelegram != hasTelegram) {
                        showUpdate = true;
                        contact.hasTelegram = hasTelegram;
                    }
                    if (contact.hasViber != hasViber) {
                        showUpdate = true;
                        contact.hasViber = hasViber;
                    }
                    if (contact.hasWhatsapp != hasWhatsapp) {
                        showUpdate = true;
                        contact.hasWhatsapp = hasWhatsapp;
                    }*/


                if (socialModel.getFacebookLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getFacebookLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getVkLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getVkLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getLinkedInLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getLinkedInLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getInstagramLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getInstagramLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getTwitterLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getTwitterLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getYoutubeLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getYoutubeLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getMediumLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getMediumLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }
                if (socialModel.getSkypeLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getSkypeLink())) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }

                if (socialModel.getViberLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getViberLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }

                if (socialModel.getWhatsappLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getWhatsappLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }

                if (socialModel.getTelegramLink() != null) {
                    for (int i = 0; i < contact.getListOfContactInfo().size(); i++) {
                        if (contact.getListOfContactInfo().get(i).value.equals(socialModel.getTelegramLink()) && !contact.getListOfContactInfo().get(i).type.equalsIgnoreCase("phone")) {
                            //showUpdate = true;
                            contact.getListOfContactInfo().remove(i);
                            break;
                        }
                    }
                }


                contact.setSocialModel(socialModel);
                realm.commitTransaction();


                realm.beginTransaction();
                contact.setListOfHashtags(hashList);
                realm.commitTransaction();

                if (contact.getListOfHashtags().size() != listHashOfContacts.size()) {
                    //
                    showUpdate = true;
                } else {
                    for (HashTag h1 : listHashOfContacts) {
                        boolean check = false;
                        for (HashTag h2 : contact.getListOfHashtags()) {
                            if (h1.getHashTagValue().equalsIgnoreCase(h2.getHashTagValue())) {
                                check = true;
                                break;
                            }
                        }
                        if (!check) {
                            showUpdate = true;
                            break;
                        }
                    }
                }


                String photoURL = ContactsService.getPhotoURI(getContext(), contact.getIdContact());

                if ((photoURL == null && contact.getPhotoURL() != null) || (photoURL != null && contact.getPhotoURL() == null) || (photoURL != null && contact.getPhotoURL() != null && !photoURL.equals(contact.getPhotoURL()))) {
                    showUpdate = true;
                    System.out.println("UPDATE PHOTO");

                    realm.beginTransaction();
                    contact.setPhotoURL(photoURL);
                    realm.commitTransaction();

                    int colotC = contact.color;
                    String nameContact = contact.getName();
                    boolean comps = false;
                    if (contact.listOfContacts != null && !contact.listOfContacts.isEmpty()) {
                        comps = true;
                    }
                    boolean finalComps = comps;
                    try {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {


                                try {
                                    mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
                                    ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(photoURL));
                                    if (((BitmapDrawable) ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).getDrawable()).getBitmap() == null) {
                                        GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                        circle.setColor(colotC);
                                        mainView.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                        if (finalComps) {
                                            mainView.findViewById(R.id.profilePopupAvatar).setVisibility(View.GONE);
                                            mainView.findViewById(R.id.companyPopupAvatar).setBackgroundColor(colotC);
                                        }
                                        ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                        String initials = "";
                                        String names[] = nameContact.split("\\s+");

                                        for (String namePart : names)
                                            initials += namePart.charAt(0);

                                        mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                        ((TextView) mainView.findViewById(R.id.profilePopupInitials)).setText(initials);
                                    }
                                } catch (Exception e) {
                                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
                                    circle.setColor(colotC);
                                    mainView.findViewById(R.id.profilePopupAvatar).setBackground(circle);
                                    if (finalComps) {
                                        mainView.findViewById(R.id.profilePopupAvatar).setVisibility(View.GONE);
                                        mainView.findViewById(R.id.companyPopupAvatar).setBackgroundColor(colotC);
                                    }
                                    ((ImageView) mainView.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

                                    String initials = "";
                                    String names[] = nameContact.split("\\s+");

                                    for (String namePart : names)
                                        initials += namePart.charAt(0);

                                    mainView.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
                                    ((TextView) mainView.findViewById(R.id.profilePopupInitials)).setText(initials);
                                }


                            }
                        });

                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    }


                }


                boolean finalShowUpdate = showUpdate;
                try {
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Contact contact = ContactCacheService.getContactById(id);
                            /*if (contact.listOfContactInfo != null) {
                                boolean checkMail = false;
                                ((ImageView) mainView.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
                                for (ContactInfo contactInfo : contact.getListOfContactInfo()) {
                                    if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                                        checkMail = true;
                                        ((ImageView) mainView.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                                        mainView.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                                        "mailto", contactInfo.value, null));
                                                emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                                                emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                                                startActivity(Intent.createChooser(emailIntent, "Send email"));
                                            }
                                        });
                                    }
                                    if (!checkMail) {
                                        mainView.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {

                                            }
                                        });
                                    }
                                }
                            }*/


                            try {
                                LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
                                if (containerHashTags.getChildCount() > 0)
                                    containerHashTags.removeAllViews();
                                if (contact != null && contact.getListOfHashtags() != null)
                                    for (HashTag hashTag : contact.getListOfHashtags()) {
                                        TextView text = new TextView(getActivity());
                                        text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                                        DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                                        text.setLayoutParams(new LinearLayout.LayoutParams(
                                                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                                        text.setTextColor(getResources().getColor(R.color.colorPrimary));
                                        text.setText(hashTag.getHashTagValue() + " ");
                                        System.out.println("HASHTAG PROFILE");
                                        /*if (contactAdapter == null)
                                            contactAdapter = ContactAdapter.contactAd;*/
                                        text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
                                        text.setOnLongClickListener(new View.OnLongClickListener() {
                                            @Override
                                            public boolean onLongClick(View v) {
                                                deleteHashTagsFromUser(text.getText().toString(), contact);
                                                return true;
                                            }
                                        });
                                        containerHashTags.addView(text);
                                    }

                                if (contact != null && (contact.getListOfHashtags() == null || contact.getListOfHashtags().size() == 0)) {
                                    System.out.println("Add Hashtah TExt added");
                                    TextView text = new TextView(getActivity());
                                    text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                                    //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                                    text.setLayoutParams(new LinearLayout.LayoutParams(
                                            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                                    text.setTextColor(getResources().getColor(R.color.gray));
                                    text.setText("hashtags");
                                    text.setOnClickListener(v -> {
                                        //containerHashTags.removeAllViews();
                                        showPopupUserHashtags(selectedContact);
                                    });
                                    containerHashTags.addView(text);
                                }

                                HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);
                                if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                                scrollView.addView(containerHashTags);
                                scrollView.setSmoothScrollingEnabled(false);
                                scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                                scrollView.setSmoothScrollingEnabled(true);
                            } catch (NullPointerException e2) {
                                e2.printStackTrace();
                            }

                            try {
                                initIconColor(contact, mainView);

                            } catch (NullPointerException e) {
                                e.printStackTrace();
                            } catch (IllegalStateException e1) {
                                e1.printStackTrace();
                            }

                            if (finalShowUpdate) {

                            }
                        }
                    });


                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (contactProfileDataFragment == null || contactProfileDataFragment.contactNumberAdapter == null) {
                                setupSectionPager();
                            } else {
                                contactProfileDataFragment.contactNumberAdapter.updateContactsList(ContactCacheService.getContactById(id).getListOfContactInfo());
                            }
                        }
                    });

                } catch (NullPointerException e) {
                    e.printStackTrace();
                }

                try {
                    if (finalShowUpdate) {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                if (finalShowUpdate) {
                                    mainView.findViewById(R.id.updateTextView).setVisibility(View.VISIBLE);
                                    //EventBus.getDefault().post(new UpdateFile());
                                }
                            }
                        });

                        try {
                            Thread.sleep(2500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }


                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                if (finalShowUpdate) {
                                    mainView.findViewById(R.id.updateTextView).setVisibility(View.GONE);
                                }
                            }
                        });
                    }
                } catch (NullPointerException e) {
                    e.printStackTrace();
                }

                realm.close();

            }
        };

        thread2 = new Thread(runs);
        thread2.start();


    }

    private void closeChildPopups() {
        contactProfileDataFragment.closeOtherPopup();
        companyProfileDataFragment.closeOtherPopup();
    }

    public boolean checkClick = true;
    public boolean checkClick_viber = true;
    public boolean checkClick_telegram = true;
    public boolean checkClick_skype = true;

    public boolean checkClick_facebook = true;
    public boolean checkClick_twitter = true;
    public boolean checkClick_linked = true;
    public boolean checkClick_inst = true;
    public boolean checkClick_youtube = true;
    public boolean checkClick_vk = true;
    public boolean checkClick_medium = true;


    View FaceBook = null;
    View TwiTter = null;
    View LinkedIn = null;
    View Instagram = null;
    View YouTube = null;
    View Vkontakte = null;
    View Medium = null;

    public void initIconColor(Contact contact, View view) {
        System.out.println("initicon 1");
        FaceBook = null;
        TwiTter = null;
        LinkedIn = null;
        Instagram = null;
        YouTube = null;
        Vkontakte = null;
        Medium = null;

        ArrayList<SocEnum> listExist = new ArrayList<>();
        LinearLayout linearLayout = view.findViewById(R.id.lineaSocials);
        linearLayout.removeAllViewsInLayout();

        if (contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty()) {
            listExist.add(SocEnum.FACEBOOK);
            FaceBook = getLayoutInflater().inflate(R.layout.social_facebook, null);

            Drawable color = new ColorDrawable(Color.parseColor("#475993"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});

            ((ImageView) FaceBook.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
            linearLayout.addView(FaceBook);

        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())) {
            listExist.add(SocEnum.TWITTER);
            TwiTter = getLayoutInflater().inflate(R.layout.social_twitter, null);

            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) TwiTter.findViewById(R.id.twitter_icon)).setImageDrawable(ld);

            linearLayout.addView(TwiTter);
        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())) {
            listExist.add(SocEnum.LINKEDIN);
            LinkedIn = getLayoutInflater().inflate(R.layout.social_linked, null);

            Drawable color = new ColorDrawable(Color.parseColor("#0077B7"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) LinkedIn.findViewById(R.id.link_icon)).setImageDrawable(ld);

            linearLayout.addView(LinkedIn);
        }

        if ((contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())) {
            listExist.add(SocEnum.INSTAGRAM);
            Instagram = getLayoutInflater().inflate(R.layout.social_insta, null);

            Drawable color = new ColorDrawable(Color.parseColor("#8a3ab9"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) Instagram.findViewById(R.id.inst_icon)).setImageDrawable(ld);

            linearLayout.addView(Instagram);
        }

        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())) {
            listExist.add(SocEnum.YOUTUBE);
            YouTube = getLayoutInflater().inflate(R.layout.social_youtube, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#ed2524"));
            Drawable imagev = getResources().getDrawable(R.drawable.ic_youtube_white);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) YouTube.findViewById(R.id.youtube_icon)).setImageDrawable(ldv);

            linearLayout.addView(YouTube);
        }

        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())) {
            listExist.add(SocEnum.VK);
            Vkontakte = getLayoutInflater().inflate(R.layout.social_vk, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) Vkontakte.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

            linearLayout.addView(Vkontakte);
        }

        if (listExist.size() < 4 && (contact.getSocialModel() != null && contact.getSocialModel().getMediumLink() != null && !contact.getSocialModel().getMediumLink().isEmpty())) {
            listExist.add(SocEnum.MEDIUM);
            Medium = getLayoutInflater().inflate(R.layout.social_medium, null);

            Drawable colorv = new ColorDrawable(Color.parseColor("#000000"));
            Drawable imagev = getResources().getDrawable(R.drawable.medium_white);
            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
            ((ImageView) Medium.findViewById(R.id.medium_icon)).setImageDrawable(ldv);

            linearLayout.addView(Medium);
        }


        if (linearLayout.getChildCount() < 4) {
            while (true) {
                if (!listExist.contains(SocEnum.FACEBOOK)) {
                    FaceBook = getLayoutInflater().inflate(R.layout.social_facebook, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getActivity().getResources().getDrawable(R.drawable.icn_social_facebook2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) FaceBook.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

                    linearLayout.addView(FaceBook);
                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.TWITTER)) {
                    TwiTter = getLayoutInflater().inflate(R.layout.social_twitter, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) TwiTter.findViewById(R.id.twitter_icon)).setImageDrawable(ld);

                    linearLayout.addView(TwiTter);
                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.LINKEDIN)) {
                    LinkedIn = getLayoutInflater().inflate(R.layout.social_linked, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) LinkedIn.findViewById(R.id.link_icon)).setImageDrawable(ld);

                    linearLayout.addView(LinkedIn);
                }
                if (linearLayout.getChildCount() == 4) break;

                if (!listExist.contains(SocEnum.INSTAGRAM)) {
                    Instagram = getLayoutInflater().inflate(R.layout.social_insta, null);

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) Instagram.findViewById(R.id.inst_icon)).setImageDrawable(ld);

                    linearLayout.addView(Instagram);
                }
                if (linearLayout.getChildCount() == 4) break;

            }
        }


        if (FaceBook != null) {
            FaceBook.findViewById(R.id.facebook_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM NEW");

                    ImageView cImg = ((ImageView) FaceBook.findViewById(R.id.facebook_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.FACEBOOK) && checkClick_facebook) {
                                checkClick_facebook = false;
                                int colorFrom = Color.parseColor("#475993");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_facebook = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_facebook) {
                                if (listExist.contains(SocEnum.FACEBOOK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#475993");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.FACEBOOK)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#475993");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_facebook) {
                                if (listExist.contains(SocEnum.FACEBOOK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#475993");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, FaceBook);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, FaceBook);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            FaceBook.findViewById(R.id.facebook_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }

                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);
                        return true;
                    }
                    return false;
                }
            });


            FaceBook.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.facebook_social).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        Intent intent;
                        if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }

                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else {
                            //System.out.println("text = ");
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink().replace("fb","facebook")));
                        }


                        //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href="+contact.getSocialModel().getFacebookLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                        /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                              intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                              startActivity(intent2);*/

                            try {
                                String uri = contact.getSocialModel().getFacebookLink();
                                if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                                    uri = "https://" + uri;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uri));
                                startActivity(i);
                            } catch (Exception e) {

                            }

                        } else
                            startActivity(intent);
                    }


                }
            });
        }


        if (TwiTter != null) {
            TwiTter.findViewById(R.id.twitter_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) TwiTter.findViewById(R.id.twitter_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.TWITTER) && checkClick_twitter) {
                                checkClick_twitter = false;
                                int colorFrom = Color.parseColor("#2ca7e0");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_twitter = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_twitter) {
                                if (listExist.contains(SocEnum.TWITTER)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#2ca7e0");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.TWITTER)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_twitter) {
                                if (listExist.contains(SocEnum.TWITTER)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#2ca7e0");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_twitter = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, TwiTter);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_twitter = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, TwiTter);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            TwiTter.findViewById(R.id.twitter_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.twitter_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getTwitterLink();
                        if (text.contains("twitter.com/")) {
                            text = text.substring(text.indexOf(".com/") + 5);
                        }
                        if (text.length() > 0 && text.charAt(0) == '@') text = text.substring(1);
                        Intent intent = null;
                        try {
                            // get the Twitter app if possible

                            getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        } catch (Exception e) {
                            // no Twitter app, revert to browser
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                        }
                        getActivity().startActivity(intent);


                    }


                }
            });

            TwiTter.findViewById(R.id.twitter_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                        String name = contact.getName();

                        if (name == null || name.trim().isEmpty()) return false;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));

                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())

                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));

                        } else {
                            //   if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                        return true;
                    }
                    return false;
                }
            });

        }

        if (LinkedIn != null) {
            LinkedIn.findViewById(R.id.link_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) LinkedIn.findViewById(R.id.link_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.LINKEDIN) && checkClick_linked) {
                                checkClick_linked = false;
                                int colorFrom = Color.parseColor("#0077B7");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_linked = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_linked) {
                                if (listExist.contains(SocEnum.LINKEDIN)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#0077B7");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.LINKEDIN)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_linked) {
                                if (listExist.contains(SocEnum.LINKEDIN)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#0077B7");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, LinkedIn);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, LinkedIn);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });


            LinkedIn.findViewById(R.id.link_icon).setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //   if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //   else
                            //       i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));

                        } else {
                            //    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));

                        }

                        startActivity(i);
                        return true;
                    }

                    return false;
                }
            });


            LinkedIn.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.linkedLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        } else {
                            try {
                                startActivity(intent);
                            } catch (Exception e) {
                                Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                                startActivity(intent2);
                            }


                        }
                    }


                }
            });
        }

        if (Instagram != null) {
            Instagram.findViewById(R.id.inst_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Instagram.findViewById(R.id.inst_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.INSTAGRAM) && checkClick_inst) {
                                checkClick_inst = false;
                                int colorFrom = Color.parseColor("#8a3ab9");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_inst = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_inst) {
                                if (listExist.contains(SocEnum.INSTAGRAM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#8a3ab9");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.INSTAGRAM)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_inst) {
                                if (listExist.contains(SocEnum.INSTAGRAM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#8a3ab9");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Instagram);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Instagram);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Instagram.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty()) {
                        //   closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.instagramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        System.out.println("Go Insta");

                        //if(contact.getSocialModel().getInstagramLink() == null) return;
                        try {
                            String str = contact.getSocialModel().getInstagramLink();
                            if (!str.toLowerCase().contains("instagram")) {
                                str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                            }

                            if (!str.contains("http://") && !str.contains("https://")) {
                                str = "https://" + contact.getSocialModel().getInstagramLink();
                            }

                            Uri uri = Uri.parse(str);
                            Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                            likeIng.setPackage("com.instagram.android");
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                                  intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                                  startActivity(intent2);*/

                                try {
                                    String uris = contact.getSocialModel().getInstagramLink();
                                    if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e) {

                                }

                            } else
                                startActivity(likeIng);
                        } catch (Exception e) {

                        }
                    }


                }
            });
        }

        if (YouTube != null) {
            YouTube.findViewById(R.id.youtube_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) YouTube.findViewById(R.id.youtube_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.YOUTUBE) && checkClick_youtube) {
                                checkClick_youtube = false;
                                int colorFrom = Color.parseColor("#ed2524");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_youtube = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_youtube) {
                                if (listExist.contains(SocEnum.YOUTUBE)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#ed2524");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.YOUTUBE)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#ed2524");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_youtube) {
                                if (listExist.contains(SocEnum.YOUTUBE)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#ed2524");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_youtube = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, YouTube);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_youtube = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, YouTube);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            YouTube.findViewById(R.id.youtube_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getYoutubeLink() == null || contact.getSocialModel().getYoutubeLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.youtube_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        System.out.println("GG 2");
                        String text = contact.getSocialModel().getYoutubeLink();
                        if (text.contains("youtu.be/") || text.contains("watch?v=")) {
                            if (text.contains("youtu.be/"))
                                text = text.substring(text.indexOf("youtu.be/") + 9);
                            else if (text.contains("watch?v="))
                                text = text.substring(text.indexOf("watch?v=") + 8);

                            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + text));

                            Intent webIntent = new Intent(Intent.ACTION_VIEW,
                                    Uri.parse("http://www.youtube.com/watch?v=" + text));

                            try {
                                getContext().startActivity(appIntent);
                            } catch (ActivityNotFoundException ex) {
                                getContext().startActivity(webIntent);
                            }
                        } else if (text.contains("user/") || text.contains("channel/") || text.contains("/c/")) {
                            try {
                                getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(text)));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }


                    }


                }
            });
        }

        if (Vkontakte != null) {
            Vkontakte.findViewById(R.id.vk_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Vkontakte.findViewById(R.id.vk_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.VK) && checkClick_vk) {
                                checkClick_vk = false;
                                int colorFrom = Color.parseColor("#507299");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_vk = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_vk) {
                                if (listExist.contains(SocEnum.VK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#507299");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.VK)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#507299");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_vk) {
                                if (listExist.contains(SocEnum.VK)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#507299");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Vkontakte);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Vkontakte);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Vkontakte.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getVkLink() == null || contact.getSocialModel().getVkLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.vk_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                /*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*/
                                try {
                                    String uris = contact.getSocialModel().getVkLink();
                                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e2) {

                                }
                            } else
                                startActivity(intent2);
                        }
                    }


                }
            });
        }


        if (Medium != null) {
            Medium.findViewById(R.id.medium_icon).setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    System.out.println("CLICK WATS ANIM");

                    ImageView cImg = ((ImageView) Medium.findViewById(R.id.medium_icon));
                    //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                    //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                    switch (motionEvent.getAction()) {
                        case MotionEvent.ACTION_DOWN: {

                            if (listExist.contains(SocEnum.MEDIUM) && checkClick_medium) {
                                checkClick_medium = false;
                                int colorFrom = Color.parseColor("#000000");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            } else {
                                checkClick_medium = false;
                                int colorFrom = Color.parseColor("#e2e5e8");
                                int colorTo = Color.parseColor("#F9A825");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                            }

                            //     OnTouchMethod(textView);
                            break;
                        }
                        case MotionEvent.ACTION_UP: {
                            if (!checkClick_medium) {
                                if (listExist.contains(SocEnum.MEDIUM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#000000");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }
                            }
                            break;
                        }
                        case MotionEvent.ACTION_CANCEL: {
                            if (listExist.contains(SocEnum.MEDIUM)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#000000");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                            }
                            break;
                        }
                        case MotionEvent.ACTION_MOVE: {
                            if (!checkClick_medium) {
                                if (listExist.contains(SocEnum.MEDIUM)) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#000000");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_medium = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Medium);
                                } else {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_medium = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, Medium);
                                }
                            }

                            break;
                        }
                    }

                    return false;
                }
            });

            Medium.findViewById(R.id.medium_icon).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    if (contact.getSocialModel() == null || contact.getSocialModel().getMediumLink() == null || contact.getSocialModel().getMediumLink().isEmpty()) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.medium_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        /*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                *//*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*//*
                                try {
                                    String uris = contact.getSocialModel().getVkLink();
                                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e2) {

                                }
                            } else
                                startActivity(intent2);
                        }*/

                        try {

                            String uri = contact.getSocialModel().getMediumLink();
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));
                            startActivity(i);
                        } catch (Exception e) {

                        }
                    }


                }
            });
        }


        //linearLayout.addView(v);


        View vi = view;

        if (contact.hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#75B73B"));
            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
        }
        // 48BB5F

        view.findViewById(R.id.whatsapp_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.whatsapp_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick = false;
                        if (contact.hasWhatsapp) {
                            int colorFrom = Color.parseColor("#75B73B");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick) {
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#75B73B");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasWhatsapp) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#75B73B");
                            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick) {
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#75B73B");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3);
                                checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.whatsapp_new_3_gray);
                                checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasWhatsapp || contact.getSocialModel() == null || contact.getSocialModel().getWhatsappLink() == null || contact.getSocialModel().getWhatsappLink().isEmpty()) {
                    //  closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.whatsapp_link).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                    String whatsappNum = contact.getSocialModel().getWhatsappLink();

                    if (/*whatsappNum.substring(0, 2).equalsIgnoreCase("+8") ||*/ whatsappNum.charAt(0) == '8') {
                        whatsappNum = whatsappNum.replaceFirst("8", "7");
                    }

                    if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                    telegramIntent.setData(Uri.parse("whatsapp://send?phone=" + whatsappNum));
                    telegramIntent.setPackage("com.whatsapp");
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.whatsapp"));
                        startActivity(intent2);
                    } else
                        activityApp.startActivity(Intent.createChooser(telegramIntent, "Open with...").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                }
            }
        });


        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
            Drawable color = new ColorDrawable(Color.parseColor("#7AA5DA"));
            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.telegram_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.telegram_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick_telegram = false;
                        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                            int colorFrom = Color.parseColor("#7AA5DA");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_telegram) {
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#7AA5DA");
                                Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#7AA5DA");
                            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_telegram) {
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#7AA5DA");
                                Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                                checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.telegram_new_1);
                                checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });

        view.findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("TG CLICK");
                if ((!contact.hasTelegram) || (contact.hasTelegram && contact.getSocialModel() == null) || (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() == null)) {
                    //  closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.telegramLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {

                    String username = contact.getSocialModel().getTelegramLink();
                    char firstSymbol = username.charAt(0);
                    String regex = "[0-9]+";
                    username = username.replaceAll("[-() ]", "");
                    if ((firstSymbol == '+' && username.substring(1).matches(regex)) || (firstSymbol != '+' && username.matches(regex))) {
                        //final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                        final String contactId = contact.getIdContact();
                        final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                        if (contactMimeTypeDataId != null) {
                            Intent intent;
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                            intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                            intent.setPackage("org.telegram.messenger");
                            startActivity(intent);
                        } else {
                            Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                startActivity(intent3);
                            } else
                                startActivity(telegramIntent);

                        }

                    } else if ((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) {
                        Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                        if (firstSymbol == '@')
                            username = username.substring(1);
                        else if (username.contains("t.me/") && !username.contains("@"))
                            username = username.substring(5);
                        else if (username.contains("t.me/@"))
                            username = username.substring(6);

                        telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent = new Intent(Intent.ACTION_VIEW);
                            intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                            startActivity(intent);
                        } else
                            startActivity(telegramIntent);
                    }


              /*  Intent intent;
                    final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                    final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(),contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                    if (contactMimeTypeDataId != null) {
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                        intent.setPackage("org.telegram.messenger");
                    } else {
                        intent = new Intent(Intent.ACTION_VIEW);
                        intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                        //startActivity(intent2);
                    }

                    startActivity(intent);*/

           /*         Intent  telegramIntent = new Intent(Intent.ACTION_VIEW);
                    String username = contact.getSocialModel().getTelegramLink();
                    char firstSymbol = username.charAt(0);
                    if(firstSymbol == '@')
                        username = username.substring(1);
                    telegramIntent.setData(Uri.parse("tg://resolve?domain="+username));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if(!isIntentSafe){
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                        startActivity(intent2);
                    }else
                        startActivity(telegramIntent);*/
                }
            }
        });


        if (contact.hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#6F3FAA"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.viber_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.viber_icon));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        checkClick_viber = false;
                        if (contact.hasViber) {

                            int colorFrom = Color.parseColor("#6F3FAA");
                            int colorTo = Color.parseColor("#F9A825");

                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);

                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_viber) {
                            if (contact.hasViber) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#6F3FAA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasViber) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#6F3FAA");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_viber) {
                            if (contact.hasViber) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#6F3FAA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });

        view.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (!contact.hasViber || contact.getSocialModel() == null || contact.getSocialModel().getViberLink() == null || contact.getSocialModel().getViberLink().isEmpty()) {
                    //   closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.viberLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent intent;
                    final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getViberLink()));
                    final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.com.viber.voip.viber_number_message");
                    if (contactMimeTypeDataId != null) {
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                        intent.setPackage("com.viber.voip");
                    } else {
                        intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + Uri.encode(String.valueOf(contact.getSocialModel().getViberLink()))));
                        intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                    }

                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.viber.voip"));
                        startActivity(intent2);
                    } else
                        startActivity(intent);
                }
            }
        });


        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#1eb8ff"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.skype_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.skype_icon));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick_skype = false;
                        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                            int colorFrom = Color.parseColor("#1eb8ff");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_skype) {
                            if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#1eb8ff");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#1eb8ff");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_skype) {
                            if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#1eb8ff");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasSkype || contact.getSocialModel() == null || contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) {
                    //   closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.skypeLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    //Uri skypeUri = Uri.parse("skype:" + contact.getSocialModel().getSkypeLink() + "?chat");
                    Uri skypeUri = Uri.parse("skype:echo123?chat");
                    Intent myIntent = new Intent(Intent.ACTION_VIEW, skypeUri);
                    myIntent.setComponent(new ComponentName("com.skype.raider", "com.skype.raider.Main"));
                    myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                    /*ApplicationInfo applicationInfo = null;
                    try {
                        applicationInfo = activityApp.getPackageManager().getApplicationInfo("com.skype.raider", 0);
                        boolean isAppEnabled = applicationInfo.enabled;
                        System.out.println("SKYPE = "+isAppEnabled);
                    } catch (PackageManager.NameNotFoundException e) {
                        e.printStackTrace();
                    }*/


                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(myIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.skype.raider"));
                        startActivity(intent2);
                    } else
                        startActivity(myIntent);
                }
            }
        });




        /*if (contact.hasFacebook && contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#475993"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});

            ((ImageView) view.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getActivity().getResources().getDrawable(R.drawable.icn_social_facebook2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
        }


        View vi = view;

        view.findViewById(R.id.facebook_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) vi.findViewById(R.id.facebook_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasFacebook && checkClick_facebook) {
                            checkClick_facebook = false;
                            int colorFrom = Color.parseColor("#475993");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_facebook = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_facebook) {
                            if (contact.hasFacebook) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#475993");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasFacebook) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#475993");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_facebook) {
                            if (contact.hasFacebook) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#475993");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                checkClick_facebook = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasFacebook || contact.getSocialModel() == null || contact.getSocialModel().getFacebookLink() == null || contact.getSocialModel().getFacebookLink().isEmpty()) {
                    //    closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.facebook_social).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {

                    Intent intent;
                    if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
                        String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
                        if (idProfile.contains("&")) {
                            idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                        }
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                    } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
                        String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
                        if (idProfile.contains("&")) {
                            idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                        }

                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                    } else
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink()));

                    //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href="+contact.getSocialModel().getFacebookLink()));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        *//*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                        startActivity(intent2);*//*

                        try {
                            String uri = contact.getSocialModel().getFacebookLink();
                            if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));
                            startActivity(i);
                        } catch (Exception e) {

                        }

                    } else
                        startActivity(intent);
                }
            }
        });

        //   ((ImageView) view.findViewById(R.id.whatsapp_icon))
        //           .setImageResource(contact.hasWhatsapp ? R.drawable.icn_social_whatsapp : R.drawable.icn_social_whatsapp_gray);

        if (contact.hasWhatsapp && contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#75B73B"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);
        }
        // 48BB5F

        *//*Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
        ((CircleImageView) mainView.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld);



*//*

        view.findViewById(R.id.whatsapp_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.whatsapp_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick = false;
                        if (contact.hasWhatsapp) {
                            int colorFrom = Color.parseColor("#75B73B");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick) {
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#75B73B");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasWhatsapp) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#75B73B");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick) {
                            if (contact.hasWhatsapp) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#75B73B");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                                checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                checkClick = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasWhatsapp || contact.getSocialModel() == null || contact.getSocialModel().getWhatsappLink() == null || contact.getSocialModel().getWhatsappLink().isEmpty()) {
                    //  closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.whatsapp_link).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                    String whatsappNum = contact.getSocialModel().getWhatsappLink();
                    if (whatsappNum.substring(0, 2).equalsIgnoreCase("+8") || whatsappNum.charAt(0) == '8') {
                        whatsappNum = whatsappNum.replaceFirst("8", "7");
                    }

                    if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                    telegramIntent.setData(Uri.parse("whatsapp://send?phone=" + whatsappNum));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.whatsapp"));
                        startActivity(intent2);
                    } else
                        startActivity(telegramIntent);
                }
            }
        });


        *//*((ImageView) view.findViewById(R.id.telegram_icon))
                .setImageResource(contact.hasTelegram ? R.drawable.icn_social_telegram : R.drawable.icn_social_telegram_gray);*//*

        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
            Drawable color = new ColorDrawable(Color.parseColor("#7AA5DA"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.telegram_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.telegram_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.telegram_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick_telegram = false;
                        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                            int colorFrom = Color.parseColor("#7AA5DA");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_telegram) {
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#7AA5DA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#7AA5DA");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_telegram) {
                            if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#7AA5DA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                checkClick_telegram = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });



        *//*Drawable color2 = new ColorDrawable(Color.parseColor("#7AA5DA"));
        Drawable image2 = getResources().getDrawable(R.drawable.icn_social_telegram2);
        LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color2, image2});
        ((CircleImageView) mainView.findViewById(R.id.telegram_icon)).setImageDrawable(ld3);*//*


        view.findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("TG CLICK");
                if ((!contact.hasTelegram) || (contact.hasTelegram && contact.getSocialModel() == null) || (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() == null)) {
                    //  closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.telegramLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {

                    String username = contact.getSocialModel().getTelegramLink();
                    char firstSymbol = username.charAt(0);
                    String regex = "[0-9]+";
                    username = username.replaceAll("[-() ]", "");
                    if ((firstSymbol == '+' && username.substring(1).matches(regex)) || (firstSymbol != '+' && username.matches(regex))) {
                        //final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                        final String contactId = contact.getIdContact();
                        final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                        if (contactMimeTypeDataId != null) {
                            Intent intent;
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                            intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                            intent.setPackage("org.telegram.messenger");
                            startActivity(intent);
                        } else {
                            Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                startActivity(intent3);
                            } else
                                startActivity(telegramIntent);

                        }

                    } else if ((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) {
                        Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                        if (firstSymbol == '@')
                            username = username.substring(1);
                        telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent = new Intent(Intent.ACTION_VIEW);
                            intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                            startActivity(intent);
                        } else
                            startActivity(telegramIntent);
                    }


              *//*  Intent intent;
                final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(),contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                if (contactMimeTypeDataId != null) {
                    intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                    intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                    intent.setPackage("org.telegram.messenger");
                } else {
                    intent = new Intent(Intent.ACTION_VIEW);
                    intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                    //startActivity(intent2);
                }

                    startActivity(intent);*//*

         *//*         Intent  telegramIntent = new Intent(Intent.ACTION_VIEW);
                    String username = contact.getSocialModel().getTelegramLink();
                    char firstSymbol = username.charAt(0);
                    if(firstSymbol == '@')
                        username = username.substring(1);
                    telegramIntent.setData(Uri.parse("tg://resolve?domain="+username));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if(!isIntentSafe){
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                        startActivity(intent2);
                    }else
                        startActivity(telegramIntent);*//*
                }
            }
        });
    *//*    ((ImageView) view.findViewById(R.id.link_icon))
                .setImageResource(contact.hasLinked ? R.drawable.icn_social_linkedin : R.drawable.icn_social_linkedin_gray);*//*

        if (contact.hasLinked && contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#0077B7"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.link_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.link_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.link_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) vi.findViewById(R.id.link_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasLinked && checkClick_linked) {
                            checkClick_linked = false;
                            int colorFrom = Color.parseColor("#0077B7");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_linked = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_linked) {
                            if (contact.hasLinked) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasLinked) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#0077B7");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_linked) {
                            if (contact.hasLinked) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#0077B7");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                checkClick_linked = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasLinked || contact.getSocialModel() == null || contact.getSocialModel().getLinkedInLink() == null || contact.getSocialModel().getLinkedInLink().isEmpty()) {
                    //    closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.linkedLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                        startActivity(intent2);
                    } else {
                        try {
                            startActivity(intent);
                        } catch (Exception e) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        }


                    }
                }
            }
        });
       *//* ((ImageView) view.findViewById(R.id.viber_icon))
                .setImageResource(contact.hasViber ? R.drawable.icn_social_viber : R.drawable.icn_social_viber_gray);*//*
        if (contact.hasViber && contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#6F3FAA"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.viber_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.viber_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.viber_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        System.out.println("Click Viber");
                        checkClick_viber = false;
                        if (contact.hasViber) {
                            System.out.println("Click Viber2");
                            int colorFrom = Color.parseColor("#6F3FAA");
                            int colorTo = Color.parseColor("#F9A825");
                            System.out.println("Click Viber3");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                            System.out.println("Click Viber4");
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_viber) {
                            if (contact.hasViber) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#6F3FAA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasViber) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#6F3FAA");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_viber) {
                            if (contact.hasViber) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#6F3FAA");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
                                checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                checkClick_viber = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        *//*Drawable color = new ColorDrawable(Color.parseColor("#6F3FAA"));
        Drawable image = getResources().getDrawable(R.drawable.icn_social_viber2);
        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
        ((CircleImageView) mainView.findViewById(R.id.viber_icon)).setImageDrawable(ld);*//*


        view.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (!contact.hasViber || contact.getSocialModel() == null || contact.getSocialModel().getViberLink() == null || contact.getSocialModel().getViberLink().isEmpty()) {
                    //   closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.viberLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Intent intent;
                    final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getViberLink()));
                    final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.com.viber.voip.viber_number_message");
                    if (contactMimeTypeDataId != null) {
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                        intent.setPackage("com.viber.voip");
                    } else {
                        intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + Uri.encode(String.valueOf(contact.getSocialModel().getViberLink()))));
                        intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                    }

                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.viber.voip"));
                        startActivity(intent2);
                    } else
                        startActivity(intent);
                }
            }
        });
       *//* ((ImageView) view.findViewById(R.id.vk_icon))
                .setImageResource(contact.hasVk ? R.drawable.icn_social_vk : R.drawable.icn_social_vk_gray);*//*


        if (contact.hasTwitter && contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#2ca7e0"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.vk_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.vk_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.vk_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) vi.findViewById(R.id.vk_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasTwitter && checkClick_vk) {
                            checkClick_vk = false;
                            int colorFrom = Color.parseColor("#2ca7e0");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_vk = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_vk) {
                            if (contact.hasTwitter) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasTwitter) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#2ca7e0");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_vk) {
                            if (contact.hasTwitter) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#2ca7e0");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                checkClick_vk = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasTwitter || contact.getSocialModel() == null || contact.getSocialModel().getTwitterLink() == null || contact.getSocialModel().getTwitterLink().isEmpty()) {
                    //    closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.twitter_link).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    *//*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getTwitterLink())));
                    Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                    try {
                        startActivity(intent);
                    } catch (ActivityNotFoundException e) {
                        e.printStackTrace();
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent3 = new Intent(Intent.ACTION_VIEW);
                            intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                            startActivity(intent3);
                        } else
                            startActivity(intent2);
                    }*//*

                    String text = contact.getSocialModel().getTwitterLink();
                    if (text.contains("twitter.com/")) {
                        text = text.substring(text.indexOf(".com/") + 5);
                    }
                    Intent intent = null;
                    try {
                        // get the Twitter app if possible

                        getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    } catch (Exception e) {
                        // no Twitter app, revert to browser
                        intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                    }
                    getActivity().startActivity(intent);
                }
            }
        });

       *//* ((ImageView) view.findViewById(R.id.skype_icon))
                .setImageResource(contact.hasSkype ? R.drawable.icn_social_skype : R.drawable.icn_social_skype_gray);*//*

         *//* Drawable color = new ColorDrawable(Color.parseColor("#1eb8ff"));
        Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
        ((CircleImageView) mainView.findViewById(R.id.skype_icon)).setImageDrawable(ld);*//*

        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#1eb8ff"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((CircleImageView) view.findViewById(R.id.skype_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.skype_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                CircleImageView cImg = ((CircleImageView) vi.findViewById(R.id.skype_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        checkClick_skype = false;
                        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                            int colorFrom = Color.parseColor("#1eb8ff");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            AnimColorMessenger.ActionDown(colorFrom, colorTo, image, cImg);
                        }
                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_skype) {
                            if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#1eb8ff");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                AnimColorMessenger.ActionUp(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#1eb8ff");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            AnimColorMessenger.ActionCancel(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_skype) {
                            if (contact.hasSkype && contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty()) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#1eb8ff");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2);
                                checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                checkClick_skype = AnimColorMessenger.ActionMove(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasSkype || contact.getSocialModel() == null || contact.getSocialModel().getSkypeLink() == null || contact.getSocialModel().getSkypeLink().isEmpty()) {
                    //   closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.skypeLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    Uri skypeUri = Uri.parse("skype:" + contact.getSocialModel().getSkypeLink() + "?chat");
                    Intent myIntent = new Intent(Intent.ACTION_VIEW, skypeUri);
                    myIntent.setComponent(new ComponentName("com.skype.raider", "com.skype.raider.Main"));
                    myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                    PackageManager packageManager = getActivity().getPackageManager();
                    List<ResolveInfo> activities = packageManager.queryIntentActivities(myIntent, 0);
                    boolean isIntentSafe = activities.size() > 0;
                    if (!isIntentSafe) {
                        Intent intent2 = new Intent(Intent.ACTION_VIEW);
                        intent2.setData(Uri.parse("market://details?id=com.skype.raider"));
                        startActivity(intent2);
                    } else
                        startActivity(myIntent);
                }
            }
        });
        *//*((ImageView) view.findViewById(R.id.inst_icon))
                .setImageResource(contact.hasInst ? R.drawable.icn_social_instagram : R.drawable.icn_social_instagram_gray);*//*

        if (contact.hasInst && contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty()) {
            Drawable color = new ColorDrawable(Color.parseColor("#8a3ab9"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.inst_icon)).setImageDrawable(ld);
        } else {
            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
            ((ImageView) view.findViewById(R.id.inst_icon)).setImageDrawable(ld);
        }


        view.findViewById(R.id.inst_icon).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK WATS ANIM");

                ImageView cImg = ((ImageView) vi.findViewById(R.id.inst_icon));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {

                        if (contact.hasInst && checkClick_inst) {
                            checkClick_inst = false;
                            int colorFrom = Color.parseColor("#8a3ab9");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        } else {
                            checkClick_inst = false;
                            int colorFrom = Color.parseColor("#e2e5e8");
                            int colorTo = Color.parseColor("#F9A825");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                        }

                        //     OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        if (!checkClick_inst) {
                            if (contact.hasInst) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                            }
                        }
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        if (contact.hasInst) {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#8a3ab9");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        } else {
                            int colorFrom = Color.parseColor("#F9A825");
                            int colorTo = Color.parseColor("#e2e5e8");
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                            AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);
                        }
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        if (!checkClick_inst) {
                            if (contact.hasInst) {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#8a3ab9");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            } else {
                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                checkClick_inst = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);
                            }
                        }

                        break;
                    }
                }

                return false;
            }
        });


        view.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!contact.hasInst || ((contact.getSocialModel() == null) || (contact.getSocialModel() != null && (contact.getSocialModel().getInstagramLink() == null || contact.getSocialModel().getInstagramLink().isEmpty())))) {
                    //   closeOtherPopup();
                    closeChildPopups();
                    showSocialPopup(contact);
                    socialPopup.findViewById(R.id.instagramLink).callOnClick();
                    socialPopup.setVisibility(View.GONE);
                } else {
                    System.out.println("Go Insta");

                    //if(contact.getSocialModel().getInstagramLink() == null) return;
                    try {
                        String str = contact.getSocialModel().getInstagramLink();
                        if (!str.contains("instagram")) {
                            str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                        }

                        if (!str.contains("http://") && !str.contains("https://")) {
                            str = "https://" + contact.getSocialModel().getInstagramLink();
                        }

                        Uri uri = Uri.parse(str);
                        Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                        likeIng.setPackage("com.instagram.android");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            *//*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*//*

                            try {
                                String uris = contact.getSocialModel().getInstagramLink();
                                if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }

                        } else
                            startActivity(likeIng);
                    } catch (Exception e) {

                    }
                }
            }
        });*/


        System.out.println("initicon 1");
    }


    private String getContactIdFromPhoneNumber(String phone) {
        final Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phone));
        final ContentResolver contentResolver = getActivity().getContentResolver();
        final Cursor phoneQueryCursor = contentResolver.query(uri, new String[]{ContactsContract.PhoneLookup._ID}, null, null, null);
        if (phoneQueryCursor != null) {
            if (phoneQueryCursor.moveToFirst()) {
                String result = phoneQueryCursor.getString(phoneQueryCursor.getColumnIndex(ContactsContract.PhoneLookup._ID));
                phoneQueryCursor.close();
                return result;
            }
            phoneQueryCursor.close();
        }
        return null;
    }

    public String getContactMimeTypeDataId(@NonNull Context context, String contactId, @NonNull String mimeType) {
        if (TextUtils.isEmpty(mimeType))
            return null;
        ContentResolver cr = context.getContentResolver();
        Cursor cursor = null;
        try {
            cursor = cr.query(ContactsContract.Data.CONTENT_URI, new String[]{ContactsContract.Data._ID}, ContactsContract.Data.MIMETYPE + "= ? AND "
                    + ContactsContract.Data.CONTACT_ID + "= ?", new String[]{mimeType, contactId}, null);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        if (cursor == null)
            return null;
        if (!cursor.moveToFirst()) {
            cursor.close();
            return null;
        }
        String result = cursor.getString(cursor.getColumnIndex(ContactsContract.Data._ID));
        cursor.close();
        return result;
    }

    public void deleteHashTagsFromUser(String hashtag, Contact contact) {
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                getActivity());
        alertDialogBuilder.setTitle("Do you want to delete " + hashtag + " ?");
        alertDialogBuilder
                .setCancelable(false)
                .setPositiveButton("Yes", (dialog, id) -> {

                    Realm realm = Realm.getDefaultInstance(); //-

                    RealmList<HashTag> listOfHashtags = selectedContact.getListOfHashtags();
                    for (int indexI = 0; indexI < listOfHashtags.size(); indexI++) {
                        if (listOfHashtags.get(indexI).getHashTagValue().equals(hashtag.trim())) {
                            realm.beginTransaction();
                            listOfHashtags.remove(indexI);
                            realm.commitTransaction();
                            contactsService.deleteNoteContact(selectedContact.getIdContact(), hashtag);
                        }

                    }
                    realm.beginTransaction();
                    selectedContact.setListOfHashtags(listOfHashtags);
                    selectedContact.getListOfHashtags().remove(new HashTag(hashtag));
                    realm.commitTransaction();
                    realm.close();
                    ContactCacheService.updateContact(selectedContact, mainView.getContext());


                    //EventBus.getDefault().post(new UpdateFile());
                    //closeOtherPopup();

                    if (popupUserHashtags != null && popupUserHashtags.getVisibility() == View.VISIBLE) {
                        showPopupUserHashtags(contact);
                    }

                    // showPopupUserHashtags(selectedContact);
                    updateHashTags();
                    //ContactAdapter contactAdapter = ContactAdapter.contactAd;
                    adapterC.getContactFragment().initRecyclerHashTags();

                })
                .setNegativeButton("No", (dialog, id) -> {
                    dialog.cancel();
                });

        AlertDialog alertDialog = alertDialogBuilder.create();
        alertDialog.show();
    }


    @Override
    public void updatedUserHashtags(ArrayList<String> updatedHashtags) {

        Realm realm = Realm.getDefaultInstance(); //-

        RealmList<HashTag> listOfHashtag = new RealmList<>();
        ArrayList<String> listForAdapter = new ArrayList<>();

        if (selectedContact.getListOfHashtags() != null)
            for (int i = 0; i < selectedContact.getListOfHashtags().size(); i++) {
                contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getListOfHashtags().get(i).getHashTagValue());
            }

        for (int indexI = 0; indexI < updatedHashtags.size(); indexI++) {
            String hashtag = updatedHashtags.get(indexI);
            if (!listOfHashtag.contains(new HashTag(hashtag)) && hashtag.trim().toString().length() > 0) {
                realm.beginTransaction();
                HashTag ht = realm.createObject(HashTag.class);
                ht.setHashTagValue(hashtag);
                ht.setDate(new Date());
                realm.commitTransaction();
                contactsService.addNoteToContact(selectedContact.getIdContact(), hashtag, selectedContact.getName());
                listOfHashtag.add(ht);
                listForAdapter.add(hashtag);
            }
        }

        realm.beginTransaction();
        selectedContact.setListOfHashtags(listOfHashtag);
        realm.commitTransaction();
        realm.close();
        ContactCacheService.updateContact(selectedContact, mainView.getContext());
        ContactsFragment.UPD_ALL = true;
        customTagsAdapter.setNewContacts(listForAdapter);
        updateAllProfileTags();
        //EventBus.getDefault().post(new UpdateFile());

    }

    private void updateAllProfileTags() {
        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : selectedContact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
            text.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    deleteHashTagsFromUser(text.getText().toString(), selectedContact);
                    return true;
                }
            });
            containerHashTags.addView(text);
        }

        if (selectedContact != null && (selectedContact.getListOfHashtags() == null || selectedContact.getListOfHashtags().size() == 0)) {
            System.out.println("Add Hashtah TExt added");
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.gray));
            text.setText("hashtags");
            text.setOnClickListener(v -> {
                //containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);
        }

    }

    private void penStartEditMode(Contact contact) {
        popupUserHashtags.findViewById(R.id.penEdit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_saving_pig));
                customTagsAdapter.startEditMode();

                popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.GONE);
                popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.VISIBLE);
                EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                editText.setSelection(0);
                editText.setVisibility(View.VISIBLE);
                editText.setText("");
                for (String str : customTagsAdapter.listOfHashtags)
                    editText.append(str + " ");


                penEndEditMode(contact);
            }
        });
    }

    private void penEndEditMode(Contact contact) {
        popupUserHashtags.findViewById(R.id.penEdit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
                customTagsAdapter.stopEditMode();

                EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                String s = editText.getText().toString().trim();
                String[] magicSplit = s.split(" ");

                String findStr = s.toString();

                ArrayList<String> listHash = new ArrayList<>();
                if (magicSplit.length > 0) {
                    findStr = magicSplit[magicSplit.length - 1];

                    for (int i = 0; i < magicSplit.length; i++) {
                        if (magicSplit[i].length() > 1 && magicSplit[i].charAt(0) == '#')
                            listHash.add(magicSplit[i]);
                    }


                }
                System.out.println("HASHTAGS LENG = " + magicSplit.toString());


                updatedUserHashtags(listHash);

                popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
                popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
                EditText editText2 = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                editText2.setVisibility(View.GONE);

                ArrayList<String> tags = new ArrayList<>();

                for (HashTag hashTag : contact.getListOfHashtags()) {

                    tags.add(hashTag.getHashTagValue());
                }


                LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
                linearLayout.removeAllViews();

                for (HashTag hashTag : contact.getListOfHashtags()) {
                    TextView text = new TextView(getActivity());
                    text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                    DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                    text.setLayoutParams(new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                    text.setTextColor(getResources().getColor(R.color.colorPrimary));
                    text.setText(hashTag.getHashTagValue() + " ");
                    text.setOnClickListener(v1 -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
                    text.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {
                            deleteHashTagsFromUser(text.getText().toString(), contact);
                            return true;
                        }
                    });
                    linearLayout.addView(text);
                }

                /*if (contact != null && (contact.getListOfHashtags() == null || contact.getListOfHashtags().size() == 0)) {
                    System.out.println("Add Hashtah TExt added");
                    TextView text = new TextView(getActivity());
                    text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                    //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                    text.setLayoutParams(new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                    text.setTextColor(getResources().getColor(R.color.gray));
                    text.setText("hashtags");
                    text.setOnClickListener(v1 -> {
                        linearLayout.removeAllViews();
                        showPopupUserHashtags(selectedContact);
                    });
                    linearLayout.addView(text);
                }*/

                //linearLayout.addView(textView);

                HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
                if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                scrollView.addView(linearLayout);
                scrollView.setSmoothScrollingEnabled(false);
                scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                scrollView.setSmoothScrollingEnabled(true);


                penStartEditMode(contact);
            }
        });
    }

    private void showPopupUserHashtags(Contact contact) {
        System.out.println("Show popup hashtag");
        popupUserHashtags = (FrameLayout) getActivity().findViewById(R.id.popupProfileHashtags123);
        popupUserHashtags.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        int nowCount = 0;

        ArrayList<String> tags = new ArrayList<>();

        for (HashTag hashTag : contact.getListOfHashtags()) {

            tags.add(hashTag.getHashTagValue());
        }

        LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
        linearLayout.removeAllViews();

        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
            text.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    deleteHashTagsFromUser(text.getText().toString(), contact);
                    return true;
                }
            });
            linearLayout.addView(text);
        }


        // linearLayout.addView(textView);

        HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
        scrollView.addView(linearLayout);
        scrollView.setSmoothScrollingEnabled(false);
        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
        scrollView.setSmoothScrollingEnabled(true);

        popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
        popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
        EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
        editText.setVisibility(View.GONE);

        //=========================

        popupUserHashtags.findViewById(R.id.inviteFriend).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent shareIntent = new Intent(Intent.ACTION_SEND);
                shareIntent.setType("text/plain");
                String friends = "";

                for (HashTag hashtag : contact.getListOfHashtags()) {
                    friends = friends + " " + hashtag.getHashTagValue();
                }

                shareIntent.putExtra(Intent.EXTRA_TEXT, "Join call2me community - i add to your card following tags: " + friends);
                startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
            }
        });

        customTagsAdapter = new CustomTagsAdapter(tags, contact, this);
        RecyclerView customTagsContainer = (RecyclerView) popupUserHashtags.findViewById(R.id.customTagsContainer);
        RecyclerView.LayoutManager customLR = new LinearLayoutManager(mainView.getContext());
        customTagsContainer.setLayoutManager(customLR);
        customTagsContainer.setItemAnimator(new DefaultItemAnimator());
        customTagsContainer.setAdapter(customTagsAdapter);
        ((ImageView) popupUserHashtags.findViewById(R.id.penEdit)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_pencil));
        penStartEditMode(contact);
        String[] suggest = {"#timesoftware", "#another", "#goodboy", "#smile"};
        List<String> suggestTags = Arrays.asList(suggest);
        HashtagMasstaggingAdapter suggestTagsAdapter = new HashtagMasstaggingAdapter(suggestTags, this, true, contact);
        containerAssistant = (RecyclerView) popupUserHashtags.findViewById(R.id.assistantSuggestContainer);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerAssistant.setLayoutManager(mLayoutManager);
        containerAssistant.setItemAnimator(new DefaultItemAnimator());
        //   containerAssistant.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        containerAssistant.setAdapter(suggestTagsAdapter);

        ArrayList<HashTagQuantity> listH = new ArrayList<>();
        listH.addAll(((Postman) activityApp).getHashTagsAdapter().getListOfHashtags());
        Collections.sort(listH, new Comparator<HashTagQuantity>() {
            @Override
            public int compare(HashTagQuantity first, HashTagQuantity second) {
                return second.getQuantity() - first.getQuantity();
            }
        });

        String[] most = {"#pr", "#investor", "#VC", "#Media", "#PR"};
        List<String> mostUsed = Arrays.asList(most);
        mostTagAdapter = new MostUsedTagsAdapter(listH, this, true, contact);
        containerMost = (RecyclerView) popupUserHashtags.findViewById(R.id.mostUsedTagsContainer);
        RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerMost.setLayoutManager(mostLayoutManager);
        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        containerMost.setItemAnimator(new DefaultItemAnimator());
        containerMost.setAdapter(mostTagAdapter);

//        popupUserHashtags.findViewById(R.id.backToPreview).setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                popupUserHashtags.setVisibility(View.GONE);
//                getActivity().findViewById(R.id.suggestPopup).setVisibility(View.GONE);
//            }
//        });

        popupUserHashtags.findViewById(R.id.openSuggestPopup).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupUserHashtags.findViewById(R.id.arrowSuggest).getScaleY() != -1f) {
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(-1f);
                    suggestTagsAdapter.showAllTags();
                    mostTagAdapter.showAllTags();
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 140, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 140, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    //showSuggestPopup(popupUserHashtags, contact);
                } else {
                    ViewGroup.LayoutParams mostParams = containerMost.getLayoutParams();
                    mostParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerMost.setLayoutParams(mostParams);
                    ViewGroup.LayoutParams assistantParams = containerAssistant.getLayoutParams();
                    assistantParams.height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());
                    containerAssistant.setLayoutParams(assistantParams);
                    popupUserHashtags.findViewById(R.id.arrowSuggest).setScaleY(1f);
                    popupUserHashtags.setVisibility(View.GONE);
                    showPopupUserHashtags(contact);
                    // getActivity().findViewById(R.id.suggestPopup).setVisibility(View.GONE);
                }
            }
        });
        popupUserHashtags.setVisibility(View.VISIBLE);

        openedViews.add(popupUserHashtags);
    }

    @Override
    public void addHashtagsToSelectedContacts(String hashtag) {
        if (!selectedContact.getListOfHashtags().contains(new HashTag(hashtag))) {
            selectedContact.getListOfHashtags().add(new HashTag(hashtag.trim()));
            ContactCacheService.updateContact(selectedContact, mainView.getContext());
            MainActivity.typeUpdate = "EDIT";
            MainActivity.nameToUpd.clear();
            MainActivity.nameToUpdTypeContact.clear();
            MainActivity.nameToUpd.add(selectedContact.getName());
            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                MainActivity.nameToUpdTypeContact.add(true);
            else
                MainActivity.nameToUpdTypeContact.add(false);
            //EventBus.getDefault().post(new UpdateFile());
            Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
        } else {
            Toast toast = Toast.makeText(mainView.getContext(), "Hashtag already  exist", Toast.LENGTH_SHORT);
            toast.show();
        }

    }

    public void addNewTagToContact(String tag, Contact contact) {
        for (HashTag hashTag : contact.getListOfHashtags()) {
            if (hashTag.getHashTagValue().compareTo(tag) == 0) {
                Toast toast = Toast.makeText(mainView.getContext(), "Hashtag already  exist", Toast.LENGTH_SHORT);
                toast.show();
                return;
            }
        }

        if (popupUserHashtags.findViewById(R.id.ContactHashLinear).getVisibility() == View.VISIBLE) {

            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                    getActivity());
            alertDialogBuilder.setTitle("Do you want to add " + tag + " ?");
            alertDialogBuilder
                    .setCancelable(false)
                    .setPositiveButton("Yes", (dialog, id) -> {
                        customTagsAdapter.addHashTag(tag);

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        contact.getListOfHashtags().add(new HashTag(tag.trim()));
                        realm.commitTransaction();
                        realm.close();
                        ContactCacheService.updateContact(contact, mainView.getContext());
                        contactsService.addNoteToContact(contact.getIdContact(), tag, contact.getName());

                        if (popupUserHashtags.findViewById(R.id.ContactHashLinear).getVisibility() == View.VISIBLE) {

                            ArrayList<String> tags = new ArrayList<>();

                            for (HashTag hashTag : contact.getListOfHashtags()) {

                                tags.add(hashTag.getHashTagValue());
                            }


                            LinearLayout linearLayout = (LinearLayout) popupUserHashtags.findViewById(R.id.containerHashTags);
                            linearLayout.removeAllViews();

                            for (HashTag hashTag : contact.getListOfHashtags()) {
                                TextView text = new TextView(getActivity());
                                text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
                                DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
                                text.setLayoutParams(new LinearLayout.LayoutParams(
                                        LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
                                text.setTextColor(getResources().getColor(R.color.colorPrimary));
                                text.setText(hashTag.getHashTagValue() + " ");
                                text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
                                text.setOnLongClickListener(new View.OnLongClickListener() {
                                    @Override
                                    public boolean onLongClick(View v) {
                                        deleteHashTagsFromUser(text.getText().toString(), contact);
                                        return true;
                                    }
                                });
                                linearLayout.addView(text);
                            }

                            //linearLayout.addView(textView);

                            HorizontalScrollView scrollView = (HorizontalScrollView) popupUserHashtags.findViewById(R.id.scrollHorizontal);
                            if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
                            scrollView.addView(linearLayout);
                            scrollView.setSmoothScrollingEnabled(false);
                            scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
                            scrollView.setSmoothScrollingEnabled(true);

                       /* popupUserHashtags.findViewById(R.id.ContactHashLinear).setVisibility(View.VISIBLE);
                        popupUserHashtags.findViewById(R.id.companyVileEditPreview).setVisibility(View.GONE);
                        EditText editText = (EditText) popupUserHashtags.findViewById(R.id.hashtagsList);
                        editText.setVisibility(View.GONE);*/
                        } else {
                            ((EditText) popupUserHashtags.findViewById(R.id.hashtagsList)).append(tag.trim() + " ");
                        }

                       /* MainActivity.typeUpdate = "EDIT";
                        MainActivity.nameToUpd.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            MainActivity.nameToUpdTypeContact.add(true);
                        else
                            MainActivity.nameToUpdTypeContact.add(false);*/

                        //EventBus.getDefault().post(new UpdateFile());
                        Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
                        ContactsFragment.UPD_ALL = true;
                        addHashtagPreview(tag);
                    })
                    .setNegativeButton("No", (dialog, id) -> dialog.cancel());

            AlertDialog alertDialog = alertDialogBuilder.create();
            alertDialog.show();
        }
        ((EditText) popupUserHashtags.findViewById(R.id.hashtagsList)).append(tag.trim() + " ");

    }

    private void addHashtagPreview(String hashtag) {
        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        TextView text = new TextView(getActivity());
        text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
        text.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        text.setTextColor(getResources().getColor(R.color.colorPrimary));
        text.setText(hashtag + " ");
        containerHashTags.addView(text);
        updateHashTags();
        System.out.println("add prew hash");
    }

    private String getUpdTime(Time time) {
        String timeStr = time.getHours() + ":";
        if (time.getMinutes() < 10) timeStr += "0";
        timeStr += time.getMinutes();
        return timeStr;
    }

    private void getDataFromIntent() {
        //selectedContact
        selectedContact = (Contact) getArguments().getSerializable(CONTACT_EXTRA);
        /*if(c2 != null && c2.isValid()){
            System.out.println("SET VALID");
            selectedContact = c2;
        }*/

        selConact = (Contact) getArguments().getSerializable(CONTACT_EXTRA);

        //if(!selectedContact.isValid()) activityApp.onBackPressed();
        if(selectedContact != null) {
            Realm realm = Realm.getDefaultInstance(); //+
            realm.beginTransaction();

            boolean isListNull = selectedContact.listOfContacts != null;
            boolean isListNotEmpty;
            try {
                isListNotEmpty = !selectedContact.listOfContacts.isEmpty();

                if (isListNull && isListNotEmpty) {
                    for (int i = 0; i < selectedContact.listOfContacts.size(); i++) {
                        for (int j = 0; j < selectedContact.listOfContacts.size(); j++) {
                            if (i != j && selectedContact.listOfContacts.get(i).getId() == selectedContact.listOfContacts.get(j).getId()) {
                                selectedContact.listOfContacts.remove(j);
                                j--;
                            }
                        }
                    }
                }
            }
            catch (IllegalStateException exception) {
                exception.printStackTrace();
            }
            finally {
                realm.commitTransaction();
                realm.close();
            }
        }

        //System.out.println("NEW EDIT1 = " + nowEdit);
        //nowEdit = getArguments().getBoolean(CONTACT_EDIT);
        //System.out.println("NEW EDIT2 = " + nowEdit);
        //System.out.println("PROFILE CONTACT = " + selectedContact.toString());

    }

    private void copyToClipboard(Context context, String text) {
        if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.HONEYCOMB) {
            android.text.ClipboardManager clipboard = (android.text.ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            clipboard.setText(text);
        } else {
            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
            android.content.ClipData clip = android.content.ClipData.newPlainText("Copied Text", text);
            clipboard.setPrimaryClip(clip);
        }
        Toast.makeText(mainView.getContext(), "Copied to clipboard", Toast.LENGTH_SHORT).show();
    }

    public void shareIntent(String text) {
        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.putExtra(Intent.EXTRA_TEXT, text);
        startActivity(Intent.createChooser(shareIntent, "Share"));
    }

    public void addOpenedViews(View view) {
        openedViews.add(view);
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    public void showEditPopupPreviewSocial(Contact contact, SocialEnums typeEnum) {
        popupProfileEditPreviewSocial = (FrameLayout) getActivity().findViewById(R.id.popupPreviewEditSocial);

        //popupProfileEditPreviewSocial.findViewById(R.id.line_preview_social).setVisibility(View.GONE);
        popupProfileEditPreviewSocial.findViewById(R.id.imageView3).setVisibility(View.GONE);

        popupProfileEditPreviewSocial.setVisibility(View.VISIBLE);
        popupProfileEditPreviewSocial.setClickable(true);

        //((ImageView)popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_popup_web_blue));
        openedViews.add(popupProfileEditPreviewSocial);
        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setMovementMethod(new ScrollingMovementMethod());
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageTintMode(null);
        }

        if (typeEnum.equals(SocialEnums.FACEBOOK)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getFacebookLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Facebook");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));
        } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getInstagramLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Instagram");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
        } else if (typeEnum.equals(SocialEnums.VK)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getVkLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Vk");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
        } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getLinkedInLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("LinkedIn");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
        } else if (typeEnum.equals(SocialEnums.SKYPE)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getSkypeLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Skype");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
        } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTelegramLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Telegram");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
        } else if (typeEnum.equals(SocialEnums.VIBER)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getViberLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Viber");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
        } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getWhatsappLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("WhatsApp");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));

        } else if (typeEnum.equals(SocialEnums.TWITTER)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTwitterLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Twitter");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_64));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_64));
        } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getYoutubeLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("YouTube");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
        } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getMediumLink());
            ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).setText("Medium");
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.imageCall)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
            ((ImageView) popupProfileEditPreviewSocial.findViewById(R.id.iconDataC)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
        }

        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).scrollTo(0, 0);

        ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).requestLayout();


        socialPopup.findViewById(R.id.linearSocialWindow).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                popupProfileEditPreviewSocial.setVisibility(View.GONE);
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCopy).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                copyToClipboard(mainView.getContext(), String.valueOf(((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).getText().toString().trim()));
                Toast.makeText(mainView.getContext(), "Copied to clipboard", Toast.LENGTH_SHORT).show();
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupShare).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String text = ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).getText().toString().trim();
                text += "\n\n";
                text += "Data shared via http://Extime.pro\n";
                shareIntent(text);
                //shareIntent(String.valueOf(String.valueOf(((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).getText().toString().trim())));
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupMail).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.remind_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.call2me_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.updateContact).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                popupEditSocial = (FrameLayout) getActivity().findViewById(R.id.popupEditSocial);
                popupEditSocial.setVisibility(View.VISIBLE);
                popupEditSocial.setClickable(true);
                popupEditSocial.findViewById(R.id.ok_social).setVisibility(View.VISIBLE);
                popupEditSocial.findViewById(R.id.get_last_clips).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                popupEditSocial.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Facebook");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getFacebookLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));
                } else if (typeEnum.equals(SocialEnums.VK)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Vk");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getVkLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Instagram");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getInstagramLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));
                } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("LinkedIn");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getLinkedInLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));
                } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Telegram");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTelegramLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
                } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Skype");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getSkypeLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
                } else if (typeEnum.equals(SocialEnums.VIBER)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Viber");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getViberLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
                } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("WhatsApp");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getWhatsappLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));
                } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Twitter");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTwitterLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_48));
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Youtube");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getYoutubeLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));
                } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                    ((TextView) popupEditSocial.findViewById(R.id.typeField)).setText("Medium");
                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getMediumLink());
                    ((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));
                }

                ((TextView) popupEditSocial.findViewById(R.id.typeField)).requestLayout();

                openedViews.add(popupEditSocial);


                popupEditSocial.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Realm realm = Realm.getDefaultInstance(); //-

                        if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {

                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }


                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://www.facebook.com/" + f.trim();
                                }

                                if (ClipboardType.isFacebook(f)) {
                                    socialModel.setFacebookLink(f);
                                } else {
                                    socialModel.setFacebookLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setFacebookLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                                Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                                }


                                String link = socialModel.getFacebookLink();
                                boolean checkich = false;
                                try {
                                    String checkFacebook = link.substring(0, 37);
                                    if (checkFacebook.equals("https://www.facebook.com/profile.php?")) {
                                        link = link.substring(37, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    }
                                } catch (Exception e) {

                                    e.printStackTrace();
                                }
                                if (!checkich) {
                                    try {
                                        if (link.contains("https://facebook.com/")) {
                                            link = link.substring(21, link.length());
                                            if (link.contains("profile.php")) {
                                                link = link.substring(link.indexOf(".php") + 5, link.length());
                                            }
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        } else if (link.contains("https://m.facebook.com/")) {
                                            link = link.substring(23, link.length());
                                            if (link.contains("profile.php")) {
                                                link = link.substring(link.indexOf(".php") + 5, link.length());
                                            }
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        } else if (link.contains("php?")) {
                                            int index = link.indexOf("php?");
                                            link = link.substring(index + 4, link.length());
                                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                            checkich = true;
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                                //   System.out.println(checkFacebook+", "+link);
                                if (!checkich)
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());

                                //   ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());
                                contact.hasFacebook = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getFacebookLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getFacebookLink());

                            } else {
                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }
                                contact.getSocialModel().setFacebookLink(null);
                                //  ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                                //  ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                }


                                ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                                contact.hasFacebook = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.VK)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://vk.com/" + f.trim();
                                }

                                if (ClipboardType.isVk(f)) {
                                    socialModel.setVkLink(f);
                                } else {
                                    socialModel.setVkLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setVkLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                                Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }


                                try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                }

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasVk = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getVkLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getVkLink());
                            } else {
                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }
                                contact.getSocialModel().setVkLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }


                                ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or");
                                contact.hasVk = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                            ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);

                            //EventBus.getDefault().post(new UpdateFile());
                        } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //  if (contact.getSocialModel() != null)

                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }



                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);

                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                }

                                if (!username.toLowerCase().contains("instagram.com")) {
                                    username = "https://instagram.com/" + username;
                                }

                                socialModel.setInstagramLink(username);
                                //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                                //    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                                Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                                Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);
                         /*   ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                }

                                //   if (contact.getSocialModel() != null)


                                contact.hasInst = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String inst = contact.getSocialModel().getInstagramLink();

                                if (inst.contains(".com/")) {
                                    int ind = inst.indexOf(".com/");
                                    String outLink = inst.substring(ind + 5, inst.length());


                                    if (outLink.contains("?")) {
                                        int in = outLink.indexOf("?");
                                        outLink = outLink.substring(0, in);
                                    }

                                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getInstagramLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getInstagramLink());
                            } else {
                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }
                                socialModel.setInstagramLink(null);
                                //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                                LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                }


                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add new link");
                                contact.hasInst = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {

                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //    if (contact.getSocialModel() != null)

                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://www.linkedin.com/in/" + f.trim();
                                }

                                if (ClipboardType.isLinkedIn(f)) {
                                    socialModel.setLinkedInLink(f);
                                } else {
                                    socialModel.setLinkedInLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setLinkedInLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                //      ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                                //      ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                                Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                                Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});

                        /*    ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);
                                }


                                try {
                                    String link = socialModel.getLinkedInLink();
                                    String sub = link.substring(link.length() - 20, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                                }
                                //  ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                                contact.hasLinked = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getLinkedInLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getLinkedInLink());
                            } else {
                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }
                                contact.getSocialModel().setLinkedInLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                                LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                           /* ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                }

                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add new link");
                                contact.hasLinked = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.VIBER)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //       if (contact.getSocialModel() != null)

                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }

                                socialModel.setViberLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //        ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                //        ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                                Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                                Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                                LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                                }


                                //   if (contact.getSocialModel() != null)
                                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(socialModel.getViberLink());
                                contact.hasViber = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getViberLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getViberLink());
                            } else {
                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }
                                socialModel.setViberLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //      ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                //      ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                       /*     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                }

                                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add new link");
                                contact.hasViber = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //   EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();


                            //  contact.setSocialModel(new SocialModel());
                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                // if (contact.getSocialModel() != null)

                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }

                                socialModel.setWhatsappLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());



                                        //((ImageView) popupEditSocial.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));

                                //    contact.getSocialModel().setWhatsappLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                //  ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                                Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                                Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                                LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                                }

                                //   if(contact.getSocialModel() != null)
                                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(socialModel.getWhatsappLink());


                                contact.hasWhatsapp = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getWhatsappLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getWhatsappLink());
                            } else {
                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }
                                socialModel.setWhatsappLink(null);
                                //      contact.getSocialModel().setWhatsappLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                }


                                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add new link");
                                contact.hasWhatsapp = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //    if (contact.getSocialModel() != null)

                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }

                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();
                                char firstSymbol = username.charAt(0);
                                String regex = "[0-9]+";
                                username = username.replaceAll("[-() ]", "");
                                if (((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) && !username.contains("t.me/")) {
                                    username = "t.me/" + username;
                                }

                                socialModel.setTelegramLink(username);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //  ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                                //  ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                                Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
                                Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
                                ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                       /*     ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){
                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                                }

                                //   if (contact.getSocialModel() != null)


                                contact.hasTelegram = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String tel = contact.getSocialModel().getTelegramLink();
                                if (tel.contains(".me/")) {
                                    int indexx = tel.indexOf(".me/");
                                    String outLink = tel.substring(indexx + 4, tel.length());
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                                } else if (tel.contains("?p=")) {
                                    int indexx = tel.indexOf("?p=");
                                    String outLink = tel.substring(indexx + 3, tel.length());
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTelegramLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTelegramLink());
                            } else {
                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }
                                socialModel.setTelegramLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                                ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                }

                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add new link");
                                contact.hasTelegram = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        } else if (typeEnum.equals(SocialEnums.SKYPE)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)
                                //     contact.getSocialModel().setSkypeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                                //     else

                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }

                                socialModel.setSkypeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());

                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                                Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                                Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                                LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);
                                }

                                //    if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(contact.getSocialModel().getSkypeLink());
                                //    else
                                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(socialModel.getSkypeLink());
                                contact.hasSkype = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), "Skype: " + contact.getSocialModel().getSkypeLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getSkypeLink());
                            } else {
                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }
                                socialModel.setSkypeLink(null);
                                ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                          /*  ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                }

                                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                                contact.hasSkype = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.TWITTER)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://twitter.com/" + f.trim();
                                }

                                if (ClipboardType.isTwitter(f)) {
                                    socialModel.setTwitterLink(f);
                                } else {
                                    socialModel.setTwitterLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setTwitterLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                /*Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                                Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});*/
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_64));

                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_64));

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }*/


                               /* try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {*/
                                if (socialModel.getTwitterLink().contains(".com/")) {
                                    ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                                //}

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasTwitter = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTwitterLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getTwitterLink());
                            } else {
                                if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                }
                                contact.getSocialModel().setTwitterLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);

                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                               /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");
                                contact.hasTwitter = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            //EventBus.getDefault().post(new UpdateFile());
                        } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //     if (contact.getSocialModel() != null)

                                if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                }

                                String f = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (!f.contains(".com/")) {
                                    f = "https://www.youtube.com/channel/" + f;
                                }

                                if (ClipboardType.isYoutube(f)) {
                                    socialModel.setYoutubeLink(f);
                                } else {
                                    socialModel.setYoutubeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                }

                                //socialModel.setYoutubeLink(((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString());
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                                Drawable colorv = new ColorDrawable(Color.parseColor("#ed2524"));
                                Drawable imagev = getResources().getDrawable(R.drawable.ic_youtube_white);
                                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                                }*/


                                /*try {
                                    String link = socialModel.getVkLink();
                                    String checkVK = link.substring(0, 8);
                                    if (link.contains("https://vk.com/")) {
                                        System.out.println("TRUE VK LINK");
                                        link = link.substring(15, link.length());
                                        System.out.println("TRUE VK LINK2 = " + link);
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://m.vk.com/")) {
                                        link = link.substring(17, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else if (link.contains("m.vk.com/")) {
                                        link = link.substring(9, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("vk.com/")) {
                                        link = link.substring(7, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                    } else if (link.contains("https://www.vk.com/")) {
                                        link = link.substring(19, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                    } else
                                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                } catch (Exception e) {*/
                                if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                                    if (socialModel.getYoutubeLink().contains("user/")) {
                                        String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                    } else if (socialModel.getYoutubeLink().contains("channel/")) {
                                        String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                    }
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                                //}

                                //        if (contact.getSocialModel() != null)
                                //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                                contact.hasYoutube = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getYoutubeLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getYoutubeLink());
                            } else {
                                if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                }
                                contact.getSocialModel().setYoutubeLink(null);
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/
/*
                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");
                                contact.hasYoutube = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }

                           /* ArrayList<String> listEdit = new ArrayList<>();
                            ArrayList<Boolean> listEditBool = new ArrayList<>();

                            listEdit.add(contact.getName());
                            if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                                listEditBool.add(true);
                            else
                                listEditBool.add(false);

                            MainActivity.listToManyUpdateFile.add("EDIT");
                            MainActivity.listToManyUpdateFile.add(listEdit);
                            MainActivity.listToManyUpdateFile.add(listEditBool);*/

                            //EventBus.getDefault().post(new UpdateFile());

                        } else if (typeEnum.equals(SocialEnums.MEDIUM)) {


                            realm.beginTransaction();
                            SocialModel socialModel;
                            if (contact.getSocialModel() == null) {
                                socialModel = realm.createObject(SocialModel.class);
                            } else
                                socialModel = contact.getSocialModel();

                            if (((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                                //  if (contact.getSocialModel() != null)

                                if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                }



                                String username = ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().toString();

                                if (username.contains("?utm")) {
                                    int ind = username.indexOf('?');
                                    if (ind != -1)
                                        username = username.substring(0, ind);

                                }

                                if (username.charAt(username.length() - 1) == '/') {
                                    username = username.substring(0, username.length() - 1);
                                }


                                if (!username.contains("medium.com")) {
                                    if (!username.contains("@"))
                                        username = "https://medium.com/@" + username;
                                    else
                                        username = "https://medium.com/" + username;
                                }

                                socialModel.setMediumLink(username);
                                //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                                //    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                                Drawable colori = new ColorDrawable(Color.parseColor("#000000"));
                                Drawable imagei = getResources().getDrawable(R.drawable.medium_white);
                                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldi);
                         /*   ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }*/

                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                                }*/

                                //   if (contact.getSocialModel() != null)


                                contact.hasMedium = true;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                String inst = contact.getSocialModel().getMediumLink();

                                if (inst.contains(".com/")) {
                                    int ind = inst.indexOf(".com/");
                                    String outLink = inst.substring(ind + 5, inst.length());


                                    if (outLink.contains("?")) {
                                        int in = outLink.indexOf("?");
                                        outLink = outLink.substring(0, in);
                                    }

                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(outLink);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(contact.getSocialModel().getMediumLink());

                                contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getMediumLink(), contact.getName());
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.valueUpd)).setText(contact.getSocialModel().getMediumLink());
                            } else {
                                if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                }
                                socialModel.setMediumLink(null);
                                //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image4 = getResources().getDrawable(R.drawable.medium_white);
                                LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                /*if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add new link");
                                contact.hasMedium = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());
                                popupEditSocial.setVisibility(View.GONE);
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            }


                            //EventBus.getDefault().post(new UpdateFile());


                        }

                        realm.close();


                        initIconColor(contact, mainView);

                    }
                });

                popupEditSocial.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        popupEditSocial.setVisibility(View.GONE);
                    }
                });
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCall).setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {

                String link = null;

                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    link = contact.getSocialModel().getFacebookLink();
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)){
                    link = contact.getSocialModel().getInstagramLink();
                }else if (typeEnum.equals(SocialEnums.VK)){
                    link = contact.getSocialModel().getVkLink();
                }else if (typeEnum.equals(SocialEnums.LINKEDIN)){
                    link = contact.getSocialModel().getLinkedInLink();
                } else if (typeEnum.equals(SocialEnums.TWITTER)){
                    link = contact.getSocialModel().getTwitterLink();
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)){
                    link = contact.getSocialModel().getYoutubeLink();
                }else if (typeEnum.equals(SocialEnums.MEDIUM)){
                    link = contact.getSocialModel().getMediumLink();
                }

                if(link != null){
                    try {
                        String uris = link;
                        if (!link.contains("https://") && !link.contains("http://"))
                            uris = "https://" + uris;

                        System.out.println("Check soc");

                        Intent i = new Intent(Intent.ACTION_VIEW);

                        //i.addCategory(Intent.CATEGORY_APP_BROWSER);

                        i.setData(Uri.parse(uris));

                        System.out.println("uris = "+uris);

                        getActivity().startActivity(Intent.createChooser(i, "Open with..."));


                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                }
                return true;
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.editPopupCall).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (typeEnum.equals(SocialEnums.FACEBOOK)) {
                    if (!contact.hasFacebook) {
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.facebook_social).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        Intent intent;
                        if (contact.getSocialModel().getFacebookLink().contains("?id=")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().indexOf('=') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else if (contact.getSocialModel().getFacebookLink().contains("/people/")) {
                            String idProfile = contact.getSocialModel().getFacebookLink().substring(contact.getSocialModel().getFacebookLink().lastIndexOf('/') + 1, contact.getSocialModel().getFacebookLink().length());
                            if (idProfile.contains("&")) {
                                idProfile = idProfile.substring(0, idProfile.indexOf("&"));
                            }

                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://profile/" + idProfile));

                        } else
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink().replace("fb","facebook")));

                        //Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("fb://facewebmodal/f?href=" + contact.getSocialModel().getFacebookLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.facebook.katana"));
                            startActivity(intent2);*/

                            try {
                                String uris = contact.getSocialModel().getFacebookLink();
                                if (!contact.getSocialModel().getFacebookLink().contains("https://") && !contact.getSocialModel().getFacebookLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }

                        } else
                            startActivity(intent);
                    }
                } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                    //============================================================
                    if (!contact.hasInst) {
                        //   closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.instagramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        System.out.println("Go Insta");

                        String str = contact.getSocialModel().getInstagramLink();
                        if (!str.toLowerCase().contains("instagram")) {
                            str = "https://instagram.com/" + contact.getSocialModel().getInstagramLink();
                        }

                        if (!str.contains("http://") && !str.contains("https://")) {
                            str = "https://" + contact.getSocialModel().getInstagramLink();
                        }

                        Uri uri = Uri.parse(str);
                        Intent likeIng = new Intent(Intent.ACTION_VIEW, uri);
                        likeIng.setPackage("com.instagram.android");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(likeIng, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            /*Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.instagram.android"));
                            startActivity(intent2);*/
                            try {
                                String uris = contact.getSocialModel().getInstagramLink();
                                if (!contact.getSocialModel().getInstagramLink().contains("https://") && !contact.getSocialModel().getInstagramLink().contains("http://"))
                                    uris = "https://" + uris;

                                Intent i = new Intent(Intent.ACTION_VIEW);
                                i.setData(Uri.parse(uris));
                                startActivity(i);
                            } catch (Exception e) {

                            }
                        } else
                            startActivity(likeIng);
                    }
                    //=========
                } else if (typeEnum.equals(SocialEnums.VK)) {
                    //============================================================
                    if (!contact.hasVk) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.vk_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String uris_ = contact.getSocialModel().getVkLink();
                        if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                            uris_ = "https://" + uris_;

                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(uris_)));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                /*Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);*/
                                try {
                                    String uris = contact.getSocialModel().getVkLink();
                                    if (!contact.getSocialModel().getVkLink().contains("https://") && !contact.getSocialModel().getVkLink().contains("http://"))
                                        uris = "https://" + uris;

                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                    i.setData(Uri.parse(uris));
                                    startActivity(i);
                                } catch (Exception e2) {

                                }
                            } else
                                startActivity(intent2);
                        }
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                    //============================================================
                    if (!contact.hasLinked) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.linkedLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(contact.getSocialModel().getLinkedInLink()));
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("https://www.linkedin.com/in/"));
                            startActivity(intent2);
                        } else {
                            try {
                                startActivity(intent);
                            } catch (Exception e) {
                                Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.linkedin.com/in/"));
                                startActivity(intent2);
                            }


                        }
                    }
                    //============
                } else if (typeEnum.equals(SocialEnums.VIBER)) {
                    //===================================================
                    if (!contact.hasViber) {
                        //   closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.viberLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent intent;
                        final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getViberLink()));
                        final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.com.viber.voip.viber_number_message");
                        if (contactMimeTypeDataId != null) {
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                            intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                            intent.setPackage("com.viber.voip");
                        } else {
                            intent = new Intent("android.intent.action.VIEW", Uri.parse("tel:" + Uri.encode(String.valueOf(contact.getSocialModel().getViberLink()))));
                            intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                        }

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.viber.voip"));
                            startActivity(intent2);
                        } else
                            startActivity(intent);
                    }
                    //============
                } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                    //=================================================
                    if (!contact.hasWhatsapp) {
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.whatsapp_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                        String whatsappNum = contact.getSocialModel().getWhatsappLink();
                        if (/*whatsappNum.substring(0, 2).equalsIgnoreCase("+8") ||*/ whatsappNum.charAt(0) == '8') {
                            whatsappNum = whatsappNum.replaceFirst("8", "7");
                        }

                        if (whatsappNum.charAt(0) != '+') whatsappNum = "+" + whatsappNum;

                        telegramIntent.setData(Uri.parse("whatsapp://send?phone=" + whatsappNum));
                        telegramIntent.setPackage("com.whatsapp");
                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.whatsapp"));
                            startActivity(intent2);
                        } else
                            activityApp.startActivity(Intent.createChooser(telegramIntent, "Open with...").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                    }
                    //========
                } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                    //=====================================================================
                    if (!contact.hasSkype) {
                        //   closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.skypeLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        Uri skypeUri = Uri.parse("skype:" + contact.getSocialModel().getSkypeLink() + "?chat");
                        Intent myIntent = new Intent(Intent.ACTION_VIEW, skypeUri);
                        myIntent.setComponent(new ComponentName("com.skype.raider", "com.skype.raider.Main"));
                        myIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

                        PackageManager packageManager = getActivity().getPackageManager();
                        List<ResolveInfo> activities = packageManager.queryIntentActivities(myIntent, 0);
                        boolean isIntentSafe = activities.size() > 0;
                        if (!isIntentSafe) {
                            Intent intent2 = new Intent(Intent.ACTION_VIEW);
                            intent2.setData(Uri.parse("market://details?id=com.skype.raider"));
                            startActivity(intent2);
                        } else
                            startActivity(myIntent);
                    }
                    //===========
                } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                    //======================================================================
                    if ((!contact.hasTelegram) || (contact.hasTelegram && contact.getSocialModel() == null) || (contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() == null)) {
                        //  closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.telegramLink).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        String username = contact.getSocialModel().getTelegramLink();
                        char firstSymbol = username.charAt(0);
                        String regex = "[0-9]+";
                        username = username.replaceAll("[-() ]", "");
                        if ((firstSymbol == '+' && username.substring(1).matches(regex)) || (firstSymbol != '+' && username.matches(regex))) {
                            //final String contactId = getContactIdFromPhoneNumber(String.valueOf(contact.getSocialModel().getTelegramLink()));
                            final String contactId = contact.getIdContact();
                            final String contactMimeTypeDataId = getContactMimeTypeDataId(getContext(), contactId, "vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile");
                            if (contactMimeTypeDataId != null) {
                                Intent intent;
                                intent = new Intent(Intent.ACTION_VIEW, Uri.parse("content://com.android.contacts/data/" + contactMimeTypeDataId));
                                intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET | Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                                intent.setPackage("org.telegram.messenger");
                                startActivity(intent);
                            } else {
                                Intent telegramIntent = new Intent(Intent.ACTION_VIEW);
                                telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                                PackageManager packageManager = getActivity().getPackageManager();
                                List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                                boolean isIntentSafe = activities.size() > 0;
                                if (!isIntentSafe) {
                                    Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                    intent3.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                    startActivity(intent3);
                                } else
                                    startActivity(telegramIntent);

                            }

                        } else if ((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) {
                            Intent telegramIntent = new Intent(Intent.ACTION_VIEW);

                            if (firstSymbol == '@')
                                username = username.substring(1);
                            else if (username.contains("t.me/") && !username.contains("@"))
                                username = username.substring(5);
                            else if (username.contains("t.me/@"))
                                username = username.substring(6);

                            telegramIntent.setData(Uri.parse("tg://resolve?domain=" + username));
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(telegramIntent, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(Uri.parse("market://details?id=org.telegram.messenger"));
                                startActivity(intent);
                            } else
                                startActivity(telegramIntent);
                        }


                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                    //============================================================
                    if (!contact.hasTwitter) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.twitter_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getTwitterLink();
                        if (text.contains("twitter.com/")) {
                            text = text.substring(text.indexOf(".com/") + 5);
                        }
                        if (text.length() > 0 && text.charAt(0) == '@') text = text.substring(1);
                        Intent intent = null;
                        try {
                            // get the Twitter app if possible

                            getActivity().getPackageManager().getPackageInfo("com.twitter.android", 0);
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("twitter://user?screen_name=" + text));
                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        } catch (Exception e) {
                            // no Twitter app, revert to browser
                            intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://twitter.com/" + text));
                        }
                        getActivity().startActivity(intent);

                       /* Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                    //============================================================
                    if (!contact.hasYoutube) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.youtube_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {
                        String text = contact.getSocialModel().getYoutubeLink();
                        if (text.contains("youtu.be/") || text.contains("watch?v=")) {
                            if (text.contains("youtu.be/"))
                                text = text.substring(text.indexOf("youtu.be/") + 9);
                            else if (text.contains("watch?v="))
                                text = text.substring(text.indexOf("watch?v=") + 8);

                            Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + text));

                            Intent webIntent = new Intent(Intent.ACTION_VIEW,
                                    Uri.parse("http://www.youtube.com/watch?v=" + text));

                            try {
                                getContext().startActivity(appIntent);
                            } catch (ActivityNotFoundException ex) {
                                getContext().startActivity(webIntent);
                            }
                        } else if (text.contains("user/") || text.contains("channel/") || text.contains("/c/")) {
                            try {
                                getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(text)));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        /*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(contact.getSocialModel().getVkLink())));
                        Intent intent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("vkontakte://profile/")));
                        try {
                            startActivity(intent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                            PackageManager packageManager = getActivity().getPackageManager();
                            List<ResolveInfo> activities = packageManager.queryIntentActivities(intent2, 0);
                            boolean isIntentSafe = activities.size() > 0;
                            if (!isIntentSafe) {
                                Intent intent3 = new Intent(Intent.ACTION_VIEW);
                                intent3.setData(Uri.parse("market://details?id=com.vkontakte.android"));
                                startActivity(intent3);
                            } else
                                startActivity(intent2);
                        }*/
                    }
                    //==============
                } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                    //============================================================
                    if (!contact.hasMedium) {
                        //    closeOtherPopup();
                        closeChildPopups();
                        showSocialPopup(contact);
                        socialPopup.findViewById(R.id.medium_link).callOnClick();
                        socialPopup.setVisibility(View.GONE);
                    } else {

                        try {
                            String uri = contact.getSocialModel().getMediumLink();

                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));
                            getContext().startActivity(i);
                        } catch (Exception e) {

                        }
                    }
                    //==============
                }
            }
        });

        popupProfileEditPreviewSocial.findViewById(R.id.delete_contact_number).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                        getActivity());
                alertDialogBuilder.setTitle("Do you want to delete " + ((TextView) popupProfileEditPreviewSocial.findViewById(R.id.typeField)).getText().toString().toLowerCase().trim() + "?");
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Yes", (dialog, id) -> {

                            Realm realm = Realm.getDefaultInstance(); //-

                            if (typeEnum.equals(SocialEnums.FACEBOOK)) {


                                if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setFacebookLink(null);
                                realm.commitTransaction();
                                Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                                }


                                ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                                realm.beginTransaction();
                                contact.hasFacebook = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                // EventBus.getDefault().post(new UpdateFile());


                            } else if (typeEnum.equals(SocialEnums.VK)) {
                                if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setVkLink(null);
                                realm.commitTransaction();
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }


                                ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or");
                                realm.beginTransaction();
                                contact.hasVk = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);

                            } else if (typeEnum.equals(SocialEnums.INSTAGRAM)) {
                                if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                                }
                                realm.beginTransaction();
                                socialModel.setInstagramLink(null);
                                realm.commitTransaction();
                                //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                                Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                                LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                                }


                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasInst = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();

                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());

                                popupProfileEditPreviewSocial.setVisibility(View.GONE);

                            } else if (typeEnum.equals(SocialEnums.LINKEDIN)) {
                                if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setLinkedInLink(null);
                                realm.commitTransaction();
                                //     ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                                Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                                LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                           /* ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);
                                }

                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasLinked = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());


                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            } else if (typeEnum.equals(SocialEnums.VIBER)) {
                                if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                                }
                                realm.beginTransaction();
                                socialModel.setViberLink(null);
                                realm.commitTransaction();

                                if (popupEditSocial != null)
                                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //      ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                //      ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                                Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                                LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                       /*     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                                }

                                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasViber = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //   EventBus.getDefault().post(new UpdateFile());

                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            } else if (typeEnum.equals(SocialEnums.WHATSAPP)) {
                                if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                                }
                                realm.beginTransaction();
                                socialModel.setWhatsappLink(null);
                                realm.commitTransaction();
                                //      contact.getSocialModel().setWhatsappLink(null);
                                if (popupEditSocial != null)
                                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                                Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                                LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                                }


                                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasWhatsapp = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());

                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            } else if (typeEnum.equals(SocialEnums.TELEGRAM)) {
                                if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                                }
                                realm.beginTransaction();
                                socialModel.setTelegramLink(null);
                                realm.commitTransaction();
                                if (popupEditSocial != null)
                                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();
                                //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                                Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                                LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                                ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                                }

                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasTelegram = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());

                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            } else if (typeEnum.equals(SocialEnums.SKYPE)) {
                                if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                                }
                                realm.beginTransaction();
                                socialModel.setSkypeLink(null);
                                realm.commitTransaction();
                                if (popupEditSocial != null)
                                    ((EditText) popupEditSocial.findViewById(R.id.dataToEdit)).getText().clear();

                                //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                                Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                                LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                          /*  ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }*/

                                if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                } else {
                                    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                                }

                                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                                realm.beginTransaction();
                                contact.hasSkype = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //    EventBus.getDefault().post(new UpdateFile());

                                popupProfileEditPreviewSocial.setVisibility(View.GONE);
                            } else if (typeEnum.equals(SocialEnums.TWITTER)) {
                                if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setTwitterLink(null);
                                realm.commitTransaction();
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);

                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                               /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");
                                realm.beginTransaction();
                                contact.hasTwitter = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);

                            } else if (typeEnum.equals(SocialEnums.YOUTUBE)) {
                                if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setYoutubeLink(null);
                                realm.commitTransaction();
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld2);

                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");
                                realm.beginTransaction();
                                contact.hasYoutube = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);

                            } else if (typeEnum.equals(SocialEnums.MEDIUM)) {
                                if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                    contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                                }
                                realm.beginTransaction();
                                contact.getSocialModel().setMediumLink(null);
                                realm.commitTransaction();
                                //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                                Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                                Drawable image2 = getResources().getDrawable(R.drawable.medium_white);
                                LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld2);

                                //((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);


                              /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                    ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                    ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                } else {
                                    ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                                }*/


                                ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");
                                realm.beginTransaction();
                                contact.hasMedium = false;
                                contact.setSocialModel(socialModel);
                                realm.commitTransaction();
                                ContactCacheService.updateContact(contact, mainView.getContext());
                                //  EventBus.getDefault().post(new UpdateFile());
                                popupProfileEditPreviewSocial.setVisibility(View.GONE);

                            }

                            realm.close();

                            initIconColor(contact, mainView);


                            //EventBus.getDefault().post(new UpdateFile());
                            popupProfileEditPreviewSocial.setVisibility(View.GONE);
                        })
                        .setNegativeButton("No", (dialog, id) -> dialog.cancel());

                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();
            }
        });

    }


    public boolean checkClick_facebookEdit = true;

    public void showSocialPopup(Contact contact) {


        socialPopup = (FrameLayout) getActivity().findViewById(R.id.popupSocial);

        ((ScrollView) socialPopup.findViewById(R.id.scroll)).scrollTo(0, 0);

        socialPopup.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE)
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
            }
        });
        FrameLayout editFrame = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
        editFrame.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);


        // ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
        Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
        LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
        ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");

        Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
        LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
        ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);

        // ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or link");

        Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
        LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
        ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);

        //  ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
        ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add username or link");

        //  ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
        Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
        LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
        ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);

        ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add username or link");

        Drawable color44 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image44 = getResources().getDrawable(R.drawable.ic_youtube_white);
        LayerDrawable ld44 = new LayerDrawable(new Drawable[]{color44, image44});
        ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ld44);

        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or link");

        Drawable color41 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image41 = getResources().getDrawable(R.drawable.ic_twitter_white);
        LayerDrawable ld41 = new LayerDrawable(new Drawable[]{color41, image41});
        ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld41);
        //((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_white));
        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or link");

        Drawable color42 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image42 = getResources().getDrawable(R.drawable.medium_white);
        LayerDrawable ld42 = new LayerDrawable(new Drawable[]{color42, image42});
        ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld42);
        //((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(getResources().getDrawable(R.drawable.ic_twitter_white));
        ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");


        Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
        LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
        ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
        //   ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
        ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add link");

        Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
        LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
        ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

        //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
        ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add link");

        //   ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
        Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
        LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
        ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

        ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add link");

        //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
        Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
        Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
        LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
        ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);

        ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add link");

        if ((contact.hasTelegram && contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)) {
            //  ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
            Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
            Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
            LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);


        }

        if (contact.getSocialModel() != null) {
            socialModel = contact.getSocialModel();

            if (socialModel.getFacebookLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);


                String link = socialModel.getFacebookLink();
                boolean checkich = false;
                try {
                    if(link.contains("http") && !link.contains("https"))
                        link = link.replace("http","https");
                    String checkFacebook = link.substring(0, 21);
                    String checkFacebook2 = link.substring(0, 23);
                    String checkFacebook3 = link.substring(0, 25);
                    if (checkFacebook.equals("https://facebook.com/")) {
                        link = link.substring(21, link.length());
                        if (link.contains("profile.php")) {
                            link = link.substring(link.indexOf(".php") + 5, link.length());
                        }

                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                        checkich = true;
                    } else if (checkFacebook2.equals("https://m.facebook.com/")) {
                        link = link.substring(23, link.length());
                        if (link.contains("profile.php")) {
                            link = link.substring(link.indexOf(".php") + 5, link.length());
                        }
                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                        checkich = true;
                    } else if (checkFacebook3.equals("https://www.facebook.com/") || checkFacebook3.equals("https://web.facebook.com/")) {
                        link = link.substring(25, link.length());
                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                        checkich = true;
                    }
                } catch (Exception e) {

                    e.printStackTrace();
                }
                if (!checkich) {
                    try {
                        String checkFacebook = link.substring(0, 25);
                        if (checkFacebook.equals("https://www.facebook.com/")) {
                            link = link.substring(25, link.length());
                            if (link.contains("profile.php")) {
                                link = link.substring(link.indexOf(".php") + 5, link.length());
                            }
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        } else if (link.contains("php?")) {
                            int index = link.indexOf("php?");
                            link = link.substring(index + 4, link.length());
                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                            checkich = true;
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                if (!checkich)
                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(contact.getSocialModel().getFacebookLink());
            }
            if (socialModel.getVkLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                try {
                    String link = socialModel.getVkLink();
                    String checkVK = link.substring(0, 8);
                    if (link.contains("https://vk.com/")) {
                        System.out.println("TRUE VK LINK");
                        link = link.substring(15, link.length());
                        System.out.println("TRUE VK LINK2 = " + link);
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("https://m.vk.com/")) {
                        link = link.substring(17, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                    } else if (link.contains("m.vk.com/")) {
                        link = link.substring(9, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("vk.com/")) {
                        link = link.substring(7, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                    } else if (link.contains("https://www.vk.com/")) {
                        link = link.substring(19, link.length());
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                    } else
                        ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                } catch (Exception e) {
                    e.printStackTrace();
                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(contact.getSocialModel().getVkLink());
                }
            }
            if (socialModel.getLinkedInLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});
                ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                try {
                    String link = socialModel.getLinkedInLink();
                    if (link.contains("/in/")) {
                        String sub = link.substring(link.indexOf("/in/") + 4, link.length());
                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                    } else {
                        String sub = link.substring(link.length() - 20, link.length());
                        ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    ((TextView) socialPopup.findViewById(R.id.link_text)).setText(contact.getSocialModel().getLinkedInLink());
                }
            }
            if (socialModel.getTwitterLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colorl = new ColorDrawable(Color.parseColor("#2ca7e0"));
                Drawable imagel = getResources().getDrawable(R.drawable.ic_twitter_white);
                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});

                ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ldl);

                try {
                    /*String link = socialModel.getLinkedInLink();
                    String sub = link.substring(link.length() - 20, link.length());*/
                    if (socialModel.getTwitterLink().contains(".com/")) {
                        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                    } else
                        ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                } catch (Exception e) {
                    e.printStackTrace();

                }
            }

            if (socialModel.getYoutubeLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                Drawable colorl = new ColorDrawable(Color.parseColor("#ed2524"));
                Drawable imagel = getResources().getDrawable(R.drawable.ic_youtube_white);
                LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});
                ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ldl);

                try {
                    /*String link = socialModel.getLinkedInLink();
                    String sub = link.substring(link.length() - 20, link.length());*/
                    if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                        if (socialModel.getYoutubeLink().contains("user/")) {
                            String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                        } else if (socialModel.getYoutubeLink().contains("channel/")) {
                            String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                        }
                    } else
                        ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                } catch (Exception e) {
                    e.printStackTrace();
                    //((TextView) socialPopup.findViewById(R.id.link_text)).setText(contact.getSocialModel().getLinkedInLink());
                }
            }

            if (socialModel.getInstagramLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);

                String inst = contact.getSocialModel().getInstagramLink();

                if (inst.contains(".com/")) {
                    int ind = inst.indexOf(".com/");
                    String outLink = inst.substring(ind + 5, inst.length());

                    if (outLink.contains("?")) {
                        int in = outLink.indexOf("?");
                        outLink = outLink.substring(0, in);
                    }

                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                } else
                    ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

            }

            if (socialModel.getMediumLink() != null) {
                //  ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                Drawable colori = new ColorDrawable(Color.parseColor("#000000"));
                Drawable imagei = getResources().getDrawable(R.drawable.medium_white);
                LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldi);

                String inst = contact.getSocialModel().getMediumLink();

                if (inst.contains(".com/")) {
                    int ind = inst.indexOf(".com/");
                    String outLink = inst.substring(ind + 5, inst.length());

                    if (outLink.contains("?")) {
                        int in = outLink.indexOf("?");
                        outLink = outLink.substring(0, in);
                    }

                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(outLink);
                } else
                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(contact.getSocialModel().getMediumLink());

            }

            if (socialModel.getViberLink() != null) {
                //   ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(contact.getSocialModel().getViberLink());
            }
            if (socialModel.getWhatsappLink() != null) {
                //     System.out.println("WHAAATS APP");
                //   ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(contact.getSocialModel().getWhatsappLink());
            }
            if (socialModel.getTelegramLink() != null) {
                String tel = contact.getSocialModel().getTelegramLink();
                if (tel.contains(".me/")) {
                    int indexx = tel.indexOf(".me/");
                    String outLink = tel.substring(indexx + 4, tel.length());
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                } else if (tel.contains("?p=")) {
                    int indexx = tel.indexOf("?p=");
                    String outLink = tel.substring(indexx + 3, tel.length());
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                } else
                    ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());
            }

            if (socialModel.getSkypeLink() != null) {
                //((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);

                ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(contact.getSocialModel().getSkypeLink());
            }
        }


        socialPopup.findViewById(R.id.facebook_social).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }

                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getFacebookLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getFacebookLink());


                // if (((ContactProfileDataFragment) parentFragment).popupProfileEdit != null && ((ContactProfileDataFragment) parentFragment).popupProfileEdit.getVisibility() != View.VISIBLE)
                //     ((ContactProfileDataFragment) parentFragment).showEditPopupPreview(contactInfo1, ((TextView)v.findViewById(R.id.hashtag_text)).getText().toString());

                if (contact.getSocialModel() != null && contact.getSocialModel().getFacebookLink() != null) {
                    showEditPopupPreviewSocial(contact, SocialEnums.FACEBOOK);

                } else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_facebook));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getActivity().getResources().getDrawable(R.drawable.icn_social_facebook2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);


                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/

                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.FACEBOOK)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.FACEBOOK)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });

                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }

                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + str));
                        } else
                            i.setData(Uri.parse("https://www.facebook.com/search/people/?q=" + mach[0]));
                        startActivity(i);

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("facebook");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //   if (contact.getSocialModel() != null)


                            if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                            }


                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.facebook.com/" + f;
                            }

                            if (ClipboardType.isFacebook(f)) {
                                socialModel.setFacebookLink(f);
                            } else {
                                socialModel.setFacebookLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setFacebookLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());

                            //       ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            //       ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook);
                            Drawable colorf = new ColorDrawable(Color.parseColor("#475993"));
                            Drawable imagef = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            LayerDrawable ldf = new LayerDrawable(new Drawable[]{colorf, imagef});
                            ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);


                           /* ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ldf);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            }

                          /*  try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ldf);
                            }catch (Exception e){

                            }*/


                            String link = socialModel.getFacebookLink();
                            boolean checkich = false;
                            try {
                                String checkFacebook = link.substring(0, 37);
                                if (checkFacebook.equals("https://www.facebook.com/profile.php?")) {
                                    link = link.substring(37, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                    checkich = true;
                                }
                            } catch (Exception e) {

                                e.printStackTrace();
                            }
                            if (!checkich) {
                                try {
                                    if (link.contains("https://facebook.com/")) {
                                        link = link.substring(21, link.length());
                                        if (link.contains("profile.php")) {
                                            link = link.substring(link.indexOf(".php") + 5, link.length());
                                        }
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    } else if (link.contains("https://m.facebook.com/")) {
                                        link = link.substring(23, link.length());
                                        if (link.contains("profile.php")) {
                                            link = link.substring(link.indexOf(".php") + 5, link.length());
                                        }
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    } else if (link.contains("php?")) {
                                        int index = link.indexOf("php?");
                                        link = link.substring(index + 4, link.length());
                                        ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(link);
                                        checkich = true;
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            //   System.out.println(checkFacebook+", "+link);
                            if (!checkich)
                                ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());

                            //   ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText(socialModel.getFacebookLink());
                            contact.hasFacebook = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getFacebookLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());

                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getFacebookLink() != null && !socialModel.getFacebookLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getFacebookLink());
                            }
                            contact.getSocialModel().setFacebookLink(null);
                            //  ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                            //  ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageResource(R.drawable.icn_social_facebook_gray);
                            Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image = getResources().getDrawable(R.drawable.icn_social_facebook2);
                            LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                            ((ImageView) socialPopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);

                           /* ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);


                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            }catch (Exception e){

                            }*/


                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.facebook_icon)).setImageDrawable(ld);
                            }


                            ((TextView) socialPopup.findViewById(R.id.facebook_nick)).setText("add username or link");
                            contact.hasFacebook = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);


                        //UPDATE
                        /*ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                       // EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.vk_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getVkLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getVkLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getVkLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.VK);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_vk));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.VK)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.VK)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_vk2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("vkontakte");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://vk.com/" + f;
                            }

                            if (ClipboardType.isVk(f)) {
                                socialModel.setVkLink(f);
                            } else {
                                socialModel.setVkLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setVkLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#507299"));
                            Drawable imagev = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }


                            try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {
                                ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            }

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasVk = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getVkLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getVkLink() != null && !socialModel.getVkLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getVkLink());
                            }
                            contact.getSocialModel().setVkLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.icn_social_vk2);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }


                            ((TextView) socialPopup.findViewById(R.id.vkNick)).setText("add username or");
                            contact.hasVk = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }


                        realm.close();

                        //initIconColor(contact, mainView);

                        initIconColor(contact, mainView);


                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        //==============================================================================================================================add new Social


        socialPopup.findViewById(R.id.medium_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getMediumLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getMediumLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getMediumLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.MEDIUM);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.medium_size_64));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.MEDIUM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.MEDIUM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.medium_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("medium");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                            }


                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                if (!f.contains("@"))
                                    f = "https://medium.com/@" + f;
                                else
                                    f = "https://medium.com/" + f;
                            }

                            if (ClipboardType.isMedium(f)) {
                                socialModel.setMediumLink(f);
                            } else {
                                socialModel.setMediumLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setMediumLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#000000"));
                            Drawable imagev = getResources().getDrawable(R.drawable.medium_white);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.medium_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.medium_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.medium_icon)).setImageDrawable(ldv);
                            }


                            try {
                                String link = socialModel.getMediumLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("com/@")) {
                                    //System.out.println("TRUE VK LINK");
                                    link = link.substring(link.indexOf("com/") + 4, link.length());
                                    //System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(link);
                                } else
                                    ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(socialModel.getMediumLink());
                            } catch (Exception e) {
                                ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText(socialModel.getMediumLink());
                            }

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasMedium = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getMediumLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getMediumLink() != null && !socialModel.getMediumLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getMediumLink());
                            }
                            contact.getSocialModel().setMediumLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.medium_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.medium_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.medium_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.medium_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.medium_icon)).setImageDrawable(ld2);
                            }


                            ((TextView) socialPopup.findViewById(R.id.mediumNick)).setText("add username or link");
                            contact.hasMedium = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);


                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.twitter_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getTwitterLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTwitterLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getTwitterLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.TWITTER);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_twitter_48));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.TWITTER)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.TWITTER)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        if (name == null || name.trim().isEmpty()) return;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        if (name == null || name.trim().isEmpty()) return;

                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + str + "&src=typed_query&f=user"));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));
                        } else {
                            //     if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://twitter.com/search?q=" + mach[0] + "&src=typed_query&f=user"));
                            //i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //     else
                            //         i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));
                        }

                        startActivity(i);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_twitter_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("twitter");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://twitter.com/" + f;
                            }

                            if (ClipboardType.isTwitter(f)) {
                                socialModel.setTwitterLink(f);
                            } else {
                                socialModel.setTwitterLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setTwitterLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#2ca7e0"));
                            Drawable imagev = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ldv);

                            ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);


                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                          /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }*/


                            /*try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {*/

                            /*if(!socialModel.getTwitterLink().contains("https://twitter.com/") || !socialModel.getTwitterLink().contains("http://twitter.com/") ){
                                socialModel.setTwitterLink("https://twitter.com/"+socialModel.getTwitterLink());
                            }*/

                            if (socialModel.getTwitterLink().contains(".com/")) {
                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink().substring(socialModel.getTwitterLink().indexOf(".com/") + 5));
                            } else
                                ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText(socialModel.getTwitterLink());
                            //}

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasTwitter = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTwitterLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getTwitterLink() != null && !socialModel.getTwitterLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTwitterLink());
                            }
                            contact.getSocialModel().setTwitterLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.ic_twitter_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.twitter_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                           /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }*/


                            ((TextView) socialPopup.findViewById(R.id.twitterNick)).setText("add username or");
                            contact.hasTwitter = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);

                        /*ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                       // EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });

        socialPopup.findViewById(R.id.youtube_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getYoutubeLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getYoutubeLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getYoutubeLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.YOUTUBE);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_youtube_48));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.YOUTUBE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.YOUTUBE)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.ic_youtube_white);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Youtube");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)

                            if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.youtube.com/channel/" + f;
                            }

                            if (ClipboardType.isYoutube(f)) {
                                socialModel.setYoutubeLink(f);
                            } else {
                                socialModel.setYoutubeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setYoutubeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk);
                            Drawable colorv = new ColorDrawable(Color.parseColor("#ed2524"));
                            Drawable imagev = getResources().getDrawable(R.drawable.ic_youtube_white);
                            LayerDrawable ldv = new LayerDrawable(new Drawable[]{colorv, imagev});
                            ((ImageView) socialPopup.findViewById(R.id.youtube_icon)).setImageDrawable(ldv);

                          /*  ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }catch (Exception e){

                            }*/


                           /* if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ldv);
                            }*/


                            /*try {
                                String link = socialModel.getVkLink();
                                String checkVK = link.substring(0, 8);
                                if (link.contains("https://vk.com/")) {
                                    System.out.println("TRUE VK LINK");
                                    link = link.substring(15, link.length());
                                    System.out.println("TRUE VK LINK2 = " + link);
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://m.vk.com/")) {
                                    link = link.substring(17, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else if (link.contains("m.vk.com/")) {
                                    link = link.substring(9, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("vk.com/")) {
                                    link = link.substring(7, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);
                                } else if (link.contains("https://www.vk.com/")) {
                                    link = link.substring(19, link.length());
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(link);

                                } else
                                    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            } catch (Exception e) {*/
                            if (socialModel.getYoutubeLink().contains("user/") || socialModel.getYoutubeLink().contains("channel/")) {
                                if (socialModel.getYoutubeLink().contains("user/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("user/") + 5);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                } else if (socialModel.getYoutubeLink().contains("channel/")) {
                                    String text = socialModel.getYoutubeLink().substring(socialModel.getYoutubeLink().indexOf("channel/") + 8);
                                    ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(text);
                                }
                            } else
                                ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText(socialModel.getYoutubeLink());
                            //}

                            //        if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.vkNick)).setText(socialModel.getVkLink());
                            contact.hasYoutube = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getYoutubeLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getYoutubeLink() != null && !socialModel.getYoutubeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getYoutubeLink());
                            }
                            contact.getSocialModel().setYoutubeLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageResource(R.drawable.icn_social_vk_gray);
                            Drawable color2 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image2 = getResources().getDrawable(R.drawable.ic_youtube_white);
                            LayerDrawable ld2 = new LayerDrawable(new Drawable[]{color2, image2});
                            ((ImageView) socialPopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                         /*   ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.facebook_icon)).setImageDrawable(ld2);
                            }catch (Exception e){

                            }*/

                          /*  if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.vk_icon)).setImageDrawable(ld2);
                            }*/


                            ((TextView) socialPopup.findViewById(R.id.youtubeNick)).setText("add username or");
                            contact.hasYoutube = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);


                       /* ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });

        //=====================================================================================================================================================end Add New social


        socialPopup.findViewById(R.id.linkedLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getLinkedInLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getLinkedInLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getLinkedInLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.LINKEDIN);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_linkedin));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocial)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.LINKEDIN)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.LINKEDIN)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));

                        } else {
                            //    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //    else
                            //        i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));

                        }

                        startActivity(i);
                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String name = contact.getName();
                        String[] mach = name.split(" ");

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        if (mach.length >= 2) {
                            String str = "";
                            for (int i2 = 0; i2 < mach.length; i2++) {
                                str += mach[i2];
                                if (i2 != mach.length - 1) str += "%20";
                            }
                            //  if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + str));
                            //  else
                            //      i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + str));

                        } else {
                            //  if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                            i.setData(Uri.parse("https://www.linkedin.com/mwlite/search/results/all/?keywords=" + mach[0]));
                            //  else
                            //      i.setData(Uri.parse("https://www.linkedin.com/search/results/companies/v2/?keywords=" + mach[0]));

                        }

                        startActivity(i);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocial));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_linked2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("LinkedIn");


                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //    if (contact.getSocialModel() != null)

                            if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                            }

                            String f = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (!f.contains(".com/")) {
                                f = "https://www.linkedin.com/in/" + f;
                            }

                            if (ClipboardType.isLinkedIn(f)) {
                                socialModel.setLinkedInLink(f);
                            } else {
                                socialModel.setLinkedInLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            }

                            //socialModel.setLinkedInLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //      ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                            //      ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin);
                            Drawable colorl = new ColorDrawable(Color.parseColor("#0077B7"));
                            Drawable imagel = getResources().getDrawable(R.drawable.icn_social_linked2);
                            LayerDrawable ldl = new LayerDrawable(new Drawable[]{colorl, imagel});

                        /*    ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ldl);
                            }


                            try {
                                String link = socialModel.getLinkedInLink();
                                String sub = link.substring(link.length() - 20, link.length());
                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText(sub);
                            } catch (Exception e) {
                                e.printStackTrace();
                                ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                            }
                            //  ((TextView) socialPopup.findViewById(R.id.link_text)).setText(socialModel.getLinkedInLink());
                            contact.hasLinked = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getLinkedInLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getLinkedInLink() != null && !socialModel.getLinkedInLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getLinkedInLink());
                            }
                            contact.getSocialModel().setLinkedInLink(null);
                            //     ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                            //     ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageResource(R.drawable.icn_social_linkedin_gray);
                            Drawable color3 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image3 = getResources().getDrawable(R.drawable.icn_social_linked2);
                            LayerDrawable ld3 = new LayerDrawable(new Drawable[]{color3, image3});
                            ((ImageView) socialPopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                           /* ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.link_icon)).setImageDrawable(ld3);
                            }

                            ((TextView) socialPopup.findViewById(R.id.link_text)).setText("add new link");
                            contact.hasLinked = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);


                       // EventBus.getDefault().post(new UpdateFile());

                    }
                });
                editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        editFrame.setVisibility(View.GONE);
                    }
                });
            }
        });

        socialPopup.findViewById(R.id.instagramLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getInstagramLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getInstagramLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getInstagramLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.INSTAGRAM);
                else {
                    editFrame.setVisibility(View.VISIBLE);


                    //if(contact.listOfContacts == null || contact.listOfContacts.isEmpty()) {
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.VISIBLE);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_instagram));

                    Drawable color = new ColorDrawable(Color.parseColor("#e2e5e8"));
                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                    LayerDrawable ld = new LayerDrawable(new Drawable[]{color, image});
                    ((ImageView) editFrame.findViewById(R.id.imageEditSocialInsta)).setImageDrawable(ld);
                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");
                    /*}else{
                        ((EditText)editFrame.findViewById(R.id.dataToEdit)).setPadding(0,0,0,0);
                        editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                        editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link or username");
                    }*/
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.INSTAGRAM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.INSTAGRAM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                editFrame.findViewById(R.id.imageEditSocialInsta).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                editFrame.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });


                editFrame.findViewById(R.id.imageEditSocialInsta).setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View view, MotionEvent motionEvent) {
                        System.out.println("CLICK WATS ANIM");

                        ImageView cImg = ((ImageView) editFrame.findViewById(R.id.imageEditSocialInsta));
                        //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                        //  FrameLayout frameLayout = ((FrameLayout) mainView.findViewById(R.id.company_profile_block));
                        switch (motionEvent.getAction()) {
                            case MotionEvent.ACTION_DOWN: {

                                if (checkClick_facebookEdit) {
                                    checkClick_facebookEdit = false;
                                    int colorFrom = Color.parseColor("#e2e5e8");
                                    int colorTo = Color.parseColor("#F9A825");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionDown_(colorFrom, colorTo, image, cImg);
                                }

                                //     OnTouchMethod(textView);
                                break;
                            }
                            case MotionEvent.ACTION_UP: {
                                if (!checkClick_facebookEdit) {
                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    AnimColorMessenger.ActionUp_(colorFrom, colorTo, image, cImg);
                                }

                                break;
                            }
                            case MotionEvent.ACTION_CANCEL: {

                                int colorFrom = Color.parseColor("#F9A825");
                                int colorTo = Color.parseColor("#e2e5e8");
                                Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                AnimColorMessenger.ActionCancel_(colorFrom, colorTo, image, cImg);

                                break;
                            }
                            case MotionEvent.ACTION_MOVE: {
                                if (!checkClick_facebookEdit) {

                                    int colorFrom = Color.parseColor("#F9A825");
                                    int colorTo = Color.parseColor("#e2e5e8");
                                    Drawable image = getResources().getDrawable(R.drawable.icn_social_ints2);
                                    checkClick_facebookEdit = AnimColorMessenger.ActionMove_(colorFrom, colorTo, image, cImg, motionEvent, mainView);

                                }

                                break;
                            }
                        }

                        return false;
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Instagram");
                //((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Add link, username or search");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //  if (contact.getSocialModel() != null)

                            if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                            }



                            String username = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();

                            if (username.contains("?utm")) {
                                int ind = username.indexOf('?');
                                if (ind != -1)
                                    username = username.substring(0, ind);

                            }

                            if (username.charAt(username.length() - 1) == '/') {
                                username = username.substring(0, username.length() - 1);
                            }

                            if (!username.toLowerCase().contains("instagram.com")) {
                                username = "https://instagram.com/" + username;
                            }

                            socialModel.setInstagramLink(username);
                            //    ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram);
                            //    ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram);
                            Drawable colori = new ColorDrawable(Color.parseColor("#8a3ab9"));
                            Drawable imagei = getResources().getDrawable(R.drawable.icn_social_ints2);
                            LayerDrawable ldi = new LayerDrawable(new Drawable[]{colori, imagei});
                            ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ldi);
                         /*   ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ldi);
                            }

                            //   if (contact.getSocialModel() != null)


                            contact.hasInst = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            String inst = contact.getSocialModel().getInstagramLink();

                            if (inst.contains(".com/")) {
                                int ind = inst.indexOf(".com/");
                                String outLink = inst.substring(ind + 5, inst.length());


                                if (outLink.contains("?")) {
                                    int in = outLink.indexOf("?");
                                    outLink = outLink.substring(0, in);
                                }

                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(outLink);
                            } else
                                ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText(contact.getSocialModel().getInstagramLink());

                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getInstagramLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getInstagramLink() != null && !socialModel.getInstagramLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getInstagramLink());
                            }
                            socialModel.setInstagramLink(null);
                            //         ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                            //         ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageResource(R.drawable.icn_social_instagram_gray);
                            Drawable color4 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image4 = getResources().getDrawable(R.drawable.icn_social_ints2);
                            LayerDrawable ld4 = new LayerDrawable(new Drawable[]{color4, image4});
                            ((ImageView) socialPopup.findViewById(R.id.instagram_icon)).setImageDrawable(ld4);
                          /*  ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);

                            try{
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }

                            try{
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((ImageView) profilePopUp.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((ImageView) companyProfilePopup.findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            } else {
                                ((ImageView) getActivity().findViewById(R.id.inst_icon)).setImageDrawable(ld4);
                            }


                            ((TextView) socialPopup.findViewById(R.id.instagramNick)).setText("add new link");
                            contact.hasInst = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //    EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        //initIconColor(contact, mainView);

                        realm.close();

                        initIconColor(contact, mainView);


                        //EventBus.getDefault().post(new UpdateFile());

                    }
                });
            }
        });

        socialPopup.findViewById(R.id.viberLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getViberLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getViberLink());


                if (contact.getSocialModel() != null && contact.getSocialModel().getViberLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.VIBER);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);

                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_viber));
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.VIBER) || cl2.getType().equals(ClipboardEnum.PHONE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.VIBER)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Viber");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter mobile number");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //       if (contact.getSocialModel() != null)

                            if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                            }

                            socialModel.setViberLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //        ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                            //        ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber);
                            Drawable colorvi = new ColorDrawable(Color.parseColor("#6F3FAA"));
                            Drawable imagevi = getResources().getDrawable(R.drawable.icn_social_viber2);
                            LayerDrawable ldvi = new LayerDrawable(new Drawable[]{colorvi, imagevi});
                            ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ldvi);
                            }


                            //   if (contact.getSocialModel() != null)
                            ((TextView) socialPopup.findViewById(R.id.viber_text)).setText(socialModel.getViberLink());
                            contact.hasViber = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getViberLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //    EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getViberLink() != null && !socialModel.getViberLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getViberLink());
                            }
                            socialModel.setViberLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //      ((ImageView) socialPopup.findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                            //      ((ImageView) getActivity().findViewById(R.id.viber_icon)).setImageResource(R.drawable.icn_social_viber_gray);
                            Drawable color5 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image5 = getResources().getDrawable(R.drawable.icn_social_viber2_gray);
                            LayerDrawable ld5 = new LayerDrawable(new Drawable[]{color5, image5});
                            ((CircleImageView) socialPopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                       /*     ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.viber_icon)).setImageDrawable(ld5);
                            }

                            ((TextView) socialPopup.findViewById(R.id.viber_text)).setText("add new link");
                            contact.hasViber = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //   EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                        ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);

                       // EventBus.getDefault().post(new UpdateFile());
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.whatsapp_link).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getWhatsappLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getWhatsappLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getWhatsappLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.WHATSAPP);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);
                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_whatsapp));

                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.WHATSAPP)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.WHATSAPP)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Whatsapp");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter mobile number");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();


                        //  contact.setSocialModel(new SocialModel());
                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            // if (contact.getSocialModel() != null)

                            if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                            }

                            socialModel.setWhatsappLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());

                            //    contact.getSocialModel().setWhatsappLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //  ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                            //  ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp);
                            Drawable colorw = new ColorDrawable(Color.parseColor("#75B73B"));
                            Drawable imagew = getResources().getDrawable(R.drawable.icn_social_whatsapp3);
                            LayerDrawable ldw = new LayerDrawable(new Drawable[]{colorw, imagew});
                            ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ldw);
                            }

                            //   if(contact.getSocialModel() != null)
                            ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText(socialModel.getWhatsappLink());


                            contact.hasWhatsapp = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getWhatsappLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            // EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getWhatsappLink() != null && !socialModel.getWhatsappLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getWhatsappLink());
                            }
                            socialModel.setWhatsappLink(null);
                            //      contact.getSocialModel().setWhatsappLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                            //    ((ImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageResource(R.drawable.icn_social_whatsapp_gray);
                            Drawable color6 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image6 = getResources().getDrawable(R.drawable.icn_social_whatsapp3_gray);
                            LayerDrawable ld6 = new LayerDrawable(new Drawable[]{color6, image6});
                            ((CircleImageView) socialPopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                         /*   ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.whatsapp_icon)).setImageDrawable(ld6);
                            }


                            ((TextView) socialPopup.findViewById(R.id.whatsapp_text)).setText("add new link");
                            contact.hasWhatsapp = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                       /* ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                       // EventBus.getDefault().post(new UpdateFile());
                        //    realm.commitTransaction();
                    }
                });
            }
        });

        socialPopup.findViewById(R.id.telegramLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);

                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (contact.getSocialModel().getTelegramLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getTelegramLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getTelegramLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.TELEGRAM);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);

                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);
                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_telegram));
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String socialLinkClip = "";
                        for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.TELEGRAM)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.TELEGRAM)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                    }
                });


                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Telegram");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter username or mobile number");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {


                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //    if (contact.getSocialModel() != null)

                            if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                            }


                            //==================================

                            String username = ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString();
                            char firstSymbol = username.charAt(0);
                            String regex = "[0-9]+";
                            username = username.replaceAll("[-() ]", "");
                            if (((firstSymbol == '@' && !username.substring(1).matches(regex)) || (firstSymbol != '@' && !username.matches(regex))) && !username.contains("t.me/")) {
                                username = "t.me/" + username;
                            }

                            //=======================

                            socialModel.setTelegramLink(username);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //  ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                            //  ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram);
                            Drawable colort = new ColorDrawable(Color.parseColor("#7AA5DA"));
                            Drawable imaget = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            LayerDrawable ldt = new LayerDrawable(new Drawable[]{colort, imaget});
                            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                       /*     ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }catch (Exception e){
                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ldt);
                            }

                            //   if (contact.getSocialModel() != null)


                            contact.hasTelegram = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();

                            String tel = contact.getSocialModel().getTelegramLink();
                            if (tel.contains(".me/")) {
                                int indexx = tel.indexOf(".me/");
                                String outLink = tel.substring(indexx + 4, tel.length());
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);
                            } else if (tel.contains("?p=")) {
                                int indexx = tel.indexOf("?p=");
                                String outLink = tel.substring(indexx + 3, tel.length());
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(outLink);

                            } else
                                ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText(contact.getSocialModel().getTelegramLink());

                            contactsService.addNoteToContact(contact.getIdContact(), contact.getSocialModel().getTelegramLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getTelegramLink() != null && !socialModel.getTelegramLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), socialModel.getTelegramLink());
                            }
                            socialModel.setTelegramLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                            //    ((ImageView) getActivity().findViewById(R.id.telegram_icon)).setImageResource(R.drawable.icn_social_telegram_gray);
                            Drawable color7 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image7 = getResources().getDrawable(R.drawable.icn_social_telegram2);
                            LayerDrawable ld7 = new LayerDrawable(new Drawable[]{color7, image7});
                            ((CircleImageView) socialPopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.telegram_icon)).setImageDrawable(ld7);
                            }

                            ((TextView) socialPopup.findViewById(R.id.telegram_text)).setText("add new link");
                            contact.hasTelegram = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                        /*ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                       // EventBus.getDefault().post(new UpdateFile());
                    }
                });
            }
        });


        socialPopup.findViewById(R.id.skypeLink).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE) {
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                    return;
                }
                editFrame.setVisibility(View.GONE);
                //editFrame.setVisibility(View.VISIBLE);
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText("");
                if (contact.getSocialModel() != null)
                    if (socialModel.getSkypeLink() != null)
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(contact.getSocialModel().getSkypeLink());

                if (contact.getSocialModel() != null && contact.getSocialModel().getSkypeLink() != null)
                    showEditPopupPreviewSocial(contact, SocialEnums.SKYPE);
                else {
                    editFrame.setVisibility(View.VISIBLE);

                    ((EditText) editFrame.findViewById(R.id.dataToEdit)).setPadding(0, 0, 0, 0);

                    editFrame.findViewById(R.id.imageEditSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.searchSocial).setVisibility(View.GONE);
                    editFrame.findViewById(R.id.get_last_clips).setVisibility(View.VISIBLE);
                    editFrame.findViewById(R.id.ok_social).setVisibility(View.GONE);

                    editFrame.findViewById(R.id.frameImageEditSocialInsta).setVisibility(View.GONE);
                    ((ImageView) editFrame.findViewById(R.id.iconDataEdit)).setImageDrawable(getActivity().getResources().getDrawable(R.drawable.icn_social_skype));
                }

                editFrame.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String socialLinkClip = "";

                        /*for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                            if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                boolean checkFind = false;
                                for (Clipboard cl2 : cl.getListClipboards()) {
                                    if (cl2.getType().equals(ClipboardEnum.SKYPE)) {
                                        socialLinkClip = cl2.getValueCopy();
                                        checkFind = true;
                                        break;
                                    }
                                }
                                if (checkFind) break;
                            } else {
                                if (cl.getType().equals(ClipboardEnum.SKYPE)) {
                                    socialLinkClip = cl.getValueCopy();
                                    break;
                                }
                            }
                        }*/
                        ((EditText) editFrame.findViewById(R.id.dataToEdit)).setText(FabNotificationService.clipboard.get(0).getValueCopy());
                    }
                });

                //editFrame.setVisibility(View.VISIBLE);
                openedViews.add(editFrame);
                ((TextView) editFrame.findViewById(R.id.typeField)).setText("Skype");
                ((EditText) editFrame.findViewById(R.id.dataToEdit)).setHint("Enter username");

                editFrame.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Realm realm = Realm.getDefaultInstance(); //-
                        realm.beginTransaction();
                        SocialModel socialModel;
                        if (contact.getSocialModel() == null) {
                            socialModel = realm.createObject(SocialModel.class);
                        } else
                            socialModel = contact.getSocialModel();

                        if (((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().length() > 0) {
                            //     if (contact.getSocialModel() != null)
                            //     contact.getSocialModel().setSkypeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());
                            //     else

                            if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                            }

                            socialModel.setSkypeLink(((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().toString());

                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                            //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype);
                            Drawable colors = new ColorDrawable(Color.parseColor("#1eb8ff"));
                            Drawable images = getResources().getDrawable(R.drawable.icn_social_skype2);
                            LayerDrawable lds = new LayerDrawable(new Drawable[]{colors, images});
                            ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                        /*    ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(lds);
                            }

                            //    if (contact.getSocialModel() != null)
                            //    ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(contact.getSocialModel().getSkypeLink());
                            //    else
                            ((TextView) socialPopup.findViewById(R.id.skype_text)).setText(socialModel.getSkypeLink());
                            contact.hasSkype = true;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            contactsService.addNoteToContact(contact.getIdContact(), "Skype: " + contact.getSocialModel().getSkypeLink(), contact.getName());
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //  EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        } else {
                            if (socialModel.getSkypeLink() != null && !socialModel.getSkypeLink().isEmpty()) {
                                contactsService.deleteNoteContact(contact.getIdContact(), "Skype: " + socialModel.getSkypeLink());
                            }
                            socialModel.setSkypeLink(null);
                            ((EditText) editFrame.findViewById(R.id.dataToEdit)).getText().clear();
                            //    ((ImageView) socialPopup.findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                            //    ((ImageView) getActivity().findViewById(R.id.skype_icon)).setImageResource(R.drawable.icn_social_skype_gray);
                            Drawable color8 = new ColorDrawable(Color.parseColor("#e2e5e8"));
                            Drawable image8 = getResources().getDrawable(R.drawable.icn_social_skype2_gray);
                            LayerDrawable ld8 = new LayerDrawable(new Drawable[]{color8, image8});
                            ((CircleImageView) socialPopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                          /*  ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);

                            try{
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }

                            try{
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }catch (Exception e){

                            }*/

                            if (profilePopUp != null && profilePopUp.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) profilePopUp.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            } else if (companyProfilePopup != null && companyProfilePopup.getVisibility() == View.VISIBLE) {
                                ((CircleImageView) companyProfilePopup.findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            } else {
                                ((CircleImageView) getActivity().findViewById(R.id.skype_icon)).setImageDrawable(ld8);
                            }

                            ((TextView) socialPopup.findViewById(R.id.skype_text)).setText("add new link");
                            contact.hasSkype = false;
                            contact.setSocialModel(socialModel);
                            realm.commitTransaction();
                            ContactCacheService.updateContact(contact, mainView.getContext());
                            //    EventBus.getDefault().post(new UpdateFile());
                            editFrame.setVisibility(View.GONE);
                        }

                        realm.close();

                       /* ArrayList<String> listEdit = new ArrayList<>();
                        ArrayList<Boolean> listEditBool = new ArrayList<>();

                        listEdit.add(contact.getName());
                        if (contact.listOfContacts == null || contact.listOfContacts.isEmpty())
                            listEditBool.add(true);
                        else
                            listEditBool.add(false);

                        MainActivity.listToManyUpdateFile.add("EDIT");
                        MainActivity.listToManyUpdateFile.add(listEdit);
                        MainActivity.listToManyUpdateFile.add(listEditBool);*/

                       // EventBus.getDefault().post(new UpdateFile());
                    }
                });
            }
        });

        editFrame.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                editFrame.setVisibility(View.GONE);
            }
        });

        socialPopup.findViewById(R.id.closeArrowSocial).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                initIconColor(selectedContact, mainView);


                if (popupProfileEditPreviewSocial != null && popupProfileEditPreviewSocial.getVisibility() == View.VISIBLE)
                    popupProfileEditPreviewSocial.setVisibility(View.GONE);
                socialPopup.setVisibility(View.GONE);
            }
        });
        socialPopup.setVisibility(View.VISIBLE);
        openedViews.add(socialPopup);

    }

    public void updateWeb() {
        if (selectedContact.webSite != null && !selectedContact.webSite.isEmpty()) {

            ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);


            ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);



            String web_c = selectedContact.webSite;

            if (web_c.contains("www.")) {
                web_c = web_c.replace("www.", "");
            }
            if (web_c.contains("https://")) {
                web_c = web_c.replace("https://", "");
            }
            if (web_c.contains("http://")) {
                web_c = web_c.replace("http://", "");
            }

            ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
            ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

            mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                        String uri = selectedContact.webSite;
                        if (!uri.contains("https://") && !uri.contains("http://"))
                            uri = "https://" + uri;

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse(uri));

                        if (getActivity() != null)
                            getActivity().startActivity(i);
                        else
                            activityApp.startActivity(i);
                    } catch (Exception e) {

                    }
                }
            });

            mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                            /*Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                    "mailto", selectedContact.webSite, null));
                            emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                            emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                            startActivity(Intent.createChooser(emailIntent, "Send email"));*/

                    try {

                        String uri = selectedContact.webSite;
                        if (!uri.contains("https://") && !uri.contains("http://"))
                            uri = "https://" + uri;

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse(uri));

                        if (getActivity() != null)
                            getActivity().startActivity(i);
                        else
                            activityApp.startActivity(i);

                    } catch (Exception e) {

                    }

                }
            });
        } else {
            ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web);
            ((TextView) mainView.findViewById(R.id.web_title)).setText("add web");
            ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.gray));
            ((EditText) mainView.findViewById(R.id.web_title_edit)).setText("");


            mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {

                        FrameLayout editFrameWeb = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
                        ((TextView) editFrameWeb.findViewById(R.id.typeField)).setText("Web");

                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setVisibility(View.VISIBLE);
                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocialInsta)).setVisibility(View.GONE);
                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_web));
                        ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                        editFrameWeb.findViewById(R.id.ok_social).setVisibility(View.GONE);

                        editFrameWeb.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                        ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setHint("Add name or address");
                        ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);


                        editFrameWeb.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                editFrameWeb.setVisibility(View.GONE);
                            }
                        });

                        editFrameWeb.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().length() > 0) {


                                    Realm realm = Realm.getDefaultInstance(); //+
                                    realm.beginTransaction();
                                    selectedContact.webSite = ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();
                                    realm.commitTransaction();
                                    realm.close();


                                    ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                                    ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                                    String web_c = selectedContact.webSite;

                                    if (web_c.contains("www.")) {
                                        web_c = web_c.replace("www.", "");
                                    }
                                    if (web_c.contains("https://")) {
                                        web_c = web_c.replace("https://", "");
                                    }
                                    if (web_c.contains("http://")) {
                                        web_c = web_c.replace("http://", "");
                                    }

                                    ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
                                    ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                                    mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            try {

                                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                String uri = selectedContact.webSite;
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                                else
                                                    activityApp.startActivity(i);

                                            } catch (Exception e) {

                                            }
                                        }
                                    });

                                    mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            try {

                                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                String uri = selectedContact.webSite;
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                                else
                                                    activityApp.startActivity(i);

                                            } catch (Exception e) {

                                            }
                                        }
                                    });
                                }
                                if (companyProfileDataFragment != null && companyProfileDataFragment.companyAdapter != null)
                                    companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                                editFrameWeb.setVisibility(View.GONE);
                            }
                        });


                        editFrameWeb.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                String socialLinkClip = "";
                                for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                                    if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                        boolean checkFind = false;
                                        for (Clipboard cl2 : cl.getListClipboards()) {
                                            if (cl2.getType().equals(ClipboardEnum.WEB)) {
                                                socialLinkClip = cl2.getValueCopy();
                                                checkFind = true;
                                                break;
                                            }
                                        }
                                        if (checkFind) break;
                                    } else {
                                        if (cl.getType().equals(ClipboardEnum.WEB)) {
                                            socialLinkClip = cl.getValueCopy();
                                            break;
                                        }
                                    }
                                }
                                ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                            }
                        });


                        editFrameWeb.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                try {
                                    if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                        String uri = selectedContact.webSite;
                                        if (!uri.contains("https://") && !uri.contains("http://"))
                                            uri = "https://" + uri;

                                        Intent i = new Intent(Intent.ACTION_VIEW);
                                        i.setData(Uri.parse(uri));

                                        if (getActivity() != null)
                                            getActivity().startActivity(i);
                                        else
                                            activityApp.startActivity(i);
                                    }

                                } catch (Exception e) {

                                }
                            }
                        });

                        editFrameWeb.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                            @Override
                            public boolean onTouch(View v, MotionEvent event) {
                                return false;
                            }
                        });

                        editFrameWeb.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                try {
                                    if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                        String uri = ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();

                                       /* if(ClipboardType.isWeb(uri)) {
                                            if (!uri.contains("https://") && !uri.contains("http://"))
                                                uri = "https://" + uri;

                                            Intent i = new Intent(Intent.ACTION_VIEW);
                                            i.setData(Uri.parse(uri));

                                            if (getActivity() != null)
                                                getActivity().startActivity(i);
                                        }else {*/
                                        Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                                        intent.putExtra(SearchManager.QUERY, ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString());
                                        if (getActivity() != null)
                                            getActivity().startActivity(intent);
                                        // }


                                    }

                                } catch (Exception e) {

                                }
                            }
                        });


                        editFrameWeb.setVisibility(View.VISIBLE);


                        openedViews.add(editFrameWeb);

                    } catch (Exception e) {

                    }
                }
            });


        }
    }

    private Time getRandomDate() {
        final Random random = new Random();
        final int millisInDay = 24 * 60 * 60 * 1000;
        return new Time((long) random.nextInt(millisInDay));
    }

    private void cancleEditMode() {
        nowEdit = false;

        ((TextView) mainView.findViewById(R.id.name)).setText(selectedContact.getName());
        mainView.findViewById(R.id.name).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.editNameProflie).setVisibility(View.GONE);
        if (selectedContact.getCompany() != null) {
            ((TextView) mainView.findViewById(R.id.company_title)).setText(selectedContact.getCompany());
            mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
        }
        mainView.findViewById(R.id.company_title_edit).setVisibility(View.GONE);
        if (selectedContact.getCompanyPossition() != null) {
            ((TextView) mainView.findViewById(R.id.company)).setText(selectedContact.getCompanyPossition());
            mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
        }
        mainView.findViewById(R.id.company_edit).setVisibility(View.GONE);

        mainView.findViewById(R.id.cardTime).setVisibility(View.VISIBLE);


        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : selectedContact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");

            containerHashTags.addView(text);
        }

        if (selectedContact != null && (selectedContact.getListOfHashtags() == null || selectedContact.getListOfHashtags().size() == 0)) {
            System.out.println("Add Hashtah TExt added");
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.gray));
            text.setText("hashtags");
            text.setOnClickListener(v1 -> {
                //containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);
        }

        HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);
        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
        scrollView.addView(containerHashTags);
        scrollView.setSmoothScrollingEnabled(false);
        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
        scrollView.setSmoothScrollingEnabled(true);
        mainView.findViewById(R.id.hashtagsLL).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.hashTagsEdit).setVisibility(View.GONE);
        editModeChecker = false;

        mainView.findViewById(R.id.lineNameProfile).setVisibility(View.GONE);
        mainView.findViewById(R.id.lineCompanyProfile).setVisibility(View.GONE);
        ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setVisibility(View.GONE);
        mainView.findViewById(R.id.positionVileEditPreview).setVisibility(View.GONE);
        mainView.findViewById(R.id.lineHashProfile).setVisibility(View.GONE);
        popupHelpCompanyposition.setVisibility(View.GONE);

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {
            mainView.findViewById(R.id.web_title_edit).setVisibility(View.GONE);
            mainView.findViewById(R.id.web_title).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
        } else {
            if (selectedContact.isFavorite || selectedContact.isPause || selectedContact.isFinished || selectedContact.isImportant || selectedContact.isCrown || selectedContact.isVip || selectedContact.isStartup || selectedContact.isInvestor) {
                if (selectedContact.isFavorite) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                } else if (selectedContact.isImportant) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                } else if (selectedContact.isFinished) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                } else if (selectedContact.isPause) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                }else if (selectedContact.isCrown) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                }else if (selectedContact.isVip) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                }else if (selectedContact.isStartup) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                }else if (selectedContact.isInvestor) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                }
                mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.starImgProfile).setVisibility(View.INVISIBLE);
            }

            updateEmail_Phone();
            //mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
        }


        initIconColor(selectedContact, mainView);
        /*if (selectedContact.getListOfContactInfo() != null)
            contactProfileDataFragment.contactNumberAdapter.setContactInfos(selectedContact.getListOfContactInfo());*/

        System.out.println("EDIT MODE END");
    }


    private void endEditMode() {


        Realm realm = Realm.getDefaultInstance(); //-
        realm.beginTransaction();
        String oldName = selectedContact.getName();
        if (((EditText) mainView.findViewById(R.id.editNameProflie)).getText().length() > 0) {
            selectedContact.setName(((EditText) mainView.findViewById(R.id.editNameProflie)).getText().toString().trim());
            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                contactsService.updateName(selectedContact.getIdContact(), oldName, selectedContact.getName());
        }

        //System.out.println("OLD NAME = "+oldName);
        //System.out.println("NEW NAME = "+selectedContact.getName());
        //System.out.println("NEW NAME2 = "+((EditText) mainView.findViewById(R.id.editNameProflie)).getText().toString().trim());

        //String oldComp = null;
        //String oldPosition = selectedContact.getCompanyPossition();
        //String mainCompany = selectedContact.getCompany();


        //String newPosition = ((EditText) fastEditPopup.findViewById(R.id.company_edit)).getText().toString();
        //String oldPosition = selectedContact.getCompanyPossition();


        //String mainCompany = selectedContact.getCompany();

        String oldComp = selectedContact.getCompany();


        if (((EditText) mainView.findViewById(R.id.company_title_edit)).getText().length() > 0) {
            oldComp = selectedContact.getCompany();
            if (selectedContact.getCompany() == null) {
                System.out.println("addCompanyToContact -=d=d=sdf");
                //contactsService.addCompanyToContact(String.valueOf(selectedContact.getId()),((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString());
            }
            selectedContact.setCompany(((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().trim());

        }

        realm.commitTransaction();

        mainView.findViewById(R.id.lineNameProfile).setVisibility(View.GONE);
        mainView.findViewById(R.id.lineCompanyProfile).setVisibility(View.GONE);
        ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setVisibility(View.GONE);
        mainView.findViewById(R.id.positionVileEditPreview).setVisibility(View.GONE);
        mainView.findViewById(R.id.lineHashProfile).setVisibility(View.GONE);


        realm.beginTransaction();


        if (selectedContact.getListOfHashtags() != null)
            for (int i = 0; i < selectedContact.getListOfHashtags().size(); i++) {
                contactsService.deleteNoteContact(selectedContact.getIdContact(), selectedContact.getListOfHashtags().get(i).getHashTagValue().toLowerCase());
            }

        if (((EditText) mainView.findViewById(R.id.hashTagsEdit)).getText().toString().trim().length() > 0) {
            String[] hashtags = ((EditText) mainView.findViewById(R.id.hashTagsEdit)).getText().toString().split(" ");
            RealmList<HashTag> listOfHashTag = new RealmList<>();
            for (int indexI = 0; indexI < hashtags.length; indexI++) {
                if (hashtags[indexI].length() == 1) continue;
                HashTag hashTag = realm.createObject(HashTag.class);
                hashTag.setHashTagValue(hashtags[indexI].toLowerCase());
                hashTag.setDate(new Date());
                if (!listOfHashTag.contains(hashTag)) {
                    listOfHashTag.add(hashTag);
                    contactsService.addNoteToContact(selectedContact.getIdContact(), hashTag.getHashTagValue(), selectedContact.getName());
                }

            }
            selectedContact.setListOfHashtags(listOfHashTag);
        } else {
            selectedContact.setListOfHashtags(new RealmList<>());
        }
        boolean findCompany = false;

        //===========================================
        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {


            if (selectedContact.isFavorite || selectedContact.isPause || selectedContact.isFinished || selectedContact.isImportant || selectedContact.isCrown || selectedContact.isVip || selectedContact.isStartup || selectedContact.isInvestor) {
                if (selectedContact.isFavorite) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                } else if (selectedContact.isImportant) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                } else if (selectedContact.isFinished) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                } else if (selectedContact.isPause) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                }else if (selectedContact.isCrown) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                }else if (selectedContact.isVip) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                }else if (selectedContact.isStartup) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                }else if (selectedContact.isInvestor) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                }

                mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);
            }


            if (/*selectedContact.getCompany() != null && */((EditText) mainView.findViewById(R.id.company_title_edit)).getText().length() > 0) {
                String companyName = selectedContact.getCompany();
                if (selectedContact.getCompany().length() > 0) {
                    realm.commitTransaction();

                    //ContactsFragment.listOfContacts = ContactCacheService.getAllContacts(null); //neeeeeew

                    ((Postman) activityApp).updateListOfContacts();


                    for (Contact contact : ContactCacheService.getCompanies()) {
                        if (contact.getName().toLowerCase().compareTo(companyName.toLowerCase()) == 0) {
                            boolean ch = false;
                            for (int i = 0; i < contact.listOfContacts.size(); i++) {
                                if (contact.listOfContacts.get(i).getId() == selectedContact.getId()) {
                                    realm.beginTransaction();
                                    contact.listOfContacts.set(i, selectedContact);
                                    realm.commitTransaction();


                                    ch = true;
                                }
                            }
                            if (!ch) {
                                realm.beginTransaction();
                                contact.listOfContacts.add(selectedContact);
                                realm.commitTransaction();

                            }
                            findCompany = true;
                        } else if (oldComp != null && contact.getName().toLowerCase().compareTo(oldComp.toLowerCase()) == 0) {
                            //  realm.commitTransaction();
                            Contact comp = ContactCacheService.getCompany(oldComp);
                            Contact ct = ContactCacheService.getContactById(selectedContact.getId());
                            if (comp != null) {
                                if (comp.listOfContacts.size() == 1) {

                                    adapterC.removeContactById(comp);

                                }
                                MainActivity.checkDel = ContactCacheService.removeContactFromCompany(comp, ct);
                            }
                        }
                    }
                    if (!findCompany) {

                        Date date = new Date();
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(date);
                        Time time = getRandomDate();
                        time.setHours(cal.get(Calendar.HOUR_OF_DAY));
                        time.setMinutes(cal.get(Calendar.MINUTE));
                        time.setSeconds(cal.get(Calendar.SECOND));

                        Contact company = new Contact(date);
                        company.setName(companyName.trim());
                        //    company.time = getRandomDate();
                        company.time = time.toString();
                        company.color = Color.rgb(Math.abs(companyName.hashCode() * 28439) % 255, Math.abs(companyName.hashCode() * 211239) % 255, Math.abs(companyName.hashCode() * 42368) % 255);
                        RealmList<Contact> listForSaveContact = new RealmList<>();
                        listForSaveContact.add(selectedContact);
                        company.listOfContacts = listForSaveContact;
                        //ContactsFragment.listOfContacts.add(company);
                        //   realm.commitTransaction();
                        ContactCacheService.updateCompany(company);

                        if (oldComp != null) {
                            Contact oldCompany = ContactCacheService.getCompany(oldComp);
                            if (oldCompany != null) {
                                if (oldCompany.listOfContacts.size() == 1 && oldCompany.listOfContacts.contains(selectedContact)) {
                                    adapterC.removeContactById(oldCompany);
                                    //=================
                                }
                                ContactCacheService.removeContactFromCompany(oldCompany, selectedContact);
                            }
                        }
                        //System.out.println("NEW SIZE = "+contactAdapter.getListOfContacts().size());
                        Contact comm = ContactCacheService.getCompany(company.getName());
                       /* contactAdapter.getListOfContacts().add(comm);
                        contactAdapter.getSavedList().add(comm);*/

                        adapterC.addContact(comm);

                    }

                   /* if (oldComp != null)
                        contactsService.addCompanybyCompany(selectedContact.getIdContact(), oldComp, companyName);
                    else if (oldComp == null && oldPosition != null)
                        contactsService.addCompanybyPosition(selectedContact.getIdContact(), oldPosition, companyName);
                    else
                        contactsService.addCompanyToContact(selectedContact.getIdContact(), companyName);*/

                    //mainCompany = companyName;

                }
            } else if (/*selectedContact.getCompany() != null && */ ((EditText) mainView.findViewById(R.id.company_title_edit)).getText().length() == 0) {

                String nameComp = selectedContact.getCompany();
                //  selectedContact.setCompany(null);
                realm.commitTransaction();
                Contact com = ContactCacheService.getCompany(nameComp);
                if (com != null) {
                    if (com.listOfContacts.size() == 1) {
                        adapterC.removeContactById(com);
                    }

                    MainActivity.checkDel = ContactCacheService.removeContactFromCompany(com, selectedContact);
                }


                realm.beginTransaction();
                selectedContact.setCompany(null);
                realm.commitTransaction();


                /*if (oldComp != null) {
                    System.out.println("ADD 1");
                    contactsService.addCompanybyCompany(selectedContact.getIdContact(), oldComp, null);
                }
                else if (oldComp == null && oldPosition != null) {
                    System.out.println("ADD 2");
                    contactsService.addCompanybyPosition(selectedContact.getIdContact(), oldPosition, null);
                }
                else {
                    System.out.println("ADD 3");
                    contactsService.addCompanyToContact(selectedContact.getIdContact(), null);
                }*/
                //mainCompany = null;


            }
            try {
                if (realm.isInTransaction())
                    realm.commitTransaction();
            } catch (Exception e) {
                e.printStackTrace();
            }
            String newPosition = ((EditText) mainView.findViewById(R.id.company_edit)).getText().toString();

            if ((selectedContact.getCompanyPossition() == null && newPosition.length() != 0) || (selectedContact.getCompanyPossition() != null && !selectedContact.getCompanyPossition().equals(newPosition))) {
                Contact contact1 = ContactCacheService.getContactByName(selectedContact.getName());
                realm.beginTransaction();
                if (newPosition.length() == 0) {
                    contact1.setCompanyPossition(null);
                    selectedContact.setCompanyPossition(null);

                    /*if (mainCompany != null && mainCompany != "")
                        contactsService.addComp(selectedContact.getIdContact(), null, mainCompany);
                    else if ((mainCompany == null || mainCompany == "") && oldPosition != null)
                        contactsService.addPostionByPosition(selectedContact.getIdContact(), oldPosition, null);
                    else
                        contactsService.insertPosition(selectedContact.getIdContact(), null);*/
                } else {
                    contact1.setCompanyPossition(newPosition);
                    selectedContact.setCompanyPossition(newPosition.trim());

                    /*if (mainCompany != null && mainCompany != "")
                        contactsService.addComp(selectedContact.getIdContact(), newPosition, mainCompany);
                    else if ((mainCompany == null || mainCompany == "") && oldPosition != null)
                        contactsService.addPostionByPosition(selectedContact.getIdContact(), oldPosition, newPosition);
                    else
                        contactsService.insertPosition(selectedContact.getIdContact(), newPosition);*/

                }

                realm.commitTransaction();
            }
            //==============
        }

        try {
            if (realm.isInTransaction())
                realm.commitTransaction();
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {

            contactsService.deleteCompany_Possition(selectedContact.getIdContact());
            if (selectedContact.getCompany() != null && !selectedContact.getCompany().isEmpty())
                contactsService.insertCompany(selectedContact.getIdContact(), selectedContact.getCompany(), selectedContact.getName());

            if (selectedContact.getCompanyPossition() != null && !selectedContact.getCompanyPossition().isEmpty() && (selectedContact.getCompany() != null && !selectedContact.getCompany().isEmpty()))
                contactsService.addComp(selectedContact.getIdContact(), selectedContact.getCompanyPossition(), selectedContact.getCompany());

            if (selectedContact.getCompanyPossition() != null && !selectedContact.getCompanyPossition().isEmpty() && (selectedContact.getCompany() == null || selectedContact.getCompany().isEmpty()))
                contactsService.insertPosition(selectedContact.getIdContact(), selectedContact.getCompanyPossition(), selectedContact.getName());

        }

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {


        }
        ContactCacheService.updateContact(selectedContact, mainView.getContext());

        if (selectedContact.listOfContacts != null && !selectedContact.listOfContacts.isEmpty()) {

            mainView.findViewById(R.id.web_title_edit).setVisibility(View.GONE);
            mainView.findViewById(R.id.web_title).setVisibility(View.VISIBLE);


            if (!selectedContact.getName().equals(oldName)) {
                System.out.println("QUALS NAME FALSE");
                for (Contact contact : selectedContact.listOfContacts) {
                    realm.beginTransaction();
                    contact.setCompany(selectedContact.getName());
                    realm.commitTransaction();


                    contactsService.addCompanybyCompany(contact.getIdContact(), oldName, selectedContact.getName());
                    //contactsService.updateCompany(contact.getIdContact(), oldName, selectedContact.getName());
                }
            }

            realm.beginTransaction();
            selectedContact.webSite = ((EditText) mainView.findViewById(R.id.web_title_edit)).getText().toString().trim();
            realm.commitTransaction();
            if (selectedContact.webSite != null && !selectedContact.webSite.isEmpty()) {
                ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                String web_c = selectedContact.webSite;

                if (web_c.contains("www.")) {
                    web_c = web_c.replace("www.", "");
                }
                if (web_c.contains("https://")) {
                    web_c = web_c.replace("https://", "");
                }
                if (web_c.contains("http://")) {
                    web_c = web_c.replace("http://", "");
                }

                ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
                ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                            String uri = selectedContact.webSite;
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));

                            if (getActivity() != null)
                                getActivity().startActivity(i);
                            else
                                activityApp.startActivity(i);

                        } catch (Exception e) {

                        }
                    }
                });

                mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                            String uri = selectedContact.webSite;
                            if (!uri.contains("https://") && !uri.contains("http://"))
                                uri = "https://" + uri;

                            Intent i = new Intent(Intent.ACTION_VIEW);
                            i.setData(Uri.parse(uri));

                            if (getActivity() != null)
                                getActivity().startActivity(i);
                            else
                                activityApp.startActivity(i);

                        } catch (Exception e) {

                        }
                    }
                });


            } else {
                ((TextView) mainView.findViewById(R.id.web_title)).setText("add web");
                ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.gray));
                ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web);


                mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {

                            FrameLayout editFrameWeb = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
                            ((TextView) editFrameWeb.findViewById(R.id.typeField)).setText("Web");

                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setVisibility(View.VISIBLE);
                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocialInsta)).setVisibility(View.GONE);
                            ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_web));
                            ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                            editFrameWeb.findViewById(R.id.ok_social).setVisibility(View.GONE);

                            editFrameWeb.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                            ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setHint("Add name or address");
                            ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);


                            editFrameWeb.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                    editFrameWeb.setVisibility(View.GONE);
                                }
                            });

                            editFrameWeb.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().length() > 0) {


                                        Realm realm = Realm.getDefaultInstance();
                                        realm.beginTransaction();
                                        selectedContact.webSite = ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();
                                        realm.commitTransaction();
                                        realm.close();


                                        ((ImageView) mainView.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                                        ((TextView) mainView.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                                        String web_c = selectedContact.webSite;

                                        if (web_c.contains("www.")) {
                                            web_c = web_c.replace("www.", "");
                                        }
                                        if (web_c.contains("https://")) {
                                            web_c = web_c.replace("https://", "");
                                        }
                                        if (web_c.contains("http://")) {
                                            web_c = web_c.replace("http://", "");
                                        }

                                        ((TextView) mainView.findViewById(R.id.web_title)).setText(web_c);
                                        ((TextView) mainView.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                                        mainView.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                try {

                                                    //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                    String uri = selectedContact.webSite;
                                                    if (!uri.contains("https://") && !uri.contains("http://"))
                                                        uri = "https://" + uri;

                                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                                    i.setData(Uri.parse(uri));

                                                    if (getActivity() != null)
                                                        getActivity().startActivity(i);
                                                    else
                                                        activityApp.startActivity(i);

                                                } catch (Exception e) {

                                                }
                                            }
                                        });

                                        mainView.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                try {

                                                    //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                    String uri = selectedContact.webSite;
                                                    if (!uri.contains("https://") && !uri.contains("http://"))
                                                        uri = "https://" + uri;

                                                    Intent i = new Intent(Intent.ACTION_VIEW);
                                                    i.setData(Uri.parse(uri));

                                                    if (getActivity() != null)
                                                        getActivity().startActivity(i);
                                                    else
                                                        activityApp.startActivity(i);

                                                } catch (Exception e) {

                                                }
                                            }
                                        });
                                    }
                                    if (companyProfileDataFragment != null && companyProfileDataFragment.companyAdapter != null)
                                        companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                                    editFrameWeb.setVisibility(View.GONE);
                                }
                            });


                            editFrameWeb.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    String socialLinkClip = "";
                                    for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                                        if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                            boolean checkFind = false;
                                            for (Clipboard cl2 : cl.getListClipboards()) {
                                                if (cl2.getType().equals(ClipboardEnum.WEB)) {
                                                    socialLinkClip = cl2.getValueCopy();
                                                    checkFind = true;
                                                    break;
                                                }
                                            }
                                            if (checkFind) break;
                                        } else {
                                            if (cl.getType().equals(ClipboardEnum.WEB)) {
                                                socialLinkClip = cl.getValueCopy();
                                                break;
                                            }
                                        }
                                    }
                                    ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                                }
                            });


                            editFrameWeb.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    try {
                                        if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                            //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                            String uri = selectedContact.webSite;
                                            if (!uri.contains("https://") && !uri.contains("http://"))
                                                uri = "https://" + uri;

                                            Intent i = new Intent(Intent.ACTION_VIEW);
                                            i.setData(Uri.parse(uri));

                                            if (getActivity() != null)
                                                getActivity().startActivity(i);
                                            else
                                                activityApp.startActivity(i);
                                        }

                                    } catch (Exception e) {

                                    }
                                }
                            });

                            editFrameWeb.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                                @Override
                                public boolean onTouch(View v, MotionEvent event) {
                                    return false;
                                }
                            });

                            editFrameWeb.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    try {

                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                        if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                            String uri = ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();

                                           /* if(ClipboardType.isWeb(uri)) {
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                            }else {*/
                                            Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                                            intent.putExtra(SearchManager.QUERY, ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString());
                                            if (getActivity() != null)
                                                getActivity().startActivity(intent);
                                            // }


                                        }

                                    } catch (Exception e) {

                                    }
                                }
                            });


                            editFrameWeb.setVisibility(View.VISIBLE);


                            openedViews.add(editFrameWeb);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        }


        ((TextView) mainView.findViewById(R.id.name)).setText(selectedContact.getName());
        mainView.findViewById(R.id.name).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.editNameProflie).setVisibility(View.GONE);
        if (selectedContact.getCompany() != null) {
            ((TextView) mainView.findViewById(R.id.company_title)).setText(selectedContact.getCompany());

            ((TextView) mainView.findViewById(R.id.company_title)).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    findByCompany(selectedContact.getCompany());
                }
            });

            if (selectedContact.getCompanyPossition() != null) {
                Double ems = selectedContact.getCompanyPossition().length() / 2.5;
                int ems_count = ems.intValue();
                if (ems_count < 6) {
                    ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6 + (6 - ems_count));
                } else ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6);
            } else {
                ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(12);
            }

            mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
        }
        mainView.findViewById(R.id.company_title_edit).setVisibility(View.GONE);
        if (selectedContact.getCompanyPossition() != null) {

            if (selectedContact.getCompany() != null) {
                Double ems = selectedContact.getCompany().length() / 2.5;
                int ems_count = ems.intValue();
                if (ems_count < 6) {
                    ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6 + (6 - ems_count));
                } else ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6);
            } else {
                ((TextView) mainView.findViewById(R.id.company)).setMaxEms(12);
            }

            ((TextView) mainView.findViewById(R.id.company)).setText(selectedContact.getCompanyPossition());
            mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
        }
        mainView.findViewById(R.id.company_edit).setVisibility(View.GONE);
        LinearLayout containerHashTags = (LinearLayout) mainView.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : selectedContact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
            text.setOnClickListener(v -> adapterC.searchByHashTagValue(hashTag.getHashTagValue()));
            containerHashTags.addView(text);
        }

        HorizontalScrollView scrollView = (HorizontalScrollView) mainView.findViewById(R.id.scrollHorizontal);
        if (scrollView.getChildCount() > 0) scrollView.removeAllViews();
        scrollView.addView(containerHashTags);
        scrollView.setSmoothScrollingEnabled(false);
        scrollView.fullScroll(HorizontalScrollView.FOCUS_RIGHT);
        scrollView.setSmoothScrollingEnabled(true);
        mainView.findViewById(R.id.hashtagsLL).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.hashTagsEdit).setVisibility(View.GONE);
        updateHashTags();
        System.out.println("MODEEEE ");

        realm.close();

    }

    public ArrayList<Contact> sortCompanybyAsc(ArrayList<Contact> list) {
        try {
            Collections.sort(list, (contactFirst, contactSecond) -> contactFirst.getName().toString().trim().compareToIgnoreCase(contactSecond.getName().toString().trim()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public ArrayList<String> sortPosByAsc(ArrayList<String> list) {
        try {
            Collections.sort(list, (contactFirst, contactSecond) -> contactFirst.compareToIgnoreCase(contactSecond));
        } catch (Exception e) {
        }
        return list;
    }

    public String sortPopupComp = "sortByAsc";

    CompanySelectInterface comp = this;

    public CompanyEditAdapter selectCompanyAdapter;

    public PositionEditAdapter selectPositionAdapter;

    public boolean sortTimePopup = false;

    public boolean sortPopulPopup = false;

    public void shopHelpPopupcompanyPosition() {

        if (listPosition.isEmpty()) {
            listPosition = ContactCacheService.getPossitionContacts();
        }

        if (popupHelpCompanyposition.getVisibility() == View.GONE) {

            SharedPreferences mSettings;
            mSettings = getActivity().getSharedPreferences("SortEditPopup", Context.MODE_PRIVATE);
            sortPopupComp = mSettings.getString("Sort", "sortByDescPopul");
            //sortPopupComp = "sortByDescTime";

            RecyclerView recyclerCompany = (RecyclerView) getActivity().findViewById(R.id.recycleCompanyPopup);
            RecyclerView recyclerPosition = (RecyclerView) getActivity().findViewById(R.id.recyclePositionPopup);

            RecyclerView.LayoutManager mostLayoutManager = new LinearLayoutManager(mainView.getContext());
            recyclerCompany.setLayoutManager(mostLayoutManager);
            recyclerCompany.setItemAnimator(new DefaultItemAnimator());

            RecyclerView.LayoutManager mostLayoutManager2 = new LinearLayoutManager(mainView.getContext());
            recyclerPosition.setLayoutManager(mostLayoutManager2);
            recyclerPosition.setItemAnimator(new DefaultItemAnimator());

            ArrayList<Contact> listCompanies = adapterC.getListOfCompanies();
            ArrayList<String> listOfPositions = new ArrayList<>(listPosition);
            ArrayList<Contact> listCompaniesClone = new ArrayList<>(listCompanies);
            ArrayList<String> listOfPositionsClone = new ArrayList<>(listOfPositions);


            selectCompanyAdapter = new CompanyEditAdapter(listCompanies, comp, getActivity());

            selectPositionAdapter = new PositionEditAdapter(listOfPositions, comp, getActivity());

            if (sortPopupComp.equals("sortByAsc")) {
                selectCompanyAdapter.sortCompanybyAsc();
                selectPositionAdapter.sortPosByAsc();
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
                sortTimePopup = false;
            } else if (sortPopupComp.equals("sortByDesc")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
                selectCompanyAdapter.sortCompanybyDesc();
                selectPositionAdapter.sortPosByDesc();
            } else if (sortPopupComp.equals("sortByAscTime")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                selectCompanyAdapter.sortByAscTime();
                sortPopupComp = "sortByAscTime";
                sortTimePopup = true;
            } else if (sortPopupComp.equals("sortByDescTime")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                selectCompanyAdapter.sortByDescTime();
                sortPopupComp = "sortByDescTime";
                sortTimePopup = false;
            } else if (sortPopupComp.equals("sortByAscPopul")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                selectCompanyAdapter.sortByAscPopul();
                selectPositionAdapter.sortByPopupAsc();
                sortPopupComp = "sortByAscPopul";
                sortPopulPopup = true;
            } else if (sortPopupComp.equals("sortByDescPopul")) {
                ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                selectCompanyAdapter.sortByDescPopul();
                selectPositionAdapter.sortByPopupDesc();
                sortPopupComp = "sortByDescPopul";
                sortPopulPopup = false;
            }


            recyclerCompany.setAdapter(selectCompanyAdapter);


            recyclerPosition.setAdapter(selectPositionAdapter);

            popupHelpCompanyposition.setVisibility(View.VISIBLE);

            openedViews.add(popupHelpCompanyposition);


            popupHelpCompanyposition.findViewById(R.id.sortElementsPopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).getText().toString().equals("A-Z")) {

                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
                        selectCompanyAdapter.sortCompanybyDesc();
                        selectPositionAdapter.sortPosByDesc();
                        sortPopupComp = "sortByDesc";

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDesc");
                        editor.commit();

                        //sortTimePopup = false;

                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
                        selectCompanyAdapter.sortCompanybyAsc();
                        selectPositionAdapter.sortPosByAsc();
                        sortPopupComp = "sortByAsc";

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAsc");
                        editor.commit();

                        //sortTimePopup = false;
                    }
                }
            });

            popupHelpCompanyposition.findViewById(R.id.sortByTimePopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (!sortTimePopup) {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        selectCompanyAdapter.sortByAscTime();
                        sortPopupComp = "sortByAscTime";
                        sortTimePopup = true;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAscTime");
                        editor.commit();

                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        selectCompanyAdapter.sortByDescTime();
                        sortPopupComp = "sortByDescTime";
                        sortTimePopup = false;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDescTime");
                        editor.commit();

                    }
                }
            });

            popupHelpCompanyposition.findViewById(R.id.sortByPopupPopup).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (!sortPopulPopup) {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));

                        ArrayList<Contact> listCompanies = new ArrayList<>(listCompaniesClone);

                        ArrayList<String> listOfPositions = new ArrayList<>(listOfPositionsClone);

                        selectCompanyAdapter.updateList(listCompanies);
                        selectPositionAdapter.updateList(listOfPositions);

                        selectCompanyAdapter.sortByAscPopul();
                        selectPositionAdapter.sortByPopupAsc();
                        sortPopupComp = "sortByAscPopul";
                        sortPopulPopup = true;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByAscPopul");
                        editor.commit();

                    } else {
                        ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
                        ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));

                        ArrayList<Contact> listCompanies = new ArrayList<>(listCompaniesClone);

                        ArrayList<String> listOfPositions = new ArrayList<>(listOfPositionsClone);

                        selectCompanyAdapter.updateList(listCompanies);
                        selectPositionAdapter.updateList(listOfPositions);

                        selectCompanyAdapter.sortByDescPopul();
                        selectPositionAdapter.sortByPopupDesc();
                        sortPopupComp = "sortByDescPopul";
                        sortPopulPopup = false;

                        SharedPreferences.Editor editor = mSettings.edit();
                        editor.putString("Sort", "sortByDescPopul");
                        editor.commit();

                    }
                }
            });


        }
    }


    public ArrayList<Contact> listCompanyForKeyDown;

    public ArrayList<String> listPosition;

    private void startEditMode() {
        closeOtherPopup();

        mainView.findViewById(R.id.lineHashProfile).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.lineNameProfile).setVisibility(View.VISIBLE);
        mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);


        mainView.findViewById(R.id.cardTime).setVisibility(View.INVISIBLE);
        mainView.findViewById(R.id.linear_card_phone_email).setVisibility(View.GONE);

        companyProfileDataFragment.closeOtherPopup();
        contactProfileDataFragment.closeOtherPopup();

        listPosition = new ArrayList<>();

        mainView.findViewById(R.id.name).setVisibility(View.GONE);

        EditText editNameProfile = (EditText) mainView.findViewById(R.id.editNameProflie);
        editNameProfile.setText(selectedContact.getName());
        editNameProfile.setVisibility(View.VISIBLE);
        editNameProfile.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                editModeChecker = true;
            }
        });
        //===============================================

        //contactAdapter = ContactAdapter.contactAd;

        /*if(popupCompaniesEdit != null) popupCompaniesEdit.setVisibility(View.GONE);
        popupCompaniesEdit = null;
        if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);
        popupPositionEdit = null;*/


        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {

        } else {
            //float px = 20 * getContext().getResources().getDisplayMetrics().density;

            float px_r = 23 * getContext().getResources().getDisplayMetrics().density;
            //float px_bot = 3 * getContext().getResources().getDisplayMetrics().density;

            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.lineNameProfile).getLayoutParams();
            params.setMarginEnd((int) px_r);

            //float px_1 = 2 * getContext().getResources().getDisplayMetrics().density;
            float px_r_2 = 22 * getContext().getResources().getDisplayMetrics().density;

            ViewGroup.MarginLayoutParams params2 = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.editNameProflie).getLayoutParams();
            params2.setMarginEnd((int) px_r_2);

            //mainView.findViewById(R.id.editNameProflie).setLayoutParams(params2);

        }

        listCompanyForKeyDown = ContactCacheService.getCompanies();


        //  ((View) mainView.findViewById(R.id.lineNameProfile)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
        mainView.findViewById(R.id.editNameProflie).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) mainView.findViewById(R.id.lineNameProfile)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);
                } else {
                    ((View) mainView.findViewById(R.id.lineNameProfile)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                }
            }
        });


        ((EditText) mainView.findViewById(R.id.company_edit)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    System.out.println("POSITION FOCUS");
                    ((View) mainView.findViewById(R.id.positionVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    ((View) mainView.findViewById(R.id.lineCompanyProfile)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));

                   /* ArrayList<String> listOfPositions2 = new ArrayList<>(Arrays.asList("CEO","COO","Co-founder","CTO","Director","Engineer","Manager","Marketing"));
                    boolean find = false;
                    String text = ((EditText) mainView.findViewById(R.id.company_edit)).getText().toString().trim();
                    for(int i = 0;i<listOfPositions2.size();i++){
                        if(listOfPositions2.get(i).equals(text)){
                            find = true;
                            break;
                        }
                    }

                    if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);

                    if(!find && ((EditText) mainView.findViewById(R.id.company_edit)).getText().toString().length() == 0) {
                        ArrayList<String> listOfPositions = new ArrayList<>(Arrays.asList("CEO", "COO", "Co-founder", "CTO", "Director", "Engineer", "Manager", "Marketing"));


                        System.out.println("CLICK Pos");
                        popupPositionEdit = (FrameLayout) getActivity().findViewById(R.id.companyAddPopupEdit);

                        popupPositionEdit.setVisibility(View.VISIBLE);

                        PositionEditAdapter selectCompanyAdapter = new PositionEditAdapter(listOfPositions, comp, getActivity());

                        RecyclerView containerCompanies = (RecyclerView) popupPositionEdit.findViewById(R.id.companiesContainer_edit);
                        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 2);
                        containerCompanies.setLayoutManager(mostLayoutManager);
                        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
                        containerCompanies.setItemAnimator(new DefaultItemAnimator());
                        containerCompanies.setAdapter(selectCompanyAdapter);
                        openedViews.add(popupPositionEdit);
                    }else if(((EditText) mainView.findViewById(R.id.company_edit)).getText().toString().length() > 0 && !find) afterTextChangePosition(comp);*/


                    shopHelpPopupcompanyPosition();

                } else {
                    ((View) mainView.findViewById(R.id.positionVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                    if (popupPositionEdit != null)
                        popupPositionEdit.setVisibility(View.GONE);

                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);
                }
            }
        });


        ((EditText) mainView.findViewById(R.id.company_edit)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                System.out.println("TEXT");
                if (((EditText) mainView.findViewById(R.id.company_edit)).isFocused()) {
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.VISIBLE);
                    else
                        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);
                }
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                afterTextChangePosition(comp);
            }
        });


        ((EditText) mainView.findViewById(R.id.company_title_edit)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) mainView.findViewById(R.id.lineCompanyProfile)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    ((View) mainView.findViewById(R.id.positionVileEditPreview)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));

                    ArrayList<Contact> listOfCompanies2 = adapterC.getListOfCompanies();
                    boolean find = false;
                    String text = ((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().trim();
                    for (int i = 0; i < listOfCompanies2.size(); i++) {
                        if (listOfCompanies2.get(i).getName().toString().trim().equals(text)) {
                            System.out.println("TRUE COMPANY");
                            find = true;
                            break;
                        }
                    }

                    System.out.println("CLICK company");
                    ArrayList<Contact> listComp = new ArrayList<>();
                    listComp.addAll(adapterC.getListOfCompanies());
                    if (listComp.size() > 0 && ((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().length() == 0) {
                        //popupCompaniesEdit = (FrameLayout) getActivity().findViewById(R.id.companyAddPopupEdit);

                        //popupCompaniesEdit.setVisibility(View.VISIBLE);

                        CompanyEditAdapter selectCompanyAdapter = new CompanyEditAdapter(adapterC.getListOfCompanies(), comp, getActivity());

                        RecyclerView containerCompanies = (RecyclerView) getActivity().findViewById(R.id.companiesContainer_edit);
                        RecyclerView.LayoutManager mostLayoutManager = new GridLayoutManager(mainView.getContext(), 1);
                        containerCompanies.setLayoutManager(mostLayoutManager);
                        //  containerMost.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
                        containerCompanies.setItemAnimator(new DefaultItemAnimator());
                        containerCompanies.setAdapter(selectCompanyAdapter);
                        //openedViews.add(popupCompaniesEdit);


                        if (popupCompaniesEdit != null && find)
                            popupCompaniesEdit.setVisibility(View.GONE);
                    } else if (((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().length() > 0 && !find)
                        afterTextChangeCompany(comp);


                    shopHelpPopupcompanyPosition();

                } else {
                    ((View) mainView.findViewById(R.id.lineCompanyProfile)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                    //if(popupCompaniesEdit != null)
                    //popupCompaniesEdit.setVisibility(View.GONE);

                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.GONE);
                }
            }
        });


        ((EditText) mainView.findViewById(R.id.company_title_edit)).addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                if (((EditText) mainView.findViewById(R.id.company_title_edit)).isFocused()) {
                    if (popupHelpCompanyposition != null)
                        popupHelpCompanyposition.setVisibility(View.VISIBLE);
                    else
                        popupHelpCompanyposition = (FrameLayout) getActivity().findViewById(R.id.popupProfileCompanyPossitions);
                }
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                afterTextChangeCompany(comp);

            }
        });


        ((EditText) mainView.findViewById(R.id.hashTagsEdit)).setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View view, boolean b) {
                if (b) {
                    ((View) mainView.findViewById(R.id.lineHashProfile)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                    if (popupCompaniesEdit != null) popupCompaniesEdit.setVisibility(View.GONE);
                } else {
                    ((View) mainView.findViewById(R.id.lineHashProfile)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                }
            }
        });


        ((EditText) mainView.findViewById(R.id.company_edit)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ArrayList<String> listOfPositions = ContactCacheService.getPossitionContacts();
                boolean find = false;
                String text = ((EditText) mainView.findViewById(R.id.company_edit)).getText().toString().trim();
                for (int i = 0; i < listOfPositions.size(); i++) {
                    if (listOfPositions.get(i).equals(text)) {
                        find = true;
                        break;
                    }
                }
                if (popupPositionEdit != null && !find)
                    popupPositionEdit.setVisibility(View.VISIBLE);

                shopHelpPopupcompanyPosition();


            }
        });


        ((EditText) mainView.findViewById(R.id.company_title_edit)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                System.out.println("CLICER");
                ArrayList<Contact> listOfCompanies = adapterC.getListOfCompanies();
                boolean find = false;
                String text = ((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().trim();
                for (int i = 0; i < listOfCompanies.size(); i++) {
                    if (listOfCompanies.get(i).getName().toString().trim().equals(text)) {
                        System.out.println("TRUE COMPANY");
                        find = true;
                        break;
                    }
                }

                if (popupHelpCompanyposition != null && !find)
                    popupHelpCompanyposition.setVisibility(View.VISIBLE);

                shopHelpPopupcompanyPosition();


            }
        });

        mainView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (popupHelpCompanyposition != null)
                    popupHelpCompanyposition.setVisibility(View.GONE);
                //if(popupPositionEdit != null) popupPositionEdit.setVisibility(View.GONE);
            }
        });

        //=================================================

        mainView.findViewById(R.id.company_title).setVisibility(View.GONE);

        EditText companyTitle = (EditText) mainView.findViewById(R.id.company_title_edit);
        companyTitle.setVisibility(View.VISIBLE);

        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
            mainView.findViewById(R.id.lineCompanyProfile).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.positionVileEditPreview).setVisibility(View.VISIBLE);
            ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setVisibility(View.GONE);


        } else {
            mainView.findViewById(R.id.lineCompanyProfile).setVisibility(View.GONE);
            mainView.findViewById(R.id.positionVileEditPreview).setVisibility(View.GONE);
            ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setVisibility(View.VISIBLE);
            mainView.findViewById(R.id.web_title).setVisibility(View.GONE);
            mainView.findViewById(R.id.web_title_edit).setVisibility(View.VISIBLE);

            String web_c = selectedContact.webSite;

            if (web_c.contains("www.")) {
                web_c = web_c.replace("www.", "");
            }
            if (web_c.contains("https://")) {
                web_c = web_c.replace("https://", "");
            }
            if (web_c.contains("http://")) {
                web_c = web_c.replace("http://", "");
            }

            ((EditText) mainView.findViewById(R.id.web_title_edit)).setText(web_c);


            mainView.findViewById(R.id.web_title_edit).setOnFocusChangeListener(new View.OnFocusChangeListener() {
                @Override
                public void onFocusChange(View v, boolean hasFocus) {
                    if (hasFocus) {
                        ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setBackgroundColor(getResources().getColor(R.color.md_deep_orange_300));
                        if (popupHelpCompanyposition != null)
                            popupHelpCompanyposition.setVisibility(View.GONE);
                    } else {
                        ((View) mainView.findViewById(R.id.lineCompanyProfileWeb)).setBackgroundColor(getResources().getColor(R.color.sortPopupLine));
                    }
                }
            });


        }
        if (selectedContact.getCompany() != null) {
            companyTitle.setText(selectedContact.getCompany());
        } else {
            companyTitle.setText("");
        }
        companyTitle.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                editModeChecker = true;
            }
        });

        mainView.findViewById(R.id.company).setVisibility(View.GONE);

        EditText company = (EditText) mainView.findViewById(R.id.company_edit);
        company.setVisibility(View.VISIBLE);
        if (selectedContact.getCompanyPossition() != null) {
            company.setText(selectedContact.getCompanyPossition());
            // mainView.findViewById(R.id.lineCompanyProfile).setVisibility(View.VISIBLE);
        } else {
            company.setText("");
        }
        company.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                editModeChecker = true;
            }
        });
        mainView.findViewById(R.id.hashtagsLL).setVisibility(View.GONE);

        if (selectedContact.getListOfHashtags().size() >= 0) {
            String hashTagsStr = "";
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {
                hashTagsStr += hashTag.getHashTagValue() + " ";
            }
            EditText hashtasgs = (EditText) mainView.findViewById(R.id.hashTagsEdit);
            hashtasgs.setVisibility(View.VISIBLE);
            hashtasgs.setText(hashTagsStr.trim());
            hashtasgs.addTextChangedListener(new TextWatcher() {
                @Override
                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                }

                @Override
                public void onTextChanged(CharSequence s, int start, int before, int count) {
                }

                @Override
                public void afterTextChanged(Editable s) {
                    editModeChecker = true;
                }
            });
        }
    }


    public void afterTextChangePosition(CompanySelectInterface comp) {
        String ss = ((EditText) mainView.findViewById(R.id.company_edit)).getText().toString().toLowerCase();
        ArrayList<String> listOfPositions = new ArrayList<>(listPosition);
        ArrayList<String> listC = new ArrayList<>();
        //listC.addAll(listOfPositions);
        for (int i = 0; i < listOfPositions.size(); i++) {
            if (listOfPositions.get(i).toString().toLowerCase().contains(ss)) {
                listC.add(listOfPositions.get(i));
            }
        }
        //if(listC.size() == 0){
        //popupPositionEdit.setVisibility(View.GONE);
        //popupHelpCompanyposition.setVisibility(View.GONE);
        // }else {
        //popupHelpCompanyposition.setVisibility(View.VISIBLE);

        selectPositionAdapter = new PositionEditAdapter(listC, comp, ss, getActivity());

        if (sortPopupComp.equals("sortByAsc")) {
            //selectCompanyAdapter.sortCompanybyAsc();
            selectPositionAdapter.sortPosByAsc();
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByDesc")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
            //selectCompanyAdapter.sortCompanybyDesc();
            selectPositionAdapter.sortPosByDesc();
        } else if (sortPopupComp.equals("sortByAscPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectPositionAdapter.sortByPopupAsc();
            sortPopupComp = "sortByAscPopul";
            sortPopulPopup = true;
        } else if (sortPopupComp.equals("sortByDescPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectPositionAdapter.sortByPopupDesc();
            sortPopupComp = "sortByDescPopul";
            sortPopulPopup = false;
        }

        RecyclerView containerCompanies = (RecyclerView) popupHelpCompanyposition.findViewById(R.id.recyclePositionPopup);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerCompanies.setLayoutManager(mLayoutManager);
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectPositionAdapter);

        //openedViews.add(popupPositionEdit);

            /*if(!((EditText) mainView.findViewById(R.id.company_edit)).isFocused() ) {
                //popupPositionEdit.setVisibility(View.GONE);
                System.out.println("No FOCUS");
            }*/
        // }
    }

    public void afterTextChangeCompany(CompanySelectInterface comp) {


        /*if(!((EditText) mainView.findViewById(R.id.company_title_edit)).isFocused() ) {
            popupCompaniesEdit.setVisibility(View.GONE);
            System.out.println("No FOCUS");
            return;
        }*/

        String ss = ((EditText) mainView.findViewById(R.id.company_title_edit)).getText().toString().toLowerCase();
        RealmList<Contact> listCompanies = new RealmList<>();
        ArrayList<Contact> listC = new ArrayList<>();
        listC.addAll(listCompanyForKeyDown);
        for (int i = 0; i < listC.size(); i++) {
            if (listC.get(i).getName().toLowerCase().contains(ss)) {
                listCompanies.add(listC.get(i));
            }
        }


        //if(listCompanies.size() == 0){
        //popupHelpCompanyposition.setVisibility(View.GONE);
        // }else {


        //popupHelpCompanyposition.setVisibility(View.VISIBLE);
        selectCompanyAdapter = new CompanyEditAdapter(listCompanies, comp, ss, getActivity());

        if (sortPopupComp.equals("sortByAsc")) {
            selectCompanyAdapter.sortCompanybyAsc();
            // selectPositionAdapter.sortPosByAsc();
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("A-Z");
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByDesc")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setText("Z-A");
            selectCompanyAdapter.sortCompanybyDesc();
            //selectPositionAdapter.sortPosByDesc();
        } else if (sortPopupComp.equals("sortByAscTime")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            selectCompanyAdapter.sortByAscTime();
            sortPopupComp = "sortByAscTime";
            sortTimePopup = true;
        } else if (sortPopupComp.equals("sortByDescTime")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            selectCompanyAdapter.sortByDescTime();
            sortPopupComp = "sortByDescTime";
            sortTimePopup = false;
        } else if (sortPopupComp.equals("sortByAscPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectCompanyAdapter.sortByAscPopul();
            selectPositionAdapter.sortByPopupAsc();
            sortPopupComp = "sortByAscPopul";
            sortPopulPopup = true;
        } else if (sortPopupComp.equals("sortByDescPopul")) {
            ((TextView) popupHelpCompanyposition.findViewById(R.id.sortTextPopup)).setTextColor(getActivity().getResources().getColor(R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.timeSortPopup)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
            ((ImageView) popupHelpCompanyposition.findViewById(R.id.populSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
            selectCompanyAdapter.sortByDescPopul();
            selectPositionAdapter.sortByPopupDesc();
            sortPopupComp = "sortByDescPopul";
            sortPopulPopup = false;
        }

        RecyclerView containerCompanies = (RecyclerView) popupHelpCompanyposition.findViewById(R.id.recycleCompanyPopup);
        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
        containerCompanies.setLayoutManager(mLayoutManager);
        containerCompanies.setItemAnimator(new DefaultItemAnimator());
        containerCompanies.setAdapter(selectCompanyAdapter);

        //openedViews.add(popupCompaniesEdit);


        // }
    }

    public void shareContactToPackage(String appName) {
        String exportData = "";
        //contact.fillData(getContext(), contactsService);
        if (selectedContact.getName() != null)
            exportData += "Name: " + selectedContact.getName() + "\n";
        if (selectedContact.getCompany() != null)
            exportData += "Company: " + selectedContact.getCompany() + "\n";
        if (selectedContact.getCompanyPossition() != null)
            exportData += "Position: " + selectedContact.getCompanyPossition() + "\n";
        if (selectedContact.listOfContactInfo != null) {
            for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    exportData += "Phone: " + contactInfo.toString() + "\n";
                if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                    exportData += "Facebook: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                    exportData += "Vk: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                    exportData += "Instagram: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                    exportData += "Linkedin: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                    exportData += "Twitter: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                    exportData += "Youtube: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                    exportData += "Google_sheet: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                    exportData += "Google_doc: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                    exportData += "Tumblr: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                    exportData += "Angel: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isMedium(contactInfo.value)) {
                    exportData += "Medium: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isGitHub(contactInfo.value)) {
                    exportData += "Github: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                    exportData += "Web: " + contactInfo + "\n";
            }
        }
        if (selectedContact.getSocialModel() != null) {
            if (selectedContact.getSocialModel().getFacebookLink() != null && !selectedContact.getSocialModel().getFacebookLink().isEmpty())
                exportData += "Facebook: " + getPhoneNumberInfo(selectedContact.getSocialModel().getFacebookLink()) + "\n";
            if (selectedContact.getSocialModel().getVkLink() != null && !selectedContact.getSocialModel().getVkLink().isEmpty())
                exportData += "Vk: " + getPhoneNumberInfo(selectedContact.getSocialModel().getVkLink()) + "\n";
            if (selectedContact.getSocialModel().getLinkedInLink() != null && !selectedContact.getSocialModel().getLinkedInLink().isEmpty())
                exportData += "Linkedin: " + getPhoneNumberInfo(selectedContact.getSocialModel().getLinkedInLink()) + "\n";
            if (selectedContact.getSocialModel().getInstagramLink() != null && !selectedContact.getSocialModel().getInstagramLink().isEmpty())
                exportData += "Instagram: " + getPhoneNumberInfo(selectedContact.getSocialModel().getInstagramLink()) + "\n";
            if (selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty())
                exportData += "Twitter: " + getPhoneNumberInfo(selectedContact.getSocialModel().getTwitterLink()) + "\n";
            if (selectedContact.getSocialModel().getYoutubeLink() != null && !selectedContact.getSocialModel().getYoutubeLink().isEmpty())
                exportData += "Youtube: " + getPhoneNumberInfo(selectedContact.getSocialModel().getYoutubeLink()) + "\n";
        }

        if (selectedContact.getListOfHashtags() != null && !selectedContact.getListOfHashtags().isEmpty()) {
            exportData += "Tags:";
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {
                if (hashTag != null && hashTag.getHashTagValue() != null) {
                    exportData += " " + hashTag.getHashTagValue();
                }
            }
            exportData += "\n";
        }

        exportData += "\n";
        exportData += "Data shared via http://Extime.pro\n";

        final boolean isAppInstalled = isAppAvailable(activityApp.getApplicationContext(), appName);
        if (isAppInstalled) {
            Intent shareIntent = new Intent(Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            shareIntent.setPackage(appName);
            shareIntent.putExtra(Intent.EXTRA_TEXT, exportData);
            startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
        } else {
            Toast.makeText(activityApp, "Application not installed", Toast.LENGTH_SHORT).show();
        }
    }

    public static boolean isAppAvailable(Context context, String appName) {
        PackageManager pm = context.getPackageManager();
        try {
            pm.getPackageInfo(appName, PackageManager.GET_ACTIVITIES);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    public void shareContact() {
        String exportData = "";
        //contact.fillData(getContext(), contactsService);
        if (selectedContact.getName() != null)
            exportData += "Name: " + selectedContact.getName() + "\n";
        if (selectedContact.getCompany() != null)
            exportData += "Company: " + selectedContact.getCompany() + "\n";
        if (selectedContact.getCompanyPossition() != null)
            exportData += "Position: " + selectedContact.getCompanyPossition() + "\n";
        if (selectedContact.listOfContactInfo != null) {
            for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    exportData += "Phone: " + contactInfo.toString() + "\n";
                if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                    exportData += "Facebook: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                    exportData += "Vk: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                    exportData += "Instagram: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                    exportData += "Linkedin: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                    exportData += "Twitter: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                    exportData += "Youtube: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                    exportData += "Google_sheet: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                    exportData += "Google_doc: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                    exportData += "Tumblr: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                    exportData += "Angel: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isMedium(contactInfo.value)) {
                    exportData += "Medium: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isGitHub(contactInfo.value)) {
                    exportData += "Github: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                    exportData += "Web: " + contactInfo + "\n";
            }
        }
        if (selectedContact.getSocialModel() != null) {
            if (selectedContact.getSocialModel().getFacebookLink() != null && !selectedContact.getSocialModel().getFacebookLink().isEmpty())
                exportData += "Facebook: " + getPhoneNumberInfo(selectedContact.getSocialModel().getFacebookLink()) + "\n";
            if (selectedContact.getSocialModel().getVkLink() != null && !selectedContact.getSocialModel().getVkLink().isEmpty())
                exportData += "Vk: " + getPhoneNumberInfo(selectedContact.getSocialModel().getVkLink()) + "\n";
            if (selectedContact.getSocialModel().getLinkedInLink() != null && !selectedContact.getSocialModel().getLinkedInLink().isEmpty())
                exportData += "Linkedin: " + getPhoneNumberInfo(selectedContact.getSocialModel().getLinkedInLink()) + "\n";
            if (selectedContact.getSocialModel().getInstagramLink() != null && !selectedContact.getSocialModel().getInstagramLink().isEmpty())
                exportData += "Instagram: " + getPhoneNumberInfo(selectedContact.getSocialModel().getInstagramLink()) + "\n";
            if (selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty())
                exportData += "Twitter: " + getPhoneNumberInfo(selectedContact.getSocialModel().getTwitterLink()) + "\n";
            if (selectedContact.getSocialModel().getYoutubeLink() != null && !selectedContact.getSocialModel().getYoutubeLink().isEmpty())
                exportData += "Youtube: " + getPhoneNumberInfo(selectedContact.getSocialModel().getYoutubeLink()) + "\n";
        }

        if (selectedContact.getListOfHashtags() != null && !selectedContact.getListOfHashtags().isEmpty()) {
            exportData += "Tags:";
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {
                if (hashTag != null && hashTag.getHashTagValue() != null) {
                    exportData += " " + hashTag.getHashTagValue();
                }
            }
            exportData += "\n";
        }

        exportData += "\n";
        exportData += "Data shared via http://Extime.pro\n";

        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.putExtra(Intent.EXTRA_TEXT, exportData);
        startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
    }

    public void copyContactData() {
        String exportData = "";
        //contact.fillData(getContext(), contactsService);
        if (selectedContact.getName() != null)
            exportData += "Name: " + selectedContact.getName() + "\n";
        if (selectedContact.getCompany() != null)
            exportData += "Company: " + selectedContact.getCompany() + "\n";
        if (selectedContact.getCompanyPossition() != null)
            exportData += "Position: " + selectedContact.getCompanyPossition() + "\n";
        if (selectedContact.listOfContactInfo != null) {
            for (ContactInfo contactInfo : selectedContact.listOfContactInfo) {
                if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                    exportData += "Phone: " + contactInfo.toString() + "\n";
                if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                    exportData += "Facebook: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                    exportData += "Vk: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                    exportData += "Instagram: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                    exportData += "Linkedin: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                    exportData += "Twitter: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                    exportData += "Youtube: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                    exportData += "Google_sheet: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                    exportData += "Google_doc: " + contactInfo + "\n";
                    continue;
                }

                if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                    exportData += "Tumblr: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                    exportData += "Angel: " + contactInfo + "\n";
                    continue;
                }
                if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                    exportData += "Web: " + contactInfo + "\n";
            }
        }
        if (selectedContact.getSocialModel() != null) {
            if (selectedContact.getSocialModel().getFacebookLink() != null && !selectedContact.getSocialModel().getFacebookLink().isEmpty())
                exportData += "Facebook: " + getPhoneNumberInfo(selectedContact.getSocialModel().getFacebookLink()) + "\n";
            if (selectedContact.getSocialModel().getVkLink() != null && !selectedContact.getSocialModel().getVkLink().isEmpty())
                exportData += "Vk: " + getPhoneNumberInfo(selectedContact.getSocialModel().getVkLink()) + "\n";
            if (selectedContact.getSocialModel().getLinkedInLink() != null && !selectedContact.getSocialModel().getLinkedInLink().isEmpty())
                exportData += "Linkedin: " + getPhoneNumberInfo(selectedContact.getSocialModel().getLinkedInLink()) + "\n";
            if (selectedContact.getSocialModel().getInstagramLink() != null && !selectedContact.getSocialModel().getInstagramLink().isEmpty())
                exportData += "Instagram: " + getPhoneNumberInfo(selectedContact.getSocialModel().getInstagramLink()) + "\n";
            if (selectedContact.getSocialModel().getTwitterLink() != null && !selectedContact.getSocialModel().getTwitterLink().isEmpty())
                exportData += "Twitter: " + getPhoneNumberInfo(selectedContact.getSocialModel().getTwitterLink()) + "\n";
            if (selectedContact.getSocialModel().getYoutubeLink() != null && !selectedContact.getSocialModel().getYoutubeLink().isEmpty())
                exportData += "Youtube: " + getPhoneNumberInfo(selectedContact.getSocialModel().getYoutubeLink()) + "\n";
        }

        if (selectedContact.getListOfHashtags() != null && !selectedContact.getListOfHashtags().isEmpty()) {
            exportData += "Tags:";
            for (HashTag hashTag : selectedContact.getListOfHashtags()) {
                if (hashTag != null && hashTag.getHashTagValue() != null) {
                    exportData += " " + hashTag.getHashTagValue();
                }
            }
            exportData += "\n";
        }

        copyToClipboard(mainView.getContext(), exportData);
    }


    @Override
    public void onPrepareOptionsMenu(Menu menu) {
        System.out.println("onPrepareOptionsMenu 12");
        profileMenu = menu;
        menuItem = menu.findItem(R.id.edit_contact);

        menu.findItem(R.id.action_favorite).setVisible(false);
        menu.findItem(R.id.edit_contact).setVisible(false);
        menu.findItem(R.id.save_contact).setVisible(false);

        Toolbar mainToolBar = (Toolbar) getActivity().findViewById(R.id.main_toolbar);
        TextView cancel = (TextView) getActivity().findViewById(R.id.cancel_toolbar);

        mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
        mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
        mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
        mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

        menu.findItem(R.id.menu_profile).setVisible(false);

        menu.findItem(R.id.share_profile).setVisible(false); //

        mainToolBar.findViewById(R.id.toolbar_menu).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                CardView card = activityApp.findViewById(R.id.popup_menu_profile);

                ((ImageView)card.findViewById(R.id.copy_menu)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView)card.findViewById(R.id.pen_menu)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView)card.findViewById(R.id.share_menu)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
                ((ImageView)card.findViewById(R.id.openInMobileMenu)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));

                card.findViewById(R.id.menu_profile_share).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_global_search).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_remind).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_copy).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_edit).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_delete).setVisibility(View.VISIBLE);
                card.findViewById(R.id.menu_profile_more).setVisibility(View.VISIBLE);

                card.findViewById(R.id.menu_profile_less).setVisibility(View.GONE);
                card.findViewById(R.id.menu_profile_exchange).setVisibility(View.GONE);
                card.findViewById(R.id.menu_profile_open).setVisibility(View.GONE);
                card.findViewById(R.id.menu_profile_salesforce).setVisibility(View.GONE);
                card.findViewById(R.id.menu_profile_add_more).setVisibility(View.GONE);


                card.setVisibility(View.VISIBLE);

                card.findViewById(R.id.profile_menu_share_telegram).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        shareContactToPackage("org.telegram.messenger");
                    }
                });

                card.findViewById(R.id.profile_menu_share_slack).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        shareContactToPackage("com.Slack");
                    }
                });

                card.findViewById(R.id.profile_menu_share_whatsapp).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        shareContactToPackage("com.whatsapp");
                    }
                });

                card.findViewById(R.id.menu_profile_share).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        shareContact();
                    }
                });

                card.findViewById(R.id.menu_profile_copy).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        copyContactData();
                    }
                });

                card.findViewById(R.id.menu_profile_open).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                            Intent intent = new Intent(Intent.ACTION_VIEW);
                            Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI, String.valueOf(selectedContact.getIdContact()));
                            intent.setData(uri);
                            mainView.getContext().startActivity(intent);
                        }

                    }
                });

                card.findViewById(R.id.menu_profile_edit).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        nowEdit = true;

                        card.setVisibility(View.GONE);

                        menu.findItem(R.id.menu_profile).setVisible(false);
                        menu.findItem(R.id.share_profile).setVisible(false);

                        mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                        mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.GONE);
                        mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.GONE);
                        mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.GONE);

                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                   /* if(companyProfileDataFragment.mainView == null) {
                        //setupSectionPager2();
                        //setEditAdapter();

                    }else*/
                            if (contactProfileDataFragment.mainView == null) {
                                System.out.println("NULL contactProfileDataFragment !!!");
                                ArrayList<Contact> c = new ArrayList<>();
                                c.add(selectedContact);
                                contactProfileDataFragment.setEditAdapter2(c, activityApp);
                            } else
                                setEditAdapter();

                        }
                        mainToolBar.setNavigationIcon(null);
                        cancel.setVisibility(View.VISIBLE);
                        startEditMode();

                        cancel.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (editModeChecker) {
                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                            getActivity());
                                    alertDialogBuilder.setTitle("Do you want to discard changes?");
                                    alertDialogBuilder
                                            .setCancelable(false)
                                            .setPositiveButton("Yes", (dialog, id) -> {


                                                mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                                                mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                                                mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                                                mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                                                menu.findItem(R.id.menu_profile).setVisible(false); //
                                                menu.findItem(R.id.share_profile).setVisible(false); //

                                                FragmentManager fm = getActivity().getFragmentManager();
                                                cancel.setVisibility(View.GONE);
                                                mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                                                cancleEditMode();
                                                menu.findItem(R.id.edit_contact).setVisible(false); //
                                                menu.findItem(R.id.save_contact).setVisible(false);
                                                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                                    setAdapter();
                                                    /*contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.getListOfContactInfo());*/
                                                }
                                                editModeChecker = false;
                                            })
                                            .setNegativeButton("No", (dialog, id) -> {
                                                dialog.cancel();
                                            });

                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                    alertDialog.show();
                                } else {


                                    mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                                    mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                                    mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                                    mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                                    menu.findItem(R.id.menu_profile).setVisible(false); //
                                    menu.findItem(R.id.share_profile).setVisible(false); //

                                    FragmentManager fm = getActivity().getFragmentManager();
                                    cancel.setVisibility(View.GONE);
                                    mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                                    cancleEditMode();
                                    menu.findItem(R.id.edit_contact).setVisible(false); //
                                    menu.findItem(R.id.save_contact).setVisible(false);
                                    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                        try {
                                            setAdapter();
                                        } catch (NullPointerException e) {
                                            setupSectionPager();
                                        }
                                    }
                                }

                            }

                        });
                        editModeChecker = false;
                        menu.findItem(R.id.edit_contact).setVisible(false);
                        menu.findItem(R.id.save_contact).setVisible(true);
                        checkEdit = true;
                        //return false;
                    }
                });


                card.findViewById(R.id.menu_profile_more).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        card.findViewById(R.id.menu_profile_share).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_global_search).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_remind).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_copy).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_edit).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_delete).setVisibility(View.GONE);
                        card.findViewById(R.id.menu_profile_more).setVisibility(View.GONE);

                        card.findViewById(R.id.menu_profile_less).setVisibility(View.VISIBLE);
                        card.findViewById(R.id.menu_profile_exchange).setVisibility(View.VISIBLE);
                        card.findViewById(R.id.menu_profile_open).setVisibility(View.VISIBLE);
                        card.findViewById(R.id.menu_profile_salesforce).setVisibility(View.VISIBLE);
                        card.findViewById(R.id.menu_profile_add_more).setVisibility(View.VISIBLE);

                        card.findViewById(R.id.menu_profile_less).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                card.findViewById(R.id.menu_profile_share).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_global_search).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_remind).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_copy).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_edit).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_delete).setVisibility(View.VISIBLE);
                                card.findViewById(R.id.menu_profile_more).setVisibility(View.VISIBLE);

                                card.findViewById(R.id.menu_profile_less).setVisibility(View.GONE);
                                card.findViewById(R.id.menu_profile_exchange).setVisibility(View.GONE);
                                card.findViewById(R.id.menu_profile_open).setVisibility(View.GONE);
                                card.findViewById(R.id.menu_profile_salesforce).setVisibility(View.GONE);
                                card.findViewById(R.id.menu_profile_add_more).setVisibility(View.GONE);
                            }
                        });
                    }
                });

            }
        });

        mainToolBar.findViewById(R.id.toolbar_share).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                shareContact();
            }
        });

       /* menu.findItem(R.id.share_profile).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                shareContact();
                return false;
            }
        });*/


        getActivity().findViewById(R.id.barFlipper).setVisibility(View.GONE);

        if (checkEdit) {
            System.out.println("HHH 1");
            menu.findItem(R.id.edit_contact).setVisible(false);
            menu.findItem(R.id.save_contact).setVisible(true);
        }

        //nowEdit = false; //new
        if (nowEdit && !company) {
            System.out.println("HHH 2");
            menu.findItem(R.id.edit_contact).setVisible(false);
            menu.findItem(R.id.save_contact).setVisible(true);

            mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.GONE);
        } else {
            menu.findItem(R.id.edit_contact).setVisible(false); //
            menu.findItem(R.id.save_contact).setVisible(false);

            System.out.println("HHH 3");

            mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);

            mainToolBar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {

                    if (MainActivity.checkDel) {
                        android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();

                        fragmentManager.popBackStack("contacts", FragmentManager.POP_BACK_STACK_INCLUSIVE);
                        MainActivity.checkDel = false;

                    } else
                        getActivity().onBackPressed();


                }
            });
        }

        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
            ((TextView) mainToolBar.findViewById(R.id.toolbar_title)).setText("Profile");
        else
            ((TextView) mainToolBar.findViewById(R.id.toolbar_title)).setText("Company");
        //getActivity().findViewById(R.id.fabMenuContainer).setVisibility(View.GONE);

        if (mainView != null) {
            System.out.println("MAIN != null");
            if (mainView.findViewById(R.id.popupMessage).getVisibility() == View.VISIBLE) {
                getActivity().findViewById(R.id.fabMenuContainer).setVisibility(View.GONE);
            }
        } else System.out.println("MAIN NULL");


        mainToolBar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!company) {
                    ++number_of_clicks[0];
                    if (!thread_started[0]) {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {
                                thread_started[0] = true;
                                try {
                                    Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                    if (number_of_clicks[0] == 1) {
                                        //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                    } else if (number_of_clicks[0] == 2) {
                                        System.out.println("DDD BAR 2");
                                        if (!blur) {
                                            blur = true;
                                            activityApp.runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    Toast.makeText(activityApp, "Secret blur mode enabled", Toast.LENGTH_SHORT).show();
                                                }
                                            });

                                        } else {
                                            blur = false;
                                            activityApp.runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    Toast.makeText(activityApp, "Secret blur mode disabled", Toast.LENGTH_SHORT).show();
                                                }
                                            });

                                        }


                                        activityApp.runOnUiThread(new Runnable() {
                                            @Override
                                            public void run() {
                                                contactProfileDataFragment.setBlur(blur);
                                                contactTimelineDataFragment.setBlur(blur);
                                            }
                                        });


                                    }
                                    number_of_clicks[0] = 0;
                                    thread_started[0] = false;
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        }).start();
                    }
                }
            }
        });


        if (ContactAdapter.checkFoActionIcon) System.out.println("EEE RRR");

        if (CompanyAdapter.selectionModeCompany) {
            menu.findItem(R.id.edit_contact).setVisible(false);
        }
      /*  if (ContactAdapter.checkFoActionIcon) {
            System.out.println("GO PROFILE MERGE");
            MainActivity.MAIN_MENU.getItem(0).setVisible(false);
            MainActivity.MAIN_MENU.getItem(2).setVisible(false);
            MainActivity.MAIN_MENU.getItem(3).setVisible(false);
            MainActivity.mainToolBar.findViewById(R.id.toolbar_title).setVisibility(View.VISIBLE);
            ((TextView)MainActivity.mainToolBar.findViewById(R.id.toolbar_title)).setText("Profile");

            getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);
            ContactAdapter.checkFoActionIcon = false;
          //  MainActivity.checkDel = true;
        }*/


        mainToolBar.findViewById(R.id.toolbar_edit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                nowEdit = true;

                menu.findItem(R.id.menu_profile).setVisible(false);
                menu.findItem(R.id.share_profile).setVisible(false);

                mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.GONE);
                mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.GONE);

                if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                   /* if(companyProfileDataFragment.mainView == null) {
                        //setupSectionPager2();
                        //setEditAdapter();

                    }else*/
                    if (contactProfileDataFragment.mainView == null) {
                        System.out.println("NULL contactProfileDataFragment !!!");
                        ArrayList<Contact> c = new ArrayList<>();
                        c.add(selectedContact);
                        contactProfileDataFragment.setEditAdapter2(c, activityApp);
                    } else
                        setEditAdapter();


                }
                mainToolBar.setNavigationIcon(null);
                cancel.setVisibility(View.VISIBLE);
                startEditMode();
                cancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (editModeChecker) {
                            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                    getActivity());
                            alertDialogBuilder.setTitle("Do you want to discard changes?");
                            alertDialogBuilder
                                    .setCancelable(false)
                                    .setPositiveButton("Yes", (dialog, id) -> {

                                        menu.findItem(R.id.menu_profile).setVisible(false); //
                                        menu.findItem(R.id.share_profile).setVisible(false); //

                                        mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                                        mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                                        mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                                        mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                                        FragmentManager fm = getActivity().getFragmentManager();
                                        cancel.setVisibility(View.GONE);
                                        mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                                        cancleEditMode();
                                        menu.findItem(R.id.edit_contact).setVisible(false); //
                                        menu.findItem(R.id.save_contact).setVisible(false);

                                        mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                                        mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                                        mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                                        mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                            setAdapter();
                                            /*contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.getListOfContactInfo());*/
                                        }
                                        editModeChecker = false;
                                    })
                                    .setNegativeButton("No", (dialog, id) -> {
                                        dialog.cancel();
                                    });

                            AlertDialog alertDialog = alertDialogBuilder.create();
                            alertDialog.show();
                        } else {

                            menu.findItem(R.id.menu_profile).setVisible(false); //
                            menu.findItem(R.id.share_profile).setVisible(false); //

                            mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                            mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                            mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                            mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                            FragmentManager fm = getActivity().getFragmentManager();
                            cancel.setVisibility(View.GONE);
                            mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                            cancleEditMode();
                            menu.findItem(R.id.edit_contact).setVisible(false); //
                            menu.findItem(R.id.save_contact).setVisible(false);
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                try {
                                    setAdapter();
                                } catch (NullPointerException e) {
                                    setupSectionPager();
                                }
                            }
                        }


                    }

                });
                editModeChecker = false;
                menu.findItem(R.id.edit_contact).setVisible(false);
                menu.findItem(R.id.save_contact).setVisible(true);
                checkEdit = true;
            }
        });

       /* menu.findItem(R.id.edit_contact).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {

                return false;
            }
        });*/

        menu.findItem(R.id.save_contact).setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                        getActivity());
                alertDialogBuilder.setTitle("Do you want to save changes?");
                alertDialogBuilder
                        .setCancelable(false)
                        .setPositiveButton("Yes", (dialog, id) -> {

                            System.out.println("EDIIIIIIIIIIT CONTACTS");
                            nowEdit = false;
                            editModeChecker = false;

                            popupHelpCompanyposition.setVisibility(View.GONE);

                            endEditMode();
                               /* new Thread(new Runnable() {
                                    @Override
                                    public void run() {
                                        ContactsFragment.listOfContacts = ContactCacheService.getAllContacts(null);
                                    }
                                }).start();*/


                            //contactAdapter = ContactAdapter.contactAd;
                            ///ContactsFragment.listOfContacts = ContactAdapter.savedContacts;
                            //if(contactAdapter.get == null)System.out.println("NULLADAPTER");


                            /*ContactAdapter.savedContacts.clear();
                            ContactAdapter.savedContacts = ContactCacheService.getAllContacts(null);*/


                            ((Postman) activityApp).updateSavedList();

                            //contactAdapter = ContactAdapter.contactAd;
                            //if (contactAdapter != null)
                            for (int i = 0; i < adapterC.getListOfContacts().size(); i++) {
                                if (adapterC.getListOfContacts().get(i) == null || !adapterC.getListOfContacts().get(i).isValid())
                                    adapterC.getListOfContacts().remove(i);
                            }


                           /* MainActivity.LIST_OF_CONTACTS.clear();
                            MainActivity.LIST_OF_CONTACTS = ContactAdapter.savedContacts;*/


                            //  contactAdapter.notifyDataSetChanged();


                            Realm realm = Realm.getDefaultInstance();
                            System.out.println("GET ID = " + selectedContact.getId());
                            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                                realm.beginTransaction();
                                selectedContact.listOfContactInfo.clear();

                                /*if(contactProfileDataFragment == null || contactProfileDataFragment.contactNumberEditAdapter == null){
                                    setupSectionPager();
                                }*/

                                selectedContact.listOfContactInfo.addAll(contactProfileDataFragment.contactNumberEditAdapter.savechanges(activityApp));
                                realm.commitTransaction();
                                //ContactCacheService.updateContact(selectedContact,null);
                                setAdapter();
                                //    contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
                            } else {
                                try {
                                    companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
                                } catch (Exception e) {

                                }
                            }
                            realm.close();

                            initIconColor(selectedContact, mainView);

                            System.out.println("GET ID = " + selectedContact.getId());
                            cancel.setVisibility(View.GONE);
                            mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                            //     ContactCacheService.updateContact(selectedContact, mainView.getContext());
                            System.out.println("GET ID = " + selectedContact.getId());
                            //              EventBus.getDefault().post(new UpdateFile());

                            mainToolBar.setNavigationOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    if (MainActivity.checkDel) {
                                        android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();

                                        fragmentManager.popBackStack("contacts", FragmentManager.POP_BACK_STACK_INCLUSIVE);
                                        MainActivity.checkDel = false;

                                    } else
                                        getActivity().onBackPressed();


                                }
                            });
                            menu.findItem(R.id.save_contact).setVisible(false);
                            menu.findItem(R.id.edit_contact).setVisible(false); //
                            ContactsFragment.UPD_ALL = true;

                            contactTimelineDataFragment.checkEmail();

                            //EventBus.getDefault().post(new UpdateFile());

                            menu.findItem(R.id.menu_profile).setVisible(false); //
                            menu.findItem(R.id.share_profile).setVisible(false); //

                            mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
                            mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.VISIBLE);
                            mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.VISIBLE);
                            mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.VISIBLE);

                            mainView.findViewById(R.id.cardTime).setVisibility(View.VISIBLE);
                            updateEmail_Phone();


                        })
                        .setNegativeButton("No", (dialog, id) -> dialog.cancel());
                AlertDialog alertDialog = alertDialogBuilder.create();
                alertDialog.show();
                return false;
            }
        });
    }


    public void setEditAdapter() {
        contactProfileDataFragment.setEditAdapter();
    }


    public void setAdapter() {
        contactProfileDataFragment.setDefaultAdapter(activityApp);
    }

    public void setAdapterSolo() {
        contactProfileDataFragment.setDefaultAdapterDolo();
    }


    public static void UpdateCountLoad(Contact contact) {

    }


    public void showCompanyPopup(long id_C) {

        Contact contact = ContactCacheService.getContactById(id_C);
        closeOtherPopup();
        contactProfileDataFragment.closeOtherPopup();
        companyProfileDataFragment.closeOtherPopup();
        companyProfilePopup = (FrameLayout) mainView.findViewById(R.id.company_popup);
        EventBus.getDefault().post(new SetMainProfile(companyProfilePopup));
        //MainActivity.mainProfile = companyProfilePopup;
        //cccc = companyProfilePopup;
        companyProfilePopup.setOnClickListener(v -> {
        });
        ((TextView) companyProfilePopup.findViewById(R.id.name)).setText(contact.getName());


        ((TextView) companyProfilePopup.findViewById(R.id.companyNumb)).setText(String.valueOf(contact.listOfContacts.size()));


        Contact finalContact = contact;
        companyProfilePopup.findViewById(R.id.company_profile_block).setOnClickListener(v -> {

            android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
            android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(finalContact, false), "company").addToBackStack("companys").commit();

            //fragmentManager.executePendingTransactions();

            companyProfilePopup.setVisibility(View.INVISIBLE);
        });


        if (contact.webSite != null && !contact.webSite.isEmpty()) {
            //System.out.println("WEB ICIT");
            ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
            ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

            String web_c = contact.webSite;

            if (web_c.contains("www.")) {
                web_c = web_c.replace("www.", "");
            }
            if (web_c.contains("https://")) {
                web_c = web_c.replace("https://", "");
            }
            if (web_c.contains("http://")) {
                web_c = web_c.replace("http://", "");
            }

            ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText(web_c);
            ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

            companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {

                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                        String uri = finalContact.webSite;
                        if (!uri.contains("https://") && !uri.contains("http://"))
                            uri = "https://" + uri;

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse(uri));

                        if (getActivity() != null)
                            getActivity().startActivity(i);
                        else
                            activityApp.startActivity(i);

                    } catch (Exception e) {

                    }
                }
            });

            companyProfilePopup.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {

                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                        String uri = finalContact.webSite;
                        if (!uri.contains("https://") && !uri.contains("http://"))
                            uri = "https://" + uri;

                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse(uri));

                        if (getActivity() != null)
                            getActivity().startActivity(i);
                        else
                            activityApp.startActivity(i);

                    } catch (Exception e) {

                    }
                }
            });
        } else {
            ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web);
            //companyProfilePopup.findViewById(R.id.web_title).setVisibility(View.GONE);
            ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText("add web");
            ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.gray));


            companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {

                        FrameLayout editFrameWeb = (FrameLayout) getActivity().findViewById(R.id.popupEditMain);
                        ((TextView) editFrameWeb.findViewById(R.id.typeField)).setText("Web");

                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setVisibility(View.VISIBLE);
                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocialInsta)).setVisibility(View.GONE);
                        ((ImageView) editFrameWeb.findViewById(R.id.imageEditSocial)).setImageDrawable(getResources().getDrawable(R.drawable.icn_popup_web));
                        ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                        editFrameWeb.findViewById(R.id.ok_social).setVisibility(View.GONE);

                        editFrameWeb.findViewById(R.id.searchSocial).setVisibility(View.VISIBLE);
                        ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setHint("Add name or address");
                        ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setPadding(0, 0, 150, 0);


                        editFrameWeb.findViewById(R.id.cancelEditField).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).setText("");
                                editFrameWeb.setVisibility(View.GONE);
                            }
                        });

                        editFrameWeb.findViewById(R.id.updateContactField).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().length() > 0) {


                                    Realm realm = Realm.getDefaultInstance();
                                    realm.beginTransaction();
                                    finalContact.webSite = ((TextView) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();
                                    realm.commitTransaction();
                                    realm.close();


                                    ((ImageView) companyProfilePopup.findViewById(R.id.webImgCompany)).setImageResource(R.drawable.icn_popup_web_blue);
                                    ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setVisibility(View.VISIBLE);

                                    String web_c = finalContact.webSite;

                                    if (web_c.contains("www.")) {
                                        web_c = web_c.replace("www.", "");
                                    }
                                    if (web_c.contains("https://")) {
                                        web_c = web_c.replace("https://", "");
                                    }
                                    if (web_c.contains("http://")) {
                                        web_c = web_c.replace("http://", "");
                                    }

                                    ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setText(web_c);
                                    ((TextView) companyProfilePopup.findViewById(R.id.web_title)).setTextColor(getResources().getColor(R.color.primary_dark));

                                    companyProfilePopup.findViewById(R.id.web_title).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            try {

                                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                String uri = finalContact.webSite;
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                                else
                                                    activityApp.startActivity(i);

                                            } catch (Exception e) {

                                            }
                                        }
                                    });

                                    companyProfilePopup.findViewById(R.id.webImgCompany).setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            try {

                                                //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                                String uri = finalContact.webSite;
                                                if (!uri.contains("https://") && !uri.contains("http://"))
                                                    uri = "https://" + uri;

                                                Intent i = new Intent(Intent.ACTION_VIEW);
                                                i.setData(Uri.parse(uri));

                                                if (getActivity() != null)
                                                    getActivity().startActivity(i);
                                                else
                                                    activityApp.startActivity(i);

                                            } catch (Exception e) {

                                            }
                                        }
                                    });
                                }
                                editFrameWeb.setVisibility(View.GONE);
                            }
                        });


                        editFrameWeb.findViewById(R.id.get_last_clips).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                String socialLinkClip = "";
                                for (Clipboard cl : FabNotificationService.clipboard) { //NullPointerException
                                    if (cl.getListClipboards() != null && !cl.getListClipboards().isEmpty()) {
                                        boolean checkFind = false;
                                        for (Clipboard cl2 : cl.getListClipboards()) {
                                            if (cl2.getType().equals(ClipboardEnum.WEB)) {
                                                socialLinkClip = cl2.getValueCopy();
                                                checkFind = true;
                                                break;
                                            }
                                        }
                                        if (checkFind) break;
                                    } else {
                                        if (cl.getType().equals(ClipboardEnum.WEB)) {
                                            socialLinkClip = cl.getValueCopy();
                                            break;
                                        }
                                    }
                                }
                                ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).setText(socialLinkClip);
                            }
                        });


                        editFrameWeb.findViewById(R.id.imageEditSocial).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                try {
                                    if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                        //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                        String uri = finalContact.webSite;
                                        if (!uri.contains("https://") && !uri.contains("http://"))
                                            uri = "https://" + uri;

                                        Intent i = new Intent(Intent.ACTION_VIEW);
                                        i.setData(Uri.parse(uri));

                                        if (getActivity() != null)
                                            getActivity().startActivity(i);
                                        else
                                            activityApp.startActivity(i);
                                    }

                                } catch (Exception e) {

                                }
                            }
                        });

                        editFrameWeb.findViewById(R.id.imageEditSocial).setOnTouchListener(new View.OnTouchListener() {
                            @Override
                            public boolean onTouch(View v, MotionEvent event) {
                                return false;
                            }
                        });

                        editFrameWeb.findViewById(R.id.searchSocial).setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                try {

                                    //System.out.println("WEB ICIT GO name = " + contact.getName() + ", web = " + contact.webSite);
                                    if (((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).length() > 0) {
                                        String uri = ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString();

                                       /* if(ClipboardType.isWeb(uri)) {
                                            if (!uri.contains("https://") && !uri.contains("http://"))
                                                uri = "https://" + uri;

                                            Intent i = new Intent(Intent.ACTION_VIEW);
                                            i.setData(Uri.parse(uri));

                                            if (getActivity() != null)
                                                getActivity().startActivity(i);
                                        }else {*/
                                        Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
                                        intent.putExtra(SearchManager.QUERY, ((EditText) editFrameWeb.findViewById(R.id.dataToEdit)).getText().toString());
                                        if (getActivity() != null)
                                            getActivity().startActivity(intent);
                                        // }

                                           /* else
                                                MainActivity.activityProfile.startActivity(i);*/
                                    }

                                } catch (Exception e) {

                                }
                            }
                        });


                        editFrameWeb.setVisibility(View.VISIBLE);


                        openedViews.add(editFrameWeb);
                    } catch (Exception e) {

                    }
                }
            });


        }

        /*companyProfilePopup.findViewById(R.id.user_edit_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
              //  showFastEditPopup(contact);
            }
        });*/

        companyProfilePopup.findViewById(R.id.user_call_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        companyProfilePopup.findViewById(R.id.user_remind_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        companyProfilePopup.findViewById(R.id.user_share_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            }
        });

        companyProfilePopup.findViewById(R.id.user_edit_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //   showFastEditPopup(contact);
            }
        });

        if (contact.getSocialModel() != null) {

            SocialModel socialModel = contact.getSocialModel();


            if (socialModel.getFacebookLink() != null) {
                companyProfilePopup.findViewById(R.id.facebook_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (socialModel.getFacebookLink() != null) {
                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://facebook.com/" + socialModel.getFacebookLink()));
                            startActivity(intent);
                        }
                    }
                });
            }

            if (socialModel.getVkLink() != null) {
                companyProfilePopup.findViewById(R.id.vk_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (socialModel.getVkLink() != null) {
                            final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/" + socialModel.getVkLink()));
                            startActivity(intent);
                        }
                    }
                });
            }

            if (socialModel.getLinkedInLink() != null) {
                companyProfilePopup.findViewById(R.id.link_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent telegramIntent;
                        try {
                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse("http://linkedin.com/in/" + socialModel.getLinkedInLink()));
                            startActivity(telegramIntent);
                        } catch (Exception e) {
                        }
                    }
                });
            }

            if (socialModel.getInstagramLink() != null) {
                companyProfilePopup.findViewById(R.id.inst_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent telegramIntent;
                        try {
                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse(socialModel.getInstagramLink()));
                            startActivity(telegramIntent);
                        } catch (Exception e) {
                        }
                    }
                });
            }

            if (socialModel.getTelegramLink() != null) {
                companyProfilePopup.findViewById(R.id.telegram_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent telegramIntent;
                        try {
                            telegramIntent = new Intent(Intent.ACTION_VIEW);
                            telegramIntent.setData(Uri.parse("http://telegram.me/" + socialModel.getTelegramLink()));
                            startActivity(telegramIntent);
                        } catch (Exception e) {
                        }
                    }
                });
            }

            if (socialModel.getSkypeLink() != null) {
                companyProfilePopup.findViewById(R.id.skype_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            Intent sky = new Intent("android.intent.action.VIEW");
                            sky.setData(Uri.parse("skype:" + socialModel.getSkypeLink()));
                            startActivity(sky);
                        } catch (Exception e) {
                            Toast.makeText(mainView.getContext(), "Please install skype app", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }

            if (socialModel.getViberLink() != null) {
                companyProfilePopup.findViewById(R.id.viber_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            Uri uri = Uri.parse("tel:" + Uri.encode(socialModel.getViberLink()));
                            Intent intent = new Intent("android.intent.action.VIEW");
                            intent.setClassName("com.viber.voip", "com.viber.voip.WelcomeActivity");
                            intent.setData(uri);
                            startActivity(intent);
                        } catch (Exception e) {
                            Toast.makeText(mainView.getContext(), "Please install viber app", Toast.LENGTH_SHORT)
                                    .show();
                        }
                    }
                });
            }

            if (socialModel.getWhatsappLink() != null) {
                companyProfilePopup.findViewById(R.id.whatsapp_icon).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        PackageManager pm = getActivity().getPackageManager();
                        try {
                            PackageInfo info = pm.getPackageInfo("com.whatsapp", PackageManager.GET_META_DATA);
                            Intent waIntent = new Intent(Intent.ACTION_SEND);
                            waIntent.setType("text/plain");
                            waIntent.setPackage("com.whatsapp");
                            waIntent.putExtra(Intent.EXTRA_TEXT, "YOUR TEXT");
                            getActivity().startActivity(Intent.createChooser(waIntent, "Open with...").addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
                            //startActivity(waIntent);
                        } catch (PackageManager.NameNotFoundException e) {
                            Toast.makeText(mainView.getContext(), "Please install whatsapp app", Toast.LENGTH_SHORT)
                                    .show();
                        }
                        ;
                    }
                });
            }
        }

        Contact finalContact2 = contact;
        companyProfilePopup.findViewById(R.id.socialsArrowDown).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showSocialPopup(finalContact2);
            }
        });


        if (contact.getPhotoURL() == null) {
            companyProfilePopup.findViewById(R.id.companyPopupAvatar).setBackgroundColor(contact.color);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            companyProfilePopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) companyProfilePopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        }
        selectedContactPopup = contact;

        initIconColor(contact, companyProfilePopup);
        initContact_companyPopup(contact, companyProfilePopup);

        companyProfilePopup.setVisibility(View.VISIBLE);
        companyProfilePopup.setFocusable(true);
        companyProfilePopup.setClickable(true);
        companyProfilePopup.requestFocus();
        if (openedViews != null) openedViews.add(companyProfilePopup);


        companyProfilePopup.findViewById(R.id.popup_company_open_socialPopup).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showSocialPopup(contact);

                //if (companyProfileDataFragment != null)
                //    companyProfileDataFragment.addView(socialPopup);
            }
        });


        companyProfilePopup.findViewById(R.id.contactsArrowDown).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {




                   /* if(contact.listOfContacts.size() == 1){
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText("1 contact");
                    }else
                        ((TextView) companyProfilePopup.findViewById(R.id.count_contact_company_preview)).setText(String.valueOf(contact.listOfContacts.size())+" contacts");*/

                if (popupContactsCompany == null)
                    popupContactsCompany = activityApp.findViewById(R.id.popupContactsCompany);

                RecyclerView recyclerViewContacts = popupContactsCompany.findViewById(R.id.recycler_company_preview_contacts);

                RecyclerView.LayoutManager mLayoutManager = new GridLayoutManager(getContext(), 2);

                recyclerViewContacts.setLayoutManager(new LinearLayoutManager(getActivity()));

                Contacts_company_preview_adapter contacts_company_preview_adapter = new Contacts_company_preview_adapter(contact.listOfContacts, getContext(), ProfileFragment.this);

                recyclerViewContacts.setAdapter(contacts_company_preview_adapter);

                initAdapterCompanyContacts(contacts_company_preview_adapter);

                //popupContactsCompany.findViewById(R.id.buttons_company_preview).setVisibility(View.GONE);

                //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.VISIBLE);

                popupContactsCompany.setVisibility(View.VISIBLE);

                popupContactsCompany.findViewById(R.id.closeArrowSocial).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        popupContactsCompany.setVisibility(View.GONE);
                    }
                });

                openedViews.add(popupContactsCompany);
                companyProfileDataFragment.addView(popupContactsCompany);


                popupContactsCompany.findViewById(R.id.cancelEditField).setOnClickListener(v1 -> {
                    //companyProfilePopup.findViewById(R.id.buttons_company_preview).setVisibility(View.VISIBLE);

                    //companyProfilePopup.findViewById(R.id.contacts_popup_company_preview).setVisibility(View.GONE);
                    popupContactsCompany.setVisibility(View.GONE);
                });


                popupContactsCompany.findViewById(R.id.sortElements).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        sortListCompany(contacts_company_preview_adapter);

                        initContact_companyPopup(selectedContact, mainView);
                        //companyProfileDataFragment.initAdapter();
                    }
                });

                popupContactsCompany.findViewById(R.id.populHashTag).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                popupContactsCompany.findViewById(R.id.sortByTime).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
                        ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));


                        sortByTimeCompany(contacts_company_preview_adapter);
                        initContact_companyPopup(selectedContact, mainView);

                        //companyProfileDataFragment.initAdapter();
                    }
                });
            }
        });


        companyProfilePopup.findViewById(R.id.company_profile_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK COMPANY2");

                TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.companyTextPreviev));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.company_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        companyProfilePopup.findViewById(R.id.user_edit_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK COMPANY");
                TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.EditCompanyPreview));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_edit_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        companyProfilePopup.findViewById(R.id.user_call_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK COMPANY");
                TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.CompanyCallPreview));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_call_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        companyProfilePopup.findViewById(R.id.user_remind_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK COMPANY");
                TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.remindCompanyPreview));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_remind_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        companyProfilePopup.findViewById(R.id.user_share_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                System.out.println("CLICK COMPANY");
                TextView textView = ((TextView) companyProfilePopup.findViewById(R.id.shareCompanyPreview));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) companyProfilePopup.findViewById(R.id.user_share_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

    }

    public void OnTouchMethod(TextView textview) {
        System.out.println("DOWN");
        checkClick = false;
        int colorFrom = getResources().getColor(R.color.colorPrimary);
        int colorTo = getResources().getColor(R.color.md_deep_orange_300);
        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(700); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textview.setTextColor((int) animator.getAnimatedValue());
                //  imageview.setColorFilter((int) animator.getAnimatedValue());
                textview.setTypeface(null, Typeface.BOLD);
            }
        });
        colorAnimation.start();
    }

    public void OnUpTouchMethod(TextView textview) {
        System.out.println("UP");
        if (!checkClick) {
            int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
            int colorTo = getResources().getColor(R.color.colorPrimary);
            ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
            colorAnimation.setDuration(1000); // milliseconds
            colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override
                public void onAnimationUpdate(ValueAnimator animator) {
                    textview.setTextColor((int) animator.getAnimatedValue());
                    //  imageview.setColorFilter((int) animator.getAnimatedValue());
                    textview.setTypeface(null, Typeface.NORMAL);
                }

            });
            colorAnimation.start();
        }
    }

    public void OnCalcelTouchMethod(TextView textView) {
        int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
        int colorTo = getResources().getColor(R.color.colorPrimary);
        ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
        colorAnimation.setDuration(1000); // milliseconds
        colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                textView.setTextColor((int) animator.getAnimatedValue());
                //      imageView.setColorFilter((int) animator.getAnimatedValue());
                textView.setTypeface(null, Typeface.NORMAL);
            }

        });
        colorAnimation.start();
    }

    public void OnMoveTouchMethod(TextView textView, MotionEvent motionEvent, FrameLayout frameLayout) {
        System.out.println("MOVE");
        int[] location = new int[2];
        frameLayout.getLocationInWindow(location);
        int leftX = 0;
        int rightX = leftX + frameLayout.getWidth();
        int topY = 0;
        int bottomY = topY + frameLayout.getHeight();
        float xCurrent = motionEvent.getX();
        float yCurrent = motionEvent.getY();
        System.out.println(leftX + ", " + rightX + ", " + topY + ", " + bottomY + ",== " + location[0] + ", = " + location[1] + ", ==== " + xCurrent + ", " + yCurrent);
        if (xCurrent > rightX || xCurrent < leftX || yCurrent > bottomY || yCurrent < topY) {
            if (!checkClick) {
                System.out.println("UPKI222222");
                int colorFrom = getResources().getColor(R.color.md_deep_orange_300);
                int colorTo = getResources().getColor(R.color.colorPrimary);
                int colorTo2 = getResources().getColor(R.color.colorPrimaryDark);
                ValueAnimator colorAnimation = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo);
                colorAnimation.setDuration(1000); // milliseconds

                ValueAnimator colorAnimation2 = ValueAnimator.ofObject(new ArgbEvaluator(), colorFrom, colorTo2);
                colorAnimation2.setDuration(1000); // milliseconds

                colorAnimation.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                        //  textView.setTextColor((int) animator.getAnimatedValue());
                        // imageView.setColorFilter((int) animator.getAnimatedValue());
                        //   textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation.start();


                colorAnimation2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                    @Override
                    public void onAnimationUpdate(ValueAnimator animator) {
                        textView.setTextColor((int) animator.getAnimatedValue());
                        //  imageView.setColorFilter((int) animator.getAnimatedValue());
                        textView.setTypeface(null, Typeface.NORMAL);
                    }

                });
                colorAnimation2.start();


                checkClick = true;
            }

        }
    }

    public static boolean isKeyboard = false;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup viewGroup, Bundle bundle) {

        mainView = inflater.inflate(R.layout.fragment_user_profile, viewGroup, false);

        try {
            fragmentManagerSetup = getChildFragmentManager();
        } catch (Exception e) {
            e.printStackTrace();
        }

        adapterC = ((Postman) activityApp).getAdapter();


        mainView.getViewTreeObserver().addOnGlobalLayoutListener(() -> {
            Rect r = new Rect();
            mainView.getWindowVisibleDisplayFrame(r);
            int screenHeight = mainView.getRootView().getHeight();
            int keypadHeight = screenHeight - r.bottom;

            if (keypadHeight > screenHeight * 0.15) {

                isKeyboard = true;
                //System.out.println("PRO 1");

                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mainView.findViewById(R.id.popupMessage).getLayoutParams();

                layoutParams.gravity = Gravity.TOP;

                layoutParams.topMargin = 0;

                if (mainView.findViewById(R.id.test1).getVisibility() == View.VISIBLE) {

                           /* float px_b = 280 * getContext().getResources().getDisplayMetrics().density;

                            layoutParams.height = (int) px_b;*/

                }


            } else {

                isKeyboard = false;

                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mainView.findViewById(R.id.popupMessage).getLayoutParams();

                //layoutParams.gravity = Gravity.NO_GRAVITY;

                int px_margin_top = (int) (145 * mainView.getContext().getResources().getDisplayMetrics().density);

                layoutParams.topMargin = px_margin_top;


                if (mainView.findViewById(R.id.test1).getVisibility() == View.VISIBLE) {

                    FrameLayout layoutParams1 = mainView.findViewById(R.id.popupMessage).findViewById(R.id.frameTextMess);

                    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) layoutParams1.getLayoutParams();

                    float px = (float) (80 * mainView.getContext().getResources().getDisplayMetrics().density);

                    //122.5

                    lp.weight = 0;

                    lp.height = (int) px;

                    layoutParams1.setLayoutParams(lp);

                    FrameLayout.LayoutParams lp1 = (FrameLayout.LayoutParams) mainView.findViewById(R.id.popupMessage).findViewById(R.id.popup_mess).getLayoutParams();

                    lp1.height = ViewGroup.LayoutParams.MATCH_PARENT;

                    mainView.findViewById(R.id.popupMessage).findViewById(R.id.popup_mess).setLayoutParams(lp1);

                    FrameLayout.LayoutParams lp2 = (FrameLayout.LayoutParams) mainView.findViewById(R.id.popupMessage).getLayoutParams();

                    lp2.height = ViewGroup.LayoutParams.MATCH_PARENT;

                    mainView.findViewById(R.id.popupMessage).setLayoutParams(lp2);
                }
            }

        });


        getActivity().findViewById(R.id.extratorContainer).setVisibility(View.GONE);
        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
        getActivity().findViewById(R.id.fabMenuContainer).setVisibility(View.VISIBLE);
        getActivity().findViewById(R.id.countSearchContacts).setVisibility(View.GONE);

        setHasOptionsMenu(true);


        ProfileFragment.noPhone = false;
        ProfileFragment.profile = true;


        mainView.setFocusable(true);
        mainView.setClickable(true);
        mainView.requestFocus();

        System.out.println("1");
        getActivity().findViewById(R.id.barFlipper).setVisibility(View.GONE);

        getDataFromIntent();
        System.out.println("1 3");

        if (ClibpboardAdapter.checkSelectClips /*&& (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())*/) {
            System.out.println("CHECK CLIPS 1");
            if (getActivity() == null) {
                System.out.println("ACTIVITY NULL");
                ((TextView) activityApp.findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.colorPrimary));
            } else
                ((TextView) getActivity().findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.colorPrimary));
        } else if (!ClibpboardAdapter.checkUpdateClips) {
            System.out.println("CHECK CLIPS 2");
            if (getActivity() == null)
                ((TextView) activityApp.findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.gray));
            else
                ((TextView) getActivity().findViewById(R.id.updateContactClipboard)).setTextColor(getResources().getColor(R.color.gray));
        }

        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
            company = false;
            //mainView.findViewById(R.id.emailImg).setVisibility(View.VISIBLE);
            //mainView.findViewById(R.id.webImg).setVisibility(View.GONE);

            if (selectedContact.isFavorite || selectedContact.isPause || selectedContact.isFinished || selectedContact.isImportant || selectedContact.isCrown || selectedContact.isVip || selectedContact.isStartup || selectedContact.isInvestor) {
                if (selectedContact.isFavorite) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                } else if (selectedContact.isImportant) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                } else if (selectedContact.isFinished) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                } else if (selectedContact.isPause) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                }else if (selectedContact.isCrown) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                }else if (selectedContact.isVip) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                }else if (selectedContact.isStartup) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                }else if (selectedContact.isInvestor) {
                    ((ImageView) mainView.findViewById(R.id.starImgProfile)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                }
                mainView.findViewById(R.id.starImgProfile).setVisibility(View.VISIBLE);
            } else {
                mainView.findViewById(R.id.starImgProfile).setVisibility(View.INVISIBLE);
            }


            float px_bot = 2 * getContext().getResources().getDisplayMetrics().density;

            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.linearName).getLayoutParams();
            params.setMargins(0, (int) -px_bot, 0, 0);

            /*float px = 40 * getContext().getResources().getDisplayMetrics().density;
            float px_bot = 3 * getContext().getResources().getDisplayMetrics().density;

            mainView.findViewById(R.id.name).setPadding(0, 0, (int) px, 0);
            mainView.findViewById(R.id.editNameProflie).setPadding(0, 0, (int) px, 0);

            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.lineNameProfile).getLayoutParams();
            params.setMargins(0, 0, (int) px, (int) px_bot);
            //mainView.findViewById(R.id.lineNameProfile).setLayoutParams(params);
            mainView.findViewById(R.id.lineNameProfile).requestLayout();*/


        } else {
            company = true;
            //mainView.findViewById(R.id.emailImg).setVisibility(View.GONE);
            //mainView.findViewById(R.id.webImg).setVisibility(View.GONE);
            mainView.findViewById(R.id.starImgProfile).setVisibility(View.GONE);

            float px = 20 * getContext().getResources().getDisplayMetrics().density;
            float px_bot = 2 * getContext().getResources().getDisplayMetrics().density;

            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.linearName).getLayoutParams();
            params.setMargins(0, (int) -px_bot, (int) px, 0);

            /*float px = 17 * getContext().getResources().getDisplayMetrics().density;
            float px_bot = 3 * getContext().getResources().getDisplayMetrics().density;

            mainView.findViewById(R.id.name).setPadding(0, 0, (int) px, 0);
            mainView.findViewById(R.id.editNameProflie).setPadding(0, 0, (int) px, 0);

            ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.lineNameProfile).getLayoutParams();
            params.setMargins(0, 0, (int) px, (int) px_bot);
            //mainView.findViewById(R.id.lineNameProfile).setLayoutParams(params);
            mainView.findViewById(R.id.lineNameProfile).requestLayout();*/


            Realm realm = Realm.getDefaultInstance();
            realm.beginTransaction();

            if (selectedContact.getSocialModel() != null) {
                for (Contact contact : selectedContact.listOfContacts) {
                    if (contact.getSocialModel() != null) {
                        if (contact.getSocialModel().getFacebookLink() != null && selectedContact.getSocialModel().getFacebookLink() != null && selectedContact.getSocialModel().getFacebookLink().equalsIgnoreCase(contact.getSocialModel().getFacebookLink())) {
                            selectedContact.getSocialModel().setFacebookLink(null);
                            selectedContact.hasFacebook = false;
                        }

                        if (contact.getSocialModel().getVkLink() != null && selectedContact.getSocialModel().getVkLink() != null && selectedContact.getSocialModel().getVkLink().equalsIgnoreCase(contact.getSocialModel().getVkLink())) {
                            selectedContact.getSocialModel().setVkLink(null);
                            selectedContact.hasVk = false;
                        }

                        if (contact.getSocialModel().getInstagramLink() != null && selectedContact.getSocialModel().getInstagramLink() != null && selectedContact.getSocialModel().getInstagramLink().equalsIgnoreCase(contact.getSocialModel().getInstagramLink())) {
                            selectedContact.getSocialModel().setInstagramLink(null);
                            selectedContact.hasInst = false;
                        }

                        if (contact.getSocialModel().getLinkedInLink() != null && selectedContact.getSocialModel().getLinkedInLink() != null && selectedContact.getSocialModel().getLinkedInLink().equalsIgnoreCase(contact.getSocialModel().getLinkedInLink())) {
                            selectedContact.getSocialModel().setLinkedInLink(null);
                            selectedContact.hasLinked = false;
                        }

                        if (contact.getSocialModel().getTwitterLink() != null && selectedContact.getSocialModel().getTwitterLink() != null && selectedContact.getSocialModel().getTwitterLink().equalsIgnoreCase(contact.getSocialModel().getTwitterLink())) {
                            selectedContact.getSocialModel().setTwitterLink(null);
                            selectedContact.hasTwitter = false;
                        }

                        if (contact.getSocialModel().getYoutubeLink() != null && selectedContact.getSocialModel().getYoutubeLink() != null && selectedContact.getSocialModel().getYoutubeLink().equalsIgnoreCase(contact.getSocialModel().getYoutubeLink())) {
                            selectedContact.getSocialModel().setYoutubeLink(null);
                            selectedContact.hasYoutube = false;
                        }
                    }
                }
            }

            realm.commitTransaction();
            realm.close();
        }

        System.out.println("ID = " + selectedContact.getIdContact());

        initViews();



        if (!company) {

            int px__ = (int) (2 * mainView.getContext().getResources().getDisplayMetrics().density);

            ((ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.result_tabs).getLayoutParams()).leftMargin = -px__;

            final long idThread = selectedContact.getId();
            new Thread(new Runnable() {
                @Override
                public void run() {

                    Realm realm1 = Realm.getDefaultInstance();

                    Contact selectedContact = ContactCacheService.getContactByIdSynk(idThread, realm1);
                    ArrayList<String> conatctPhones = new ArrayList<>();

                    if (selectedContact.listOfContactInfo != null && !selectedContact.listOfContactInfo.isEmpty()) {
                        for (ContactInfo info : selectedContact.listOfContactInfo) {
                            if ((info.type.equalsIgnoreCase("phone") || (info.typeData != null && info.typeData.equalsIgnoreCase("phone"))) && !info.value.equals("+000000000000")) {
                                conatctPhones.add(info.value);
                            }
                        }
                    }

                    SocialModel scContact = null;
                    if (selectedContact.getSocialModel() != null)
                        scContact = selectedContact.getSocialModel();

                    if (!contactsService.getContactById(selectedContact.getIdContact(), selectedContact.getId(), conatctPhones, scContact)) {
                        System.out.println("ADD NEW CONTACT");

                        long newId = contactsService.saveContact(selectedContact);


                        Realm realm = Realm.getDefaultInstance();

                        realm.beginTransaction();
                        selectedContact.setIdContact(String.valueOf(newId));
                        realm.commitTransaction();

                        realm.close();


                    } else System.out.println(" DON't ADD NEW CONTACT");

                    realm1.close();

                    EventBus.getDefault().post(new UpdateSearchMessengers());

                }
            }).start();
        } else {
            int px__ = (int) (8 * mainView.getContext().getResources().getDisplayMetrics().density);

            ((ViewGroup.MarginLayoutParams) mainView.findViewById(R.id.result_tabs).getLayoutParams()).leftMargin = px__;
        }

        System.out.println("3");
        initRecycler();

        System.out.println("4");

        setupSectionPager();

        System.out.println("5");

        getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);

        System.out.println("EDIT STATUC = " + nowEdit);

        //nowEdit = false;
        if (nowEdit && !company) {

            Toolbar mainToolBar = (Toolbar) getActivity().findViewById(R.id.main_toolbar);
            TextView cancel = (TextView) getActivity().findViewById(R.id.cancel_toolbar);


            if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {


            }
            mainToolBar.setNavigationIcon(null);
            cancel.setVisibility(View.VISIBLE);


            mainToolBar.findViewById(R.id.toolbar_kanban_clicker).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_share).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_edit).setVisibility(View.GONE);
            mainToolBar.findViewById(R.id.toolbar_menu).setVisibility(View.GONE);

            startEditMode();
            cancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (editModeChecker) {
                        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                getActivity());
                        alertDialogBuilder.setTitle("Do you want to discard changes?");
                        alertDialogBuilder
                                .setCancelable(false)
                                .setPositiveButton("Yes", (dialog, id) -> {
                                    FragmentManager fm = getActivity().getFragmentManager();
                                    cancel.setVisibility(View.GONE);
                                    mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                                    cancleEditMode();
                                    profileMenu.findItem(R.id.edit_contact).setVisible(false); //
                                    profileMenu.findItem(R.id.save_contact).setVisible(false);


                                    if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty())
                                        setAdapter();
                                    editModeChecker = false;


                                })
                                .setNegativeButton("No", (dialog, id) -> {
                                    dialog.cancel();
                                });

                        AlertDialog alertDialog = alertDialogBuilder.create();
                        alertDialog.show();
                    } else {
                        FragmentManager fm = getActivity().getFragmentManager();
                        cancel.setVisibility(View.GONE);
                        mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
                        cancleEditMode();
                        profileMenu.findItem(R.id.edit_contact).setVisible(false); //
                        profileMenu.findItem(R.id.save_contact).setVisible(false);
                        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
                            try {
                                setAdapter();
                            } catch (NullPointerException e) {
                                setupSectionPager();
                            }
                        }
                    }
                }

            });
            editModeChecker = false;
            //profileMenu.findItem(R.id.edit_contact).setVisible(false);
            //profileMenu.findItem(R.id.save_contact).setVisible(true);
            checkEdit = true;


        }


        System.out.println("END FRAGMEEEEEEEEEEEEEEEEEEEEEEEEEENT");
        return mainView;
    }


    MenuItem menuItem;

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        //inflater.inflate(R.menu.toolbar_menu, menu);
        super.onCreateOptionsMenu(menu, inflater);

    }

    @Override
    public void closeOtherPopup() {
        if (openedViews != null) {
            for (View view : openedViews) {
                view.setVisibility(View.GONE);
            }
            openedViews.clear();
        }

        mainView.findViewById(R.id.popupStar).setVisibility(View.GONE);
        activityApp.findViewById(R.id.popup_menu_profile).setVisibility(View.GONE);
    }

    public void findByCompany(String possition) {
        for (Contact searchCompany : ContactCacheService.getCompanies()) {
            if (searchCompany.listOfContacts != null && !searchCompany.listOfContacts.isEmpty()) {
                if (searchCompany.getName().trim().toLowerCase().compareTo(possition.toLowerCase().trim()) == 0) {
                    System.out.println("FIND CLICK");
                    showCompanyPopup(searchCompany.getId());
                }
            }
        }
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(PopupInProfile event) {
        System.out.println("UPDATE FILEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEES");
        // System.out.println("SIZE UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU = "+MainActivity.LIST_TO_SAVE_OF_FILE.size());
        showProfilePopUp(event.getContact());
        //companyProfileDataFragment.showProfilePopUp(event.getContact());

    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(UpdateSearchMessengers event) {
        System.out.println("UPDATE Messengers");

        updateMessengers();
        //companyProfileDataFragment.showProfilePopUp(event.getContact());

    }


    public void updateMessengers() {
        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {

            //===============================
            System.out.println("START CHECK MESS = " + selectedContact.getIdContact() + ", name = " + selectedContact.getName());
            ArrayList<String> list = contactsService.getContactPhones(selectedContact.getIdContact());
            boolean check_phone = false;
            String phoneF = null;
            if (list != null && selectedContact.getListOfContactInfo() != null) {
                //System.out.println("START CHECK MESS list = "+selectedContact.getListOfContactInfo().size());
                //System.out.println("START CHECK MESS list 2 = "+list.size());
                for (ContactInfo p2 : selectedContact.getListOfContactInfo()) {
                    //System.out.println("item = "+p2.value);
                    if (p2.type.equalsIgnoreCase("phone") || (p2.typeData != null && p2.typeData.equalsIgnoreCase("phone"))) {
                        //System.out.println("item 2");
                        String str = p2.value;
                        if (phoneF == null || phoneF.equals("+000000000000"))
                            phoneF = str;

                        str = str.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                        System.out.println("item 2 = " + str);
                        for (String p : list) {

                            String str2 = p;
                            str2 = str2.replaceAll("[\\.\\s\\-\\+\\(\\)]", "");
                            System.out.println("item 3 = " + str2);
                            if (str.equalsIgnoreCase(str2)) {
                                System.out.println("item success = " + str);
                                check_phone = true;
                                break;
                            }
                        }
                    }
                    if (check_phone) break;
                }
            }
            System.out.println("START CHECK MESS 2");

            if (check_phone) {

                Realm realm = Realm.getDefaultInstance();


                Cursor accountCursor = contactsService.getCursorByType(ContactsService.TYPE_CURSOR.ACCOUNT_TYPE, selectedContact.getIdContact());
                System.out.println("START CHECK MESS 3");
                boolean check2 = false;
                if (accountCursor != null && accountCursor.getCount() > 0) {
                    while (accountCursor.moveToNext()) {
                        int accountTypeI = accountCursor.getColumnIndex(ContactsContract.RawContacts.ACCOUNT_TYPE);
                        if (accountTypeI != -1) {

                            String accountType = accountCursor.getString(accountTypeI);
                            System.out.println("ACC TYPE = " + accountType);
                            if (accountType != null && accountType.contains("telegram") && (selectedContact.getSocialModel() == null || (selectedContact.getSocialModel() != null && (selectedContact.getSocialModel().getTelegramLink() == null || selectedContact.getSocialModel().getTelegramLink().isEmpty())))) {
                                realm.beginTransaction();
                                selectedContact.hasTelegram = true;
                                selectedContact.addAccountType(accountType);
                                if (selectedContact.getSocialModel() == null) {
                                    SocialModel sc = realm.createObject(SocialModel.class);
                                    sc.setTelegramLink(phoneF);
                                    selectedContact.setSocialModel(sc);
                                } else selectedContact.getSocialModel().setTelegramLink(phoneF);

                                check2 = true;

                                realm.commitTransaction();
                            }

                            if (accountType != null) {

                                /*try {
                                    if (accountType.contains("viber") && (selectedContact.getSocialModel() == null || (selectedContact.getSocialModel() != null && (selectedContact.getSocialModel().getViberLink() == null || selectedContact.getSocialModel().getViberLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                        realm.beginTransaction();
                                        selectedContact.hasViber = true;
                                        selectedContact.addAccountType(accountType);
                                        if (selectedContact.getSocialModel() == null) {
                                            SocialModel sc = realm.createObject(SocialModel.class);
                                            sc.setViberLink(phoneF);
                                            selectedContact.setSocialModel(sc);
                                        } else
                                            selectedContact.getSocialModel().setViberLink(phoneF);

                                        realm.commitTransaction();
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }*/

                                try {
                                    if (accountType.contains("whatsapp") && (selectedContact.getSocialModel() == null || (selectedContact.getSocialModel() != null && (selectedContact.getSocialModel().getWhatsappLink() == null || selectedContact.getSocialModel().getWhatsappLink().isEmpty()))) && !phoneF.equals("+000000000000")) {
                                        realm.beginTransaction();
                                        selectedContact.hasWhatsapp = true;
                                        selectedContact.addAccountType(accountType);
                                        if (selectedContact.getSocialModel() == null) {
                                            SocialModel sc = realm.createObject(SocialModel.class);
                                            sc.setWhatsappLink(phoneF);
                                            selectedContact.setSocialModel(sc);
                                        } else
                                            selectedContact.getSocialModel().setWhatsappLink(phoneF);


                                        check2 = true;

                                        realm.commitTransaction();
                                    }

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                            }
                        }
                    }
                    accountCursor.close();
                }

                realm.close();

                if (check2) initIconColor(selectedContact, mainView);
            }


            //=========================


        }
    }

    public void sortCompanyContacts() {


        SharedPreferences mPrefCompanys = getContext().getSharedPreferences("Sort", Context.MODE_PRIVATE);
        String sort = mPrefCompanys.getString("typeSortCompany", "sortByAsc");

        if (sort.equals("sortByAsc")) {
            Realm realm = Realm.getDefaultInstance(); //+
            try {

                realm.beginTransaction();
                Collections.sort(selectedContact.listOfContacts, (contactFirst, contactSecond) -> contactFirst.getName().compareToIgnoreCase(contactSecond.getName()));
                realm.commitTransaction();
            } catch (Exception e) {
                e.printStackTrace();
            }
            realm.close();

        } else if (sort.equals("sortByDesc")) {

            Realm realm = Realm.getDefaultInstance(); //+
            try {
                realm.beginTransaction();
                Collections.sort(selectedContact.listOfContacts, (contactFirst, contactSecond) -> contactSecond.getName().compareToIgnoreCase(contactFirst.getName()));
                realm.commitTransaction();
            } catch (Exception e) {
                e.printStackTrace();
            }
            realm.close();

        } else if (sort.equals("sortByTimeAsc")) {
            Realm realm = Realm.getDefaultInstance(); //+
            try {
                realm.beginTransaction();
                Collections.sort(selectedContact.listOfContacts, (o1, o2) -> o1.getDateCreate().compareTo(o2.getDateCreate()));
                realm.commitTransaction();
            } catch (Exception e) {
                e.printStackTrace();
            }
            realm.close();

        } else if (sort.equals("sortByTimeDesc")) {
            Realm realm = Realm.getDefaultInstance(); //+
            try {
                realm.beginTransaction();
                Collections.sort(selectedContact.listOfContacts, (o1, o2) -> o2.getDateCreate().compareTo(o1.getDateCreate()));
                realm.commitTransaction();
            } catch (Exception e) {
                e.printStackTrace();
            }
            realm.close();
        }

    }


    public void initContact_companyPopup(Contact company, View view) {
        view.findViewById(R.id.first_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.second_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.third_contact_company_preview_frame).setVisibility(View.GONE);
        view.findViewById(R.id.four_contact_company_preview_frame).setVisibility(View.GONE);

        ((TextView) view.findViewById(R.id.companyNumb)).setText(String.valueOf(company.listOfContacts.size()));

        sortCompanyContacts();

        int count_C_comp = 0;

        for (Contact contact : company.listOfContacts) {

            if (count_C_comp == 0) {
                ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.first_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.first_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 1) {
                ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.second_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.second_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 2) {
                ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.third_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.third_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }

            if (count_C_comp == 3) {
                ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageURI(null);

                ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setVisibility(View.GONE);

                if (contact.getPhotoURL() != null)
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageURI(Uri.parse(contact.getPhotoURL()));

                if (contact.getPhotoURL() == null) {
                    GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(getActivity(), R.drawable.blue_circle).mutate();
                    circle.setColor(contact.color);
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setBackground(circle);
                    ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setImageDrawable(null);
                    String initials = getInitials(contact);


                    ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setText(initials);
                    ((TextView) view.findViewById(R.id.four_contact_company_preview_text_count)).setVisibility(View.VISIBLE);

                }

                view.findViewById(R.id.four_contact_company_preview_frame).setVisibility(View.VISIBLE);
            }


            count_C_comp++;

            if (count_C_comp == 4) break;

        }


        ((CircleImageView) view.findViewById(R.id.first_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProfilePopUp(company.listOfContacts.get(0).getId());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.second_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProfilePopUp(company.listOfContacts.get(1).getId());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.third_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProfilePopUp(company.listOfContacts.get(2).getId());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        ((CircleImageView) view.findViewById(R.id.four_contact_company_preview)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    showProfilePopUp(company.listOfContacts.get(3).getId());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    private String getInitials(Contact contact) {
        String initials = "";
        if (contact.getName() != null && !contact.getName().isEmpty()) {
            String names[] = contact.getName().split("\\s+");
            for (String namePart : names) {
                if (namePart != null && namePart.length() > 0)
                    initials += namePart.charAt(0);
            }
        }
        return initials.toUpperCase();
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(SaveChangesProfile event) {

        System.out.println("EDIIIIIIIIIIT CONTACTS");
        nowEdit = false;
        editModeChecker = false;

        popupHelpCompanyposition.setVisibility(View.GONE);

        endEditMode();


        /*ContactAdapter.savedContacts.clear();
        ContactAdapter.savedContacts = ContactCacheService.getAllContacts(null);*/
        ((Postman) activityApp).updateSavedList();

        //contactAdapter = ContactAdapter.contactAd;
        //if (contactAdapter != null)
        for (int i = 0; i < adapterC.getListOfContacts().size(); i++) {
            if (adapterC.getListOfContacts().get(i) == null || !adapterC.getListOfContacts().get(i).isValid())
                adapterC.getListOfContacts().remove(i);
        }


        /*MainActivity.LIST_OF_CONTACTS.clear();
        MainActivity.LIST_OF_CONTACTS = ContactAdapter.savedContacts;*/


        //  contactAdapter.notifyDataSetChanged();


        Realm realm = Realm.getDefaultInstance();
        System.out.println("GET ID = " + selectedContact.getId());
        if (selectedContact.listOfContacts == null || selectedContact.listOfContacts.isEmpty()) {
            realm.beginTransaction();
            selectedContact.listOfContactInfo.clear();

            selectedContact.listOfContactInfo.addAll(contactProfileDataFragment.contactNumberEditAdapter.savechanges(activityApp));
            realm.commitTransaction();
            //ContactCacheService.updateContact(selectedContact,null);
            setAdapter();
            //    contactProfileDataFragment.contactNumberAdapter.updateContactsList(selectedContact.listOfContactInfo);
        } else {
            try {
                companyProfileDataFragment.companyAdapter.notifyDataSetChanged();
            } catch (Exception e) {

            }
        }

        //initIconColor(selectedContact, mainView);

        // System.out.println("GET ID = " + selectedContact.getId());
        //cancel.setVisibility(View.GONE);
        //mainToolBar.setNavigationIcon(R.drawable.icn_arrow_back);
        //     ContactCacheService.updateContact(selectedContact, mainView.getContext());
        //System.out.println("GET ID = " + selectedContact.getId());
        //              EventBus.getDefault().post(new UpdateFile());

        /*mainToolBar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (MainActivity.checkDel) {
                    android.support.v4.app.FragmentManager fragmentManager = ((FragmentActivity) getActivity()).getSupportFragmentManager();

                    fragmentManager.popBackStack("contacts", FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    MainActivity.checkDel = false;

                } else
                    getActivity().onBackPressed();


            }
        });
        menu.findItem(R.id.save_contact).setVisible(false);
        menu.findItem(R.id.edit_contact).setVisible(true);*/
        realm.close();
        ContactsFragment.UPD_ALL = true;
       // EventBus.getDefault().post(new UpdateFile());

        //getActivity().findViewById(R.id.contacts_block).callOnClick();

    }


    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(PopupCompanyInProfile event) {
        System.out.println("UPDATE FILEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEES");
        // System.out.println("SIZE UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU = "+MainActivity.LIST_TO_SAVE_OF_FILE.size());
        showCompanyPopup(event.getCompany());
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(UpdateContactInProfile event) {

        if (nowEdit) {
            selectedContact = event.getContact();
            contactProfileDataFragment.selectedContact.clear();
            contactProfileDataFragment.selectedContact.add(selectedContact);
            //selectedContact.setSocialModel(event.getContact().getSocialModel());
            //selectedContact.setListOfContactInfo(event.getContact().getListOfContactInfo());
            contactProfileDataFragment.contactNumberEditAdapter.updateList(selectedContact.getListOfContactInfo());
            initIconColor(selectedContact, mainView);

            ((EditText) mainView.findViewById(R.id.editNameProflie)).setText(selectedContact.getName());

            if (selectedContact.getCompany() != null && !selectedContact.getCompany().isEmpty()) {
                ((EditText) mainView.findViewById(R.id.company_title_edit)).setText(selectedContact.getCompany());
            }
            if (selectedContact.getCompanyPossition() != null && !selectedContact.getCompanyPossition().isEmpty()) {
                ((EditText) mainView.findViewById(R.id.company_edit)).setText(selectedContact.getCompanyPossition());
            }

            //ContactCacheService.updateContact(selectedContact,null);
        } else {
            selectedContact = event.getContact();
            contactProfileDataFragment.selectedContact = new ArrayList<>();
            contactProfileDataFragment.selectedContact.add(selectedContact);
            //selectedContact.setSocialModel(event.getContact().getSocialModel());
            //selectedContact.setListOfContactInfo(event.getContact().getListOfContactInfo());

            if(contactProfileDataFragment.contactNumberAdapter == null){
                setupSectionPager();
            }


            //System.out.println("Null contact 5");

            contactProfileDataFragment.
                    contactNumberAdapter.
                    updateContactsList(selectedContact.
                            getListOfContactInfo());

            initIconColor(selectedContact, mainView);


            ((TextView) mainView.findViewById(R.id.name)).setText(selectedContact.getName());
            ((TextView) mainView.findViewById(R.id.name)).requestLayout();

            if (selectedContact.getCompany() != null && !selectedContact.getCompany().isEmpty()) {
                ((TextView) mainView.findViewById(R.id.company_title)).setText(selectedContact.getCompany());
                ((TextView) mainView.findViewById(R.id.company_title)).requestLayout();
                //((TextView) mainView.findViewById(R.id.company_title)).setVisibility(View.VISIBLE);
            }
            if (selectedContact.getCompanyPossition() != null && !selectedContact.getCompanyPossition().isEmpty()) {
                ((TextView) mainView.findViewById(R.id.company)).setText(selectedContact.getCompanyPossition());
                ((TextView) mainView.findViewById(R.id.company)).requestLayout();
                //((TextView) mainView.findViewById(R.id.company)).setVisibility(View.VISIBLE);
            }

            if (selectedContact.getCompany() != null) {
                mainView.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.company_title)).setText(selectedContact.getCompany());
                if (selectedContact.getCompanyPossition() != null) {
                    Double ems = selectedContact.getCompanyPossition().length() / 2.5;
                    int ems_count = ems.intValue();
                    if (ems_count < 6) {
                        ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(6 + (6 - ems_count));
                    }
                } else {
                    ((TextView) mainView.findViewById(R.id.company_title)).setMaxEms(12);
                }

                ((TextView) mainView.findViewById(R.id.company_title)).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        findByCompany(selectedContact.getCompany());
                    }
                });
            }
            if (selectedContact.getCompanyPossition() != null) {
                mainView.findViewById(R.id.company).setVisibility(View.VISIBLE);
                ((TextView) mainView.findViewById(R.id.company)).setText(selectedContact.getCompanyPossition());
                if (selectedContact.getCompany() != null) {
                    Double ems = selectedContact.getCompany().length() / 2.5;
                    int ems_count = ems.intValue();
                    if (ems_count < 6) {
                        ((TextView) mainView.findViewById(R.id.company)).setMaxEms(6 + (6 - ems_count));
                    }
                } else {
                    ((TextView) mainView.findViewById(R.id.company)).setMaxEms(12);
                }

            }
        }


        contactTimelineDataFragment.checkEmail();
    }

    ;

    public void showProfilePopUp(long id_C) {
        //closeOtherPopup();

        Contact contact = ContactCacheService.getContactById(id_C);

        contactProfileDataFragment.closeOtherPopup();
        companyProfileDataFragment.closeOtherPopup();
        profilePopUp = (FrameLayout) mainView.getRootView().findViewById(R.id.profile_popup);

        final String idCo = contact.getIdContact();
        final long idC = contact.getId();

        Contact finalContact1 = contact;
        profilePopUp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //if (popupUserHashtags != null) popupUserHashtags.setVisibility(View.GONE);

                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                ++number_of_clicks[0];
                if (!thread_started[0]) {
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            thread_started[0] = true;
                            try {
                                Thread.sleep(DELAY_BETWEEN_CLICKS_IN_MILLISECONDS);
                                if (number_of_clicks[0] == 1) {
                                    //client.send(AppHelper.FORMAT_LEFT_CLICK);
                                } else if (number_of_clicks[0] == 2) {

                                    //
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            if (profilePopUp.findViewById(R.id.starImg).getVisibility() == View.VISIBLE) {
                                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                                                if (finalContact1.isFavorite) {

                                                    ContactCacheService.updateFavoriteContact(false, idC);
                                                    ContactsService.updateFaroviteContact(false, idCo, getContext());
                                                    ContactsFragment.UPD_FAV = true;
                                                    Toast.makeText(getContext(), "Deleted from Favorites", Toast.LENGTH_SHORT).show();
                                                } else if (finalContact1.isImportant) {
                                                    ContactCacheService.updateImportantContact(false, idC);
                                                    ContactsFragment.UPD_IMP = true;
                                                    Toast.makeText(getContext(), "Deleted from Important", Toast.LENGTH_SHORT).show();
                                                } else if (finalContact1.isFinished) {
                                                    ContactCacheService.updateFinishedContact(false, idC);
                                                    ContactsFragment.UPD_FIN = true;
                                                    Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                } else if (finalContact1.isPause) {
                                                    ContactCacheService.updatePauseContact(false, idC);
                                                    ContactsFragment.UPD_PAUSE = true;
                                                    Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();
                                                }else if (finalContact1.isCrown) {
                                                    ContactCacheService.updateCrownContact(false, idC);
                                                    ContactsFragment.UPD_CROWN = true;
                                                    Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();
                                                }else if (finalContact1.isVip) {
                                                    ContactCacheService.updateVipContact(false, idC);
                                                    ContactsFragment.UPD_VIP = true;
                                                    Toast.makeText(getContext(), "Deleted from Vip", Toast.LENGTH_SHORT).show();
                                                }else if (finalContact1.isStartup) {
                                                    ContactCacheService.updateStartupContact(false, idC);
                                                    ContactsFragment.UPD_STARTUP = true;
                                                    Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();
                                                }else if (finalContact1.isInvestor) {
                                                    ContactCacheService.updateInvestorContact(false, idC);
                                                    ContactsFragment.UPD_INVESTOR = true;
                                                    Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();
                                                }


                                            } else {
                                                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                                                profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);
                                                ContactCacheService.updateFavoriteContact(true, idC);
                                                ContactsService.updateFaroviteContact(true, idCo, getContext());
                                                ContactsFragment.UPD_FAV = true;
                                                Toast.makeText(getContext(), "Successfully added to Favorites", Toast.LENGTH_SHORT).show();

                                                profilePopUp.findViewById(R.id.starImg).post(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        profilePopUp.findViewById(R.id.starImg).callOnClick();
                                                    }
                                                });
                                            }
                                        }
                                    });


                                }
                                number_of_clicks[0] = 0;
                                thread_started[0] = false;
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }).start();
                }

            }
        });


            Calendar current = Calendar.getInstance();
            Calendar contactDate = Calendar.getInstance();
            current.setTime(new Date());
            contactDate.setTime(contact.getDateCreate());
            String timeStr = "";
            if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && current.get(Calendar.MONTH) == contactDate.get(Calendar.MONTH) && current.get(Calendar.DAY_OF_MONTH) == contactDate.get(Calendar.DAY_OF_MONTH)) {

                timeStr = Time.valueOf(selectedContact.time).getHours() + ":";
                if (Time.valueOf(selectedContact.time).getMinutes() < 10) timeStr += "0";
                timeStr += Time.valueOf(selectedContact.time).getMinutes();
            } else if (current.get(Calendar.YEAR) == contactDate.get(Calendar.YEAR) && (current.get(Calendar.MONTH) != contactDate.get(Calendar.MONTH) || current.get(Calendar.DAY_OF_MONTH) != contactDate.get(Calendar.DAY_OF_MONTH))) {


                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + contactDate.get(Calendar.DAY_OF_MONTH);
            } else {

                timeStr = contactDate.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + " " + String.valueOf(contactDate.get(Calendar.YEAR))/*.substring(2)*/;

            }


            ((TextView)profilePopUp.findViewById(R.id.cardTime)).setText(/*getUpdTime(contact.getDateCreate(), Time.valueOf(contact.time))*/ timeStr);

        profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


        Contact finalContact = contact;
        profilePopUp.findViewById(R.id.starImg).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int[] location = new int[2];
                profilePopUp.findViewById(R.id.starImg).getLocationOnScreen(location);
                System.out.println("X = " + location[0]);
                System.out.println("Y = " + location[1]);

                ViewGroup.MarginLayoutParams lp = (ViewGroup.MarginLayoutParams) profilePopUp.findViewById(R.id.popupStar).getLayoutParams();
                lp.leftMargin = (int) (location[0] - 13.5 * getContext().getResources().getDisplayMetrics().density);
                lp.topMargin = (int) (1 * getContext().getResources().getDisplayMetrics().density);


                profilePopUp.findViewById(R.id.popupStar).requestLayout();
                profilePopUp.findViewById(R.id.popupStar).setVisibility(View.VISIBLE);

                profilePopUp.findViewById(R.id.popupStar).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });

                if (!finalContact.isFavorite) {
                    ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isImportant) {
                    ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isFinished) {
                    ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isPause) {
                    ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isCrown) {
                    ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isVip) {
                    ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isStartup) {
                    ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(null);
                }

                if (!finalContact.isInvestor) {
                    ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                } else {
                    ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(null);
                }


                profilePopUp.findViewById(R.id.starFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isFavorite) {
                            finalContact.isFavorite = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                            ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                        } else {

                            ContactsService.updateFaroviteContact(true, finalContact.getIdContact(), getContext());

                            finalContact.isFavorite = true;
                            finalContact.isImportant = false;
                            finalContact.isPause = false;
                            finalContact.isFinished = false;

                            finalContact.isVip = false;
                            finalContact.isCrown = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_FAV = true;
                    }
                });


                profilePopUp.findViewById(R.id.impFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isImportant) {
                            finalContact.isImportant = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);

                               /* Drawable d = DrawableCompat.wrap(getResources().getDrawable( R.drawable.icn_important));
                                DrawableCompat.setTint(d, Color.parseColor("#9e9e9e"));
                                ((ImageView)profilePopUp.findViewById(R.id.importantContactIcon)).setImageDrawable(d);*/
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            Toast.makeText(getContext(), "Deleted from important", Toast.LENGTH_SHORT).show();


                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }
                            finalContact.isImportant = true;
                            finalContact.isFavorite = false;
                            finalContact.isPause = false;
                            finalContact.isFinished = false;

                            finalContact.isVip = false;
                            finalContact.isCrown = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);

                            Toast.makeText(getContext(), "Set as important", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_IMP = true;
                    }
                });

                profilePopUp.findViewById(R.id.stopFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isFinished) {
                            finalContact.isFinished = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);
                            Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }
                            finalContact.isFinished = true;
                            finalContact.isFavorite = false;
                            finalContact.isPause = false;
                            finalContact.isImportant = false;

                            finalContact.isVip = false;
                            finalContact.isCrown = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Finished communication", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_FIN = true;
                    }
                });


                profilePopUp.findViewById(R.id.pauseFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isPause) {
                            finalContact.isPause = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Back to communication", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }
                            finalContact.isPause = true;
                            finalContact.isFavorite = false;
                            finalContact.isFinished = false;
                            finalContact.isImportant = false;

                            finalContact.isVip = false;
                            finalContact.isCrown = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Paused communication", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_PAUSE = true;
                    }
                });

                profilePopUp.findViewById(R.id.crownFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isCrown) {
                            finalContact.isCrown = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Crown", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }
                            finalContact.isCrown = true;
                            finalContact.isFavorite = false;
                            finalContact.isFinished = false;
                            finalContact.isImportant = false;

                            finalContact.isVip = false;
                            finalContact.isPause = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Crown", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_CROWN = true;
                    }
                });

                profilePopUp.findViewById(R.id.vipFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isVip) {
                            finalContact.isVip = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Vip", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }

                            finalContact.isVip = true;
                            finalContact.isFavorite = false;
                            finalContact.isFinished = false;
                            finalContact.isImportant = false;

                            finalContact.isCrown = false;
                            finalContact.isPause = false;
                            finalContact.isStartup = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Vip", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_VIP = true;
                    }
                });

                profilePopUp.findViewById(R.id.startupFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isStartup) {
                            finalContact.isStartup = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Startup", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }

                            finalContact.isStartup = true;
                            finalContact.isFavorite = false;
                            finalContact.isFinished = false;
                            finalContact.isImportant = false;

                            finalContact.isCrown = false;
                            finalContact.isPause = false;
                            finalContact.isVip = false;
                            finalContact.isInvestor = false;

                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Startup", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_STARTUP = true;
                    }
                });

                profilePopUp.findViewById(R.id.investorFrame).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Realm realm = Realm.getDefaultInstance();
                        realm.beginTransaction();
                        if (finalContact.isInvestor) {
                            finalContact.isInvestor = false;
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);

                            Toast.makeText(getContext(), "Deleted from Investor", Toast.LENGTH_SHORT).show();

                        } else {
                            if (finalContact.isFavorite) {
                                ContactsService.updateFaroviteContact(false, finalContact.getIdContact(), getContext());
                            }

                            finalContact.isInvestor = true;
                            finalContact.isFavorite = false;
                            finalContact.isFinished = false;
                            finalContact.isImportant = false;

                            finalContact.isCrown = false;
                            finalContact.isPause = false;
                            finalContact.isVip = false;
                            finalContact.isStartup = false;

                            ((ImageView) profilePopUp.findViewById(R.id.investorContactIcon)).setColorFilter(null);

                            ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
                            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);

                            ((ImageView) profilePopUp.findViewById(R.id.favoriteContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.finishedContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.importantContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            ((ImageView) profilePopUp.findViewById(R.id.pauseContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.crownContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.vipContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);
                            ((ImageView) profilePopUp.findViewById(R.id.startupContactIcon)).setColorFilter(ContextCompat.getColor(getContext(), R.color.gray), PorterDuff.Mode.SRC_IN);

                            profilePopUp.findViewById(R.id.popupStar).setVisibility(View.GONE);


                            Toast.makeText(getContext(), "Set as Investor", Toast.LENGTH_SHORT).show();
                        }
                        realm.commitTransaction();
                        realm.close();
                        ContactsFragment.UPD_INVESTOR = true;
                    }
                });

                //openedViews.add( profilePopUp.findViewById(R.id.popupStar));

            }
        });


        if (contact.isFavorite || contact.isPause || contact.isFinished || contact.isImportant || contact.isCrown || contact.isVip || contact.isStartup || contact.isInvestor) {
            if (contact.isFavorite) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.star));
            } else if (contact.isImportant) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.checked_2));
            } else if (contact.isFinished) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.finish_1));
            } else if (contact.isPause) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.pause_1));
            }else if (contact.isCrown) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.crown));
            }else if (contact.isVip) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.vip_new));
            }else if (contact.isStartup) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.startup));
            }else if (contact.isInvestor) {
                ((ImageView) profilePopUp.findViewById(R.id.starImg)).setImageDrawable(getResources().getDrawable(R.drawable.investor_));
            }
            profilePopUp.findViewById(R.id.starImg).setVisibility(View.VISIBLE);
        } else {
            profilePopUp.findViewById(R.id.starImg).setVisibility(View.GONE);
        }

        /*((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails);
        // ((ImageView)profilePopUp.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web);
        profilePopUp.findViewById(R.id.emailImg).setOnClickListener(v -> {
        });*/
        //profilePopUp.findViewById(R.id.webImg).setOnClickListener(v -> {});
        LinearLayout containerHashTags = (LinearLayout) profilePopUp.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.colorPrimary));
            text.setText(hashTag.getHashTagValue() + " ");
//            text.setOnClickListener(v -> contactAdapter.searchByHashTagValue(hashTag.getHashTagValue()));
            containerHashTags.addView(text);
        }

        if (contact != null && (contact.getListOfHashtags() == null || contact.getListOfHashtags().size() == 0)) {
            System.out.println("Add Hashtah TExt added");
            TextView text = new TextView(getActivity());
            text.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
            //DisplayMetrics metrics = mainView.getContext().getResources().getDisplayMetrics();
            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.gray));
            text.setText("hashtags");
            text.setOnClickListener(v1 -> {
                //containerHashTags.removeAllViews();
                showPopupUserHashtags(selectedContact);
            });
            containerHashTags.addView(text);
        }

        selectedContactPopup = contact;
        lastOpenedProfileId = String.valueOf(contact.getId());
        initIconColor(contact, profilePopUp);
        fillProfileData(contact, profilePopUp);
        profilePopUp.setVisibility(View.VISIBLE);
        profilePopUp.setFocusable(true);
        profilePopUp.setClickable(true);
        profilePopUp.requestFocus();


        if (openedViews != null) openedViews.add(profilePopUp);
    }

    private String getPhoneNumberInfo(String number) {
        PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();

        try {
            Phonenumber.PhoneNumber swissNumberProto = phoneUtil.parse(number, "");
            PhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();

            String region = "";
            region = phoneUtil.getRegionCodeForCountryCode(swissNumberProto.getCountryCode());

            if (region.length() > 0) {
                region = " " + region;
            }

            String carrier = "";
            carrier = carrierMapper.getNameForNumber(swissNumberProto, Locale.ENGLISH);

            if (carrier.length() > 0) {
                carrier = " " + carrier;
            }
            String result = number + region + carrier;
            return result;
        } catch (NumberParseException e) {
            return number;
        }
    }

    private void fillProfileData(final Contact contact, final View profilePopUp) {
        ((TextView) profilePopUp.findViewById(R.id.name)).setText(contact.getName());


        profilePopUp.findViewById(R.id.company).setVisibility(View.GONE);
        profilePopUp.findViewById(R.id.company_title).setVisibility(View.GONE);

        if (contact.getCompanyPossition() != null) {
            profilePopUp.findViewById(R.id.company).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.company)).setText(contact.getCompanyPossition());
        }

        if (contact.getCompany() != null) {
            profilePopUp.findViewById(R.id.company_title).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.company_title)).setText(contact.getCompany());
        }

        profilePopUp.findViewById(R.id.user_call_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
//                startActivity(new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + contact.listOfContactInfo.get(0).toString())));
            }
        });

        profilePopUp.findViewById(R.id.arrowShowHashtags).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (socialPopup != null) {
                    if (socialPopup.getVisibility() == View.VISIBLE)
                        return;
                    showPopupUserHashtags(contact);
                } else
                    showPopupUserHashtags(contact);
            }
        });

        profilePopUp.findViewById(R.id.socialsArrowDown).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showSocialPopup(contact);
            }
        });


        profilePopUp.findViewById(R.id.user_share_block).setOnClickListener(v -> {
            String exportData = "";
            //contact.fillData(getContext(), contactsService);
            if (contact.getName() != null) exportData += "Name: " + contact.getName() + "\n";
            if (contact.getCompany() != null)
                exportData += "Company: " + contact.getCompany() + "\n";
            if (contact.getCompanyPossition() != null)
                exportData += "Position: " + contact.getCompanyPossition() + "\n";
            if (contact.listOfContactInfo != null) {
                for (ContactInfo contactInfo : contact.listOfContactInfo) {
                    if (contactInfo.isPhone && !contactInfo.value.equals("+000000000000"))
                        exportData += "Phone: " + contactInfo.toString() + "\n";
                    if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                    if (contactInfo.isEmail) exportData += "Email: " + contactInfo + "\n";
                    if (contactInfo.isNote && ClipboardType.isFacebook(contactInfo.value)) {
                        exportData += "Facebook: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isVk(contactInfo.value)) {
                        exportData += "Vk: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isInsta(contactInfo.value)) {
                        exportData += "Instagram: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isLinkedIn(contactInfo.value)) {
                        exportData += "Linkedin: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isTwitter(contactInfo.value)) {
                        exportData += "Twitter: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isYoutube(contactInfo.value)) {
                        exportData += "Youtube: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isG_Sheet(contactInfo.value)) {
                        exportData += "Google_sheet: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isG_Doc(contactInfo.value)) {
                        exportData += "Google_doc: " + contactInfo + "\n";
                        continue;
                    }

                    if (contactInfo.isNote && ClipboardType.is_Tumblr(contactInfo.value)) {
                        exportData += "Tumblr: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.is_Angel(contactInfo.value)) {
                        exportData += "Angel: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isMedium(contactInfo.value)) {
                        exportData += "Medium: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isGitHub(contactInfo.value)) {
                        exportData += "Github: " + contactInfo + "\n";
                        continue;
                    }
                    if (contactInfo.isNote && ClipboardType.isWeb(contactInfo.value))
                        exportData += "Web: " + contactInfo + "\n";
                }
            }

            if (contact.getSocialModel() != null) {
                if (contact.getSocialModel().getFacebookLink() != null && !contact.getSocialModel().getFacebookLink().isEmpty())
                    exportData += "Facebook: " + getPhoneNumberInfo(contact.getSocialModel().getFacebookLink()) + "\n";
                if (contact.getSocialModel().getVkLink() != null && !contact.getSocialModel().getVkLink().isEmpty())
                    exportData += "Vk: " + getPhoneNumberInfo(contact.getSocialModel().getVkLink()) + "\n";
                if (contact.getSocialModel().getLinkedInLink() != null && !contact.getSocialModel().getLinkedInLink().isEmpty())
                    exportData += "Linkedin: " + getPhoneNumberInfo(contact.getSocialModel().getLinkedInLink()) + "\n";
                if (contact.getSocialModel().getInstagramLink() != null && !contact.getSocialModel().getInstagramLink().isEmpty())
                    exportData += "Instagram: " + getPhoneNumberInfo(contact.getSocialModel().getInstagramLink()) + "\n";
                if (contact.getSocialModel().getTwitterLink() != null && !contact.getSocialModel().getTwitterLink().isEmpty())
                    exportData += "Twitter: " + getPhoneNumberInfo(contact.getSocialModel().getTwitterLink()) + "\n";
                if (contact.getSocialModel().getYoutubeLink() != null && !contact.getSocialModel().getYoutubeLink().isEmpty())
                    exportData += "Youtube: " + getPhoneNumberInfo(contact.getSocialModel().getYoutubeLink()) + "\n";
                /*if(contact.getSocialModel().getWhatsappLink() != null && !contact.getSocialModel().getWhatsappLink().isEmpty())
                    exportData += "Whatsapp: " + getPhoneNumberInfo(contact.getSocialModel().getWhatsappLink()) + "\n";
                if(contact.getSocialModel().getViberLink() != null && !contact.getSocialModel().getViberLink().isEmpty())
                    exportData += "Viber: " + getPhoneNumberInfo(contact.getSocialModel().getViberLink()) + "\n";
                if(contact.getSocialModel().getTelegramLink() != null && !contact.getSocialModel().getTelegramLink().isEmpty())
                    exportData += "Telegram: " + getPhoneNumberInfo(contact.getSocialModel().getTelegramLink()) + "\n";
                if(contact.getSocialModel().getSkypeLink() != null && !contact.getSocialModel().getSkypeLink().isEmpty())
                    exportData += "Skype: " + getPhoneNumberInfo(contact.getSocialModel().getSkypeLink()) + "\n";*/
            }

            if (contact.getListOfHashtags() != null && !contact.getListOfHashtags().isEmpty()) {
                exportData += "Tags:";
                for (HashTag hashTag : contact.getListOfHashtags()) {
                    if (hashTag != null && hashTag.getHashTagValue() != null) {
                        exportData += " " + hashTag.getHashTagValue();
                    }
                }
                exportData += "\n";
            }

            exportData += "\n\n";
            Intent shareIntent = new Intent(Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            shareIntent.putExtra(Intent.EXTRA_TEXT, exportData);
            startActivity(Intent.createChooser(shareIntent, "Поделиться контактом"));
        });


        /*for (ContactInfo contactInfo : contact.listOfContactInfo) {
            if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent emailIntent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                                "mailto", contactInfo.value, null));
                        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "");
                        emailIntent.putExtra(Intent.EXTRA_TEXT, "");
                        startActivity(Intent.createChooser(emailIntent, "Send email"));
                    }
                });
            }
        }*/
      /*  if(contact.webSite.length() > 0){
            ((ImageView)profilePopUp.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web_blue);
            profilePopUp.findViewById(R.id.webImg).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse("http://"+contact.webSite));
                        startActivity(i);
                    }catch (Exception e){
                        Toast.makeText(mainView.getContext()," Incorrect web site",Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }*/

        profilePopUp.findViewById(R.id.user_edit_block).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //showFastEditPopup(selectedContactPopup);
            }
        });

        profilePopUp.findViewById(R.id.user_remind_block).setOnClickListener(v -> {
            //profilePopUp.setVisibility(View.GONE);
            //showRemindPopup(selectedContactPopup);
        });

        profilePopUp.findViewById(R.id.user_profile_block).setOnClickListener(v -> {
            System.out.println("CLICK CONT 2222");
            android.support.v4.app.FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
            android.support.v4.app.FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.replace(R.id.main_content, ProfileFragment.newInstance(contact, false)).addToBackStack("contacts").commit();

            profilePopUp.setVisibility(View.GONE);
        });

        //((TextView) profilePopUp.findViewById(R.id.time)).setText(/*getUpdTime*/(contact.time));
        if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) profilePopUp.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            profilePopUp.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            profilePopUp.findViewById(R.id.profilePopupAvatar).setBackgroundColor(Color.TRANSPARENT);
            ((ImageView) profilePopUp.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
        }
        /*for (ContactInfo contactInfo : contact.listOfContactInfo) {
            if (contactInfo.type.toLowerCase().compareTo("email") == 0) {
                ((ImageView) profilePopUp.findViewById(R.id.emailImg)).setImageResource(R.drawable.icn_bottombar_emails_blue);
                profilePopUp.findViewById(R.id.emailImg).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent intent = new Intent(Intent.ACTION_SEND);
                        intent.setType("text/html");
                        intent.putExtra(Intent.EXTRA_EMAIL, contactInfo.value);
                        intent.putExtra(Intent.EXTRA_SUBJECT, "");
                        intent.putExtra(Intent.EXTRA_TEXT, ".");
                        startActivity(Intent.createChooser(intent, "Send Email"));
                    }
                });
            }
        }*/
       /* if(contact.webSite.length() > 0){
            ((ImageView)profilePopUp.findViewById(R.id.webImg)).setImageResource(R.drawable.icn_popup_web_blue);
            profilePopUp.findViewById(R.id.webImg).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse("http://"+contact.webSite));
                        startActivity(i);
                    }catch (Exception e){
                        Toast.makeText(mainView.getContext()," Incorrect web site",Toast.LENGTH_SHORT).show();
                    }
                }
            });
        }*/
        //initIconColor(contact, profilePopUp);


        //////////////////////////================================================================================================================================================TOUCH
        profilePopUp.findViewById(R.id.user_profile_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.textPreviewProfile));
                //    ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.imagePreviewIcon));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_profile_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

        profilePopUp.findViewById(R.id.user_edit_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.textEditPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.editImagePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_edit_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_call_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TExtCallPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.CallImagePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_call_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_remind_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TextRemindPreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.ImageRemindPreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_remind_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });


        profilePopUp.findViewById(R.id.user_share_block).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

                TextView textView = ((TextView) profilePopUp.findViewById(R.id.TextSharePreview));
                ImageView imageView = ((ImageView) profilePopUp.findViewById(R.id.ImageSharePreview));
                FrameLayout frameLayout = ((FrameLayout) profilePopUp.findViewById(R.id.user_share_block));
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN: {
                        OnTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_UP: {
                        OnUpTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_CANCEL: {
                        OnCalcelTouchMethod(textView);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        OnMoveTouchMethod(textView, motionEvent, frameLayout);
                        break;
                    }
                }

                return false;
            }
        });

    }

    @Override
    public void sortList() {

    }

    public int getQuantityOpenedViews() {
        return openedViews.size();
    }

    @Override
    public void showHashTagPopUp() {

    }

    @Override
    public void showAllContactsPopup() {

    }

    @Override
    public void showFavoriteContactsPopup() {

    }

    @Override
    public void showFastEditPopup(Contact contact) {
        System.out.println("************");
        //   closeOtherPopup();
        fastEditPopup = (FrameLayout) getActivity().findViewById(R.id.fastEditPopup);
        ((EditText) fastEditPopup.findViewById(R.id.nameContact)).setText(contact.getName());

        fastEditPopup.findViewById(R.id.hashtagsList).setVisibility(View.GONE);

        ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);

        if (contact.getListOfHashtags().size() >= 0) {
            String hashTagsStr = "";
            for (HashTag hashTag : contact.getListOfHashtags()) {
                hashTagsStr += hashTag.getHashTagValue() + " ";
            }
            fastEditPopup.findViewById(R.id.hashtagsList).setVisibility(View.VISIBLE);
            ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setText(hashTagsStr.trim());
        }

        ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).addTextChangedListener(new TextWatcher() {

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

                if (s.subSequence(start, start + count).toString().compareTo(" ") == 0) {
                    ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setText(s.toString() + "#");
                    ((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).setSelection(((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).getText().length());
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
        });

        fastEditPopup.findViewById(R.id.companyText).setVisibility(View.GONE);
        fastEditPopup.findViewById(R.id.companyPossitionText).setVisibility(View.GONE);

        if (contact.getCompany() != null) {
            ((EditText) fastEditPopup.findViewById(R.id.companyText)).setText(contact.getCompany());
            fastEditPopup.findViewById(R.id.companyText).setVisibility(View.VISIBLE);
        }

        if (contact.getCompanyPossition() != null) {
            ((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).setText(contact.getCompanyPossition());
            fastEditPopup.findViewById(R.id.companyPossitionText).setVisibility(View.VISIBLE);
        }


        initIconColor(contact, fastEditPopup);
        if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            fastEditPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) fastEditPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            fastEditPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) fastEditPopup.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
        }

        fastEditPopup.findViewById(R.id.updateContacts).setOnClickListener(v -> {
            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                    getActivity());
            System.out.println("click save 3");
            alertDialogBuilder.setTitle("Do you want to edit a contact?");
            alertDialogBuilder
                    .setCancelable(false)
                    .setPositiveButton("Yes", (dialog, id) -> {
                        RealmList<HashTag> listOfHashTag = new RealmList<HashTag>();
                        ArrayList<String> hashtags = new ArrayList<>(Arrays.asList(((EditText) fastEditPopup.findViewById(R.id.hashtagsList)).getText().toString().split(" ")));
                        for (String hashTag : hashtags) {
                            listOfHashTag.add(new HashTag(hashTag));
                        }
                        //if (contactAdapter == null) contactAdapter = ContactAdapter.contactAd;
                        int possition = adapterC.indexElement(contact);

                        contact.setListOfHashtags(listOfHashTag);
                        String oldName = contact.getName();
                        contact.setName(((EditText) fastEditPopup.findViewById(R.id.nameContact)).getText().toString().trim());
                        if (fastEditPopup.findViewById(R.id.companyText).getVisibility() == View.VISIBLE)
                            contact.setCompany(((EditText) fastEditPopup.findViewById(R.id.companyText)).getText().toString());
                        if (fastEditPopup.findViewById(R.id.companyPossitionText).getVisibility() == View.VISIBLE)
                            contact.setCompanyPossition(((EditText) fastEditPopup.findViewById(R.id.companyPossitionText)).getText().toString());

                        //String idConatct = contactsService.getIdContactByName(oldName);
                        // contactsService.updateName(idConatct, oldName,contact.getName());
                        //contactsService.fastUpdateContact(contact);

                        ContactCacheService.updateContact(contact, getActivity());
                       // EventBus.getDefault().post(new UpdateFile());
                        adapterC.replaceContact(possition, contact);

                        closeOtherPopup();


                    })
                    .setNegativeButton("No", (dialog, id) -> dialog.cancel());

            AlertDialog alertDialog = alertDialogBuilder.create();
            alertDialog.show();
        });
        fastEditPopup.findViewById(R.id.cancelFastEdit).setOnClickListener(v -> {
                    closeOtherPopup();
                    showProfilePopUp(contact.getId());
                }
        );

        profilePopUp.setVisibility(View.GONE);
        fastEditPopup.setVisibility(View.VISIBLE);
        if (openedViews != null) openedViews.add(fastEditPopup);
    }

    @Override
    public void showRemindPopup(Contact contact) {
        closeOtherPopup();
        remindPopup = (FrameLayout) getActivity().findViewById(R.id.remindPopup);
        ((TextView) remindPopup.findViewById(R.id.nameContact)).setText(selectedContactPopup.getName());
        ((TextView) remindPopup.findViewById(R.id.company_title)).setText(selectedContactPopup.getCompany());

        initIconColor(selectedContact, mainView);

        LinearLayout containerHashTags = (LinearLayout) remindPopup.findViewById(R.id.containerHashTags);
        if (containerHashTags.getChildCount() > 0)
            containerHashTags.removeAllViews();
        for (HashTag hashTag : contact.getListOfHashtags()) {
            TextView text = new TextView(getActivity());

            text.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
            text.setTextColor(getResources().getColor(R.color.primary_dark));
            text.setText(hashTag.getHashTagValue() + " ");
            containerHashTags.addView(text);
        }

        if (contact.getPhotoURL() == null) {
            GradientDrawable circle = (GradientDrawable) ContextCompat.getDrawable(mainView.getContext(), R.drawable.blue_circle).mutate();
            circle.setColor(contact.color);
            remindPopup.findViewById(R.id.profilePopupAvatar).setBackground(circle);
            ((ImageView) remindPopup.findViewById(R.id.profilePopupAvatar)).setImageDrawable(null);

            String initials = "";
            String names[] = contact.getName().split("\\s+");

            for (String namePart : names)
                initials += namePart.charAt(0);

            remindPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.VISIBLE);
            ((TextView) remindPopup.findViewById(R.id.profilePopupInitials)).setText(initials);
        } else {
            remindPopup.findViewById(R.id.profilePopupInitials).setVisibility(View.GONE);
            ((ImageView) remindPopup.findViewById(R.id.profilePopupAvatar)).setImageURI(Uri.parse(contact.getPhotoURL()));
        }

        remindPopup.findViewById(R.id.remind_cancel).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                remindPopup.setVisibility(View.GONE);
                showProfilePopUp(contact.getId());
            }
        });
        initIconColor(contact, remindPopup);
        remindPopup.setVisibility(View.VISIBLE);
        if (openedViews != null) openedViews.add(remindPopup);
    }


    @Override
    public void onPause() {
        getActivity().findViewById(R.id.cancel_toolbar).setVisibility(View.GONE);

        System.out.println("PAUSE PROFILE");
        super.onPause();
    }

    public static boolean checkEdit = false;

    public boolean stopThread = false;

    @Override
    public void onStop() {
        System.out.println("STOP PROFILE");
        ProfileFragment.profile = false;

        if (thread != null) {
            stopThread = true;
            System.out.println("STOP THREAD");
            //thread.interrupt();
        }
        if (EventBus.getDefault().isRegistered(this)) EventBus.getDefault().unregister(this);
        //EventBus.getDefault().unregister(this);

        getActivity().findViewById(R.id.framePopupSocial).setVisibility(View.GONE);
        super.onStop();
    }

    @Override
    public void onDestroy() {

        try {

            profileMenu.findItem(R.id.menu_profile).setVisible(false);
            profileMenu.findItem(R.id.share_profile).setVisible(false);

            System.out.println("DESTROY PROFILE");
            if (!hideSelect) frameSelectBar.setVisibility(View.VISIBLE);
            getActivity().findViewById(R.id.accountContainer).setVisibility(View.GONE);
            checkEdit = false;


      /*  if(thread != null){
            thread.interrupt();
        }*/

            //EventBus.getDefault().unregister(this);

            CompanyAdapter.clickmerge = false;
            if (companyProfileDataFragment != null && companyProfileDataFragment.companyAdapter != null)
                companyProfileDataFragment.companyAdapter.savedSelectedContacts = null;
            CompanyAdapter.selectionModeCompany = false;
            CompanyAdapter.mergeCompanyAdapter = false;
            getActivity().findViewById(R.id.select_menu).setVisibility(View.GONE);

            //unregisterForContextMenu(mainView);


        /*((ImageView) mainView.findViewById(R.id.facebook_icon)).setImageDrawable(null);
        ((CircleImageView) mainView.findViewById(R.id.whatsapp_icon)).setImageDrawable(null);
        ((CircleImageView) mainView.findViewById(R.id.telegram_icon)).setImageDrawable(null);
        ((ImageView) mainView.findViewById(R.id.link_icon)).setImageDrawable(null);
        ((CircleImageView) mainView.findViewById(R.id.viber_icon)).setImageDrawable(null);
        ((ImageView) mainView.findViewById(R.id.vk_icon)).setImageDrawable(null);
        ((CircleImageView) mainView.findViewById(R.id.skype_icon)).setImageDrawable(null);*/
            new Thread(new Runnable() {
                @Override
                public void run() {
                    //Runtime.getRuntime().gc();
                }
            }).start();
        }catch (NullPointerException e){
            e.printStackTrace();
        }

        super.onDestroy();
    }

    @Override
    public void onStart() {
        super.onStart();
        System.out.println("ON START");
        getActivity().invalidateOptionsMenu();
    }

    @Override
    public void addSelectedCompany(String company) {
        //  ((EditText)companySelectPopup.findViewById(R.id.companyName)).setText(company);

//        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
//                getActivity());
//        alertDialogBuilder.setTitle("Do you want to add "+tag+" ?");
//        alertDialogBuilder
//                .setCancelable(false)
//                .setPositiveButton("Yes", (dialog, id) -> {
//                    customTagsAdapter.addHashTag(tag);
//                    contact.getListOfHashtags().add(new HashTag(tag.trim()));
//                    ContactCacheService.updateContact(contact,mainView.getContext());
//                    EventBus.getDefault().post(new UpdateFile());
//                    Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
//                    initRecyclerHashTags();
//                    addHashtagPreview(tag);
//                })
//                .setNegativeButton("No", (dialog, id) -> dialog.cancel());
//
//        AlertDialog alertDialog = alertDialogBuilder.create();
//        alertDialog.show();
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof Activity) {
            activityApp = (Activity) context;
        }
    }

    public void openDialodDataProfile(ArrayList<ContactInfo> list) {
        AlertDialog.Builder builder = new AlertDialog.Builder(mainView.getContext());

        View view = getLayoutInflater().inflate(R.layout.select_email_phone_popup, null);

        //final float scale = getResources().getDisplayMetrics().density;

        builder.setView(view);
        AlertDialog alertDialog = builder.create();

        RecyclerView recyclerView = (RecyclerView) view.findViewById(R.id.recycleUpdateData);
        //ViewGroup.LayoutParams params = recyclerView.getLayoutParams();

        //params.height = (int) ((int) 110 * scale);



        DialogDataContactSelect dialogAdapter = new DialogDataContactSelect(list, mainView.getContext(), view, recyclerView);

        //recyclerView.requestLayout();

        alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "CONFIRM", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {

                ArrayList<ContactInfo> listS = dialogAdapter.getSeleted();
                if(listS.size() == 0){
                    Toast.makeText(mainView.getContext(), "Select data", Toast.LENGTH_SHORT).show();
                }else{


                    if(listS.get(0).isPhone){

                        if(((CheckBox)view.findViewById(R.id.checkExtractInb)).isChecked() && !listS.get(0).isPrimary){

                            contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                            for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                if (ci.isPhone && ci.isPrimary) {
                                    contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                    ContactCacheService.setPrimaryInfo(ci, false);
                                }
                            }

                            ContactCacheService.setPrimaryInfo(listS.get(0), true);
                            Toast.makeText(mainView.getContext(), "Set as default", Toast.LENGTH_SHORT).show();
                            contactProfileDataFragment.contactNumberAdapter.sortByPrimary();
                            contactProfileDataFragment.contactNumberAdapter.notifyDataSetChanged();

                        }else if( !((CheckBox)view.findViewById(R.id.checkExtractInb)).isChecked() && listS.get(0).isPrimary){

                            contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), listS.get(0).value, false);
                            for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                if (ci.isPhone && ci.isPrimary) {
                                    contactsService.setPhoneIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                    ContactCacheService.setPrimaryInfo(ci, false);
                                }
                            }

                            Toast.makeText(mainView.getContext(), "Deleted from default", Toast.LENGTH_SHORT).show();
                            contactProfileDataFragment.contactNumberAdapter.sortByPrimary();
                            contactProfileDataFragment.contactNumberAdapter.notifyDataSetChanged();
                        }

                        intentPhone(listS.get(0).value);
                    }else{

                        if(listS.size() == 1){
                            if(((CheckBox)view.findViewById(R.id.checkExtractInb)).isChecked() && !listS.get(0).isPrimary){

                                contactsService.setMailIsPrimary(selectedContact.getIdContact(), listS.get(0).value, true);
                                for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                    if (ci.isEmail && ci.isPrimary) {
                                        contactsService.setMailIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                        ContactCacheService.setPrimaryInfo(ci, false);
                                    }
                                }

                                ContactCacheService.setPrimaryInfo(listS.get(0), true);
                                Toast.makeText(mainView.getContext(), "Set as default", Toast.LENGTH_SHORT).show();
                                contactProfileDataFragment.contactNumberAdapter.sortByPrimary();
                                contactProfileDataFragment.contactNumberAdapter.notifyDataSetChanged();

                            }else if(!((CheckBox)view.findViewById(R.id.checkExtractInb)).isChecked() && listS.get(0).isPrimary){

                                contactsService.setMailIsPrimary(selectedContact.getIdContact(), listS.get(0).value, false);
                                for (ContactInfo ci : selectedContact.getListOfContactInfo()) {
                                    if (ci.isEmail && ci.isPrimary) {
                                        contactsService.setMailIsPrimary(selectedContact.getIdContact(), ci.value, false);
                                        ContactCacheService.setPrimaryInfo(ci, false);
                                    }
                                }

                                Toast.makeText(mainView.getContext(), "Deleted from default", Toast.LENGTH_SHORT).show();
                                contactProfileDataFragment.contactNumberAdapter.sortByPrimary();
                                contactProfileDataFragment.contactNumberAdapter.notifyDataSetChanged();
                            }
                        }





                        SharedPreferences mSettings;
                        mSettings = getActivity().getSharedPreferences("accountUser", Context.MODE_PRIVATE);
                        Set<String> set = mSettings.getStringSet("accounts", null);

                        String finalReplyFrom = null;

                        if (set != null && !set.isEmpty()) {

                            for (String s : set) {
                                finalReplyFrom = s;
                                break;
                            }

                        }

                        if (finalReplyFrom == null) {

                            ArrayList<String> sTo = new ArrayList<>();
                            ArrayList<String> sName = new ArrayList<>();

                            for(ContactInfo i : listS){
                                sTo.add( i.value);
                                sName.add(selectedContact.getName());
                            }

                            ShareTemplatesMessageReply.showChooseAccount(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                        }else {
                            ArrayList<String> sTo = new ArrayList<>();
                            ArrayList<String> sName = new ArrayList<>();

                            for(ContactInfo i : listS){
                                sTo.add( i.value);
                                sName.add(selectedContact.getName());
                            }

                            ShareTemplatesMessageReply.showTemplatesPopup(getActivity(), false, sTo, sName, finalReplyFrom, null, null, false);


                        }


                    }



                }


                //updateContactSwipe(clipboard);

            }
        });


        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "CANCEL", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int id) {

            }
        });

        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                Button negButton = ((AlertDialog) dialog).getButton(DialogInterface.BUTTON_NEGATIVE);

                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 50, 0);
                negButton.setLayoutParams(params);

                RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(mainView.getContext());
                recyclerView.setLayoutManager(mLayoutManager);
                recyclerView.setAdapter(dialogAdapter);



                view.findViewById(R.id.checkExtractInb).setVisibility(View.GONE);


            }
        });

        alertDialog.show();

    }

    @Override
    public void addSelectedCompanyEdit(String company) {
        ((EditText) mainView.findViewById(R.id.company_title_edit)).setText(company);
        ((EditText) mainView.findViewById(R.id.company_title_edit)).setSelection(((EditText) mainView.findViewById(R.id.company_title_edit)).getText().length());
        //popupCompaniesEdit.setVisibility(View.GONE);
        //fastEditPopup.setVisibility(View.GONE);

//        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
//                getActivity());
//        alertDialogBuilder.setTitle("Do you want to add "+tag+" ?");
//        alertDialogBuilder
//                .setCancelable(false)
//                .setPositiveButton("Yes", (dialog, id) -> {
//                    customTagsAdapter.addHashTag(tag);
//                    contact.getListOfHashtags().add(new HashTag(tag.trim()));
//                    ContactCacheService.updateContact(contact,mainView.getContext());
//                    EventBus.getDefault().post(new UpdateFile());
//                    Toast.makeText(mainView.getContext(), "Hashtag successfully added", Toast.LENGTH_SHORT).show();
//                    initRecyclerHashTags();
//                    addHashtagPreview(tag);
//                })
//                .setNegativeButton("No", (dialog, id) -> dialog.cancel());
//
//        AlertDialog alertDialog = alertDialogBuilder.create();
//        alertDialog.show();
    }

    public void addSelectPosition(String position) {
        ((EditText) mainView.findViewById(R.id.company_edit)).setText(position);
        ((EditText) mainView.findViewById(R.id.company_edit)).setSelection(((EditText) mainView.findViewById(R.id.company_edit)).getText().length());
        //popupPositionEdit.setVisibility(View.GONE);
    }

    private boolean sortedDescCompany, sortTimeAscCompany;

    private boolean sortedDesc;

    public void initAdapterCompanyContacts(Contacts_company_preview_adapter adapter) {
        mPrefCompany = getContext().getSharedPreferences("Sort", Context.MODE_PRIVATE);
        String sort = mPrefCompany.getString("typeSortCompany", "sortByAsc");

        if (sort.equals("sortByAsc")) {
            adapter.sortByAsc();
            sortedDescCompany = false;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setText("A-Z");
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        } else if (sort.equals("sortByDesc")) {
            adapter.sortByDesc();
            sortedDescCompany = true;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setText("Z-A");
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        } else if (sort.equals("sortByTimeAsc")) {
            adapter.sortByTimeAsc();
            sortTimeAscCompany = false;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
        } else if (sort.equals("sortByTimeDesc")) {
            adapter.sortByTimeDesc();
            sortTimeAscCompany = true;
            ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.gray));
            ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.primary));
        }
    }

    public void sortByTimeCompany(Contacts_company_preview_adapter adapter) {

        if (!sortTimeAscCompany) {
            sortByTimeDescCompany(adapter);

            sortTimeAscCompany = true;
        } else {
            sortByTimeAscCompany(adapter);
            sortTimeAscCompany = false;
        }
        //companyAdapter.notifyDataSetChanged();
    }

    public void sortByTimeAscCompany(Contacts_company_preview_adapter adapter) {
        sortTimeAscCompany = false;
        adapter.sortByTimeAsc();
    }

    public void sortByTimeDescCompany(Contacts_company_preview_adapter adapter) {
        sortTimeAscCompany = true;
        adapter.sortByTimeDesc();
    }

    public void sortListCompany(Contacts_company_preview_adapter adapter) {
        if (sortedDesc) {
            sortArrayByAscCompany(adapter);
            sortedDesc = false;
            return;
        }
        sortArrayByDescCompany(adapter);
        sortedDesc = true;
    }

    private void sortArrayByDescCompany(Contacts_company_preview_adapter adapter) {
        ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        adapter.sortByDesc();
        TextView sortText = (TextView) popupContactsCompany.findViewById(R.id.sortText);
        sortText.setText("Z-A");
    }

    private void sortArrayByAscCompany(Contacts_company_preview_adapter adapter) {
        ((TextView) popupContactsCompany.findViewById(R.id.sortText)).setTextColor(getResources().getColor(R.color.primary));
        ((ImageView) popupContactsCompany.findViewById(R.id.timeSort)).setColorFilter(ContextCompat.getColor(mainView.getContext(), R.color.gray));
        adapter.sortByAsc();
        TextView sortText = (TextView) popupContactsCompany.findViewById(R.id.sortText);
        sortText.setText("A-Z");
    }

}





